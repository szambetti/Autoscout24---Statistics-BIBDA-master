*------------------------------------------------------------*
Utente:             Maria Vallarelli
Data:               20 ottobre 2020
Ora:                00:08:29
Sito:                50306432
Piattaforma:            X64_10PRO
Release di maintenance: 9.04.01M5P091317
Versione di EM:          14.3
* 
*------------------------------------------------------------*
* Log di training
Data:               20 ottobre 2020
Ora:                00:08:26
*------------------------------------------------------------*
15207  proc freq data=EMWS1.EMSave_VariableSet noprint;
15208  table ROLE*LEVEL/out=WORK.EMSaveMETA;
15209  run;
 
NOTE: There were 40 observations read from the data set EMWS1.EMSAVE_VARIABLESET.
NOTE: The data set WORK.EMSAVEMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
15210  proc print data=WORK.EMSaveMETA label noobs;
15211  var ROLE LEVEL COUNT;
15212  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15213  title9 ' ';
15214  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15215  run;
 
NOTE: There were 5 observations read from the data set WORK.EMSAVEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
15216  title10;
 
15217  %let EMEXCEPTIONSTRING=;
15564  *------------------------------------------------------------*;
15565  * EMSave: Generation of macros and macro variables;
15566  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15567  *------------------------------------------------------------*;
 
15568  %let EMEXCEPTIONSTRING=;
15569  *------------------------------------------------------------*;
15570  * TRAIN: EMSave;
15571  *------------------------------------------------------------*;
15572  %let EM_ACTION = TRAIN;
15573  %let syscc = 0;
15574  *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
15575
15576  %macro EM_SAVEXT_MAIN;
15577
15578     %if %upcase("&EM_ACTION") = "CREATE" %then %do;
15579         filename _create catalog 'sashelp.emutil.savext_create.source';
15580         %include _create;
15581         filename _create;
15582         %EM_SAVEXT_CREATE;
15583     %end;
15584     %else
15585     %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
15586         filename _train catalog 'sashelp.emutil.savext_train.source';
15587         %include _train;
15588         filename _train;
15589         %EM_SAVEXT_TRAIN;
15590     %end;
15591
15592  %mend EM_SAVEXT_MAIN;
15593
15594  %EM_SAVEXT_MAIN;
NOTE: %INCLUDE (level 1) file _TRAIN is file SASHELP.EMUTIL.SAVEXT_TRAIN.SOURCE.
15595 +*** TRAINING MACRO FOR EM_SAVEXT EXTENSION NODE;
15597 +%macro EM_SAVEXT_TRAIN;
15599 +    *** IMPORT UTILITY MACROS;
15601 +    filename _savutil catalog 'sashelp.emutil.savext_macros.source';
15602 +    %include _savutil;
15603 +    filename _savutil;
15605 +    *** CHECK FOR IMPORT DATA SOURCES WITHOUT READING PROJECT SETS ************;
15606 +    *** POPULATE MACRO ARRAY TO HOLD ONLY EXISTING AND REQUESTED PARTITIONS ***;
15607 +    *** GET NUMBER OF EXISTING AND REQUESTED PARTITIONS ***********************;
15609 +    data _null_;
15610 +        length _save_set $50 _save_role $20 _save_set_index $12 _save_role_index $14 _i 3;
15611 +        _i=0;
15613 +        *** TRAIN;
15614 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_DATA) and (("&EM_PROPERTY_TRAIN"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15615 +            _i=_i+1;                                                        /* INCREMENT ARRAY INDEX */
15616 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_DATA, TRAIN, _i);                /* INSERT INTO MACRO ARRAY */
15617 +        %end;
15619 +        *** VALIDATE;
15620 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_VALIDATE) and (("&EM_PROPERTY_VALIDATE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15621 +            _i=_i+1;
15622 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_VALIDATE, VALIDATE, _i);
15623 +        %end;
15625 +        *** TEST;
15626 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TEST) and (("&EM_PROPERTY_TEST"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15627 +            _i=_i+1;
15628 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TEST, TEST, _i);
15629 +        %end;
15631 +        *** SCORE;
15632 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_SCORE) and (("&EM_PROPERTY_SCORE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15633 +            _i=_i+1;
15634 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_SCORE, SCORE, _i);
15635 +        %end;
15637 +        *** TRANSACTION;
15638 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TRANSACTION) and (("&EM_PROPERTY_TRANSACTION"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15639 +            _i=_i+1;
15640 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TRANSACTION, TRANSACTION, _i);
15641 +        %end;
15643 +        *** ESTABLISH NUMBER OF SETS TO SAVE;
15644 +        call symput('_NUM_SAVE_SETS', strip(put(_i,1.)));
15646 +    run;
15648 +    *** EXIT IF NO PARTITIONS TO SAVE;
15650 +    %if ^(&_NUM_SAVE_SETS) %then %do;
15651 +        %put &EM_CODEBAR;
15652 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nodata_warn, NOQUOTE));
15653 +        %put &WARNING;
15654 +        %put &EM_CODEBAR;
15655 +        %goto quit;
15656 +    %end;
15658 +    *** FOR FILE PREFIXES CONTAINING PROBLEMATIC CHARACTERS;
15659 +    *** REVERT TO DEFAULT NAME;
15661 +    %if ^(%nrbquote(%sysfunc(compress("&EM_PROPERTY_NAME")))="") %then %do;
15662 +        %let _BAD_CHARS= <>:%str(%")%str(%')/\|?* %nrstr(&)%nrstr(%%);
15663 +        %let _BAD_CHAR_FLAG= 0;
15664 +        %do _i= 1 %to %length(%nrbquote(&_BAD_CHARS));
15665 +            %if %index(%nrbquote(&EM_PROPERTY_NAME), %nrbquote(%substr(%nrbquote(&_BAD_CHARS), &_i, 1)))
15666 +                %then %let _BAD_CHAR_FLAG= 1;
15667 +        %end;
15668 +        %if %sysfunc(kcount(%nrbquote(&EM_PROPERTY_NAME))) %then %let _BAD_CHAR_FLAG= 1;
15670 +        %if &_BAD_CHAR_FLAG %then %do;
15671 +           %put &EM_CODEBAR;
15672 +           %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_bad_char_err, NOQUOTE));
15673 +           %put &WARNING;
15674 +           %put &EM_CODEBAR;
15675 +           *** REVERT TO DEFAULT NAME;
15676 +           %let EM_PROPERTY_NAME = em_save;
15677 +        %end;
15678 +    %end;
15679 +    *** ACCOUNT FOR LIB ISSUES;
15681 +    %if (%upcase(%sysfunc(compress("&EM_PROPERTY_LIB"))) = "WORK") %then %do;
15682 +        %put &EM_CODEBAR;
15683 +        %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_work_lib_warn, NOQUOTE));
15684 +        %put &WARNING;                                                      /* WORK IS A TEMPORARY LIBRARY */
15685 +        %put &EM_CODEBAR;                                                   /* IT DISAPPEARS AFTER THE FLOW COMPLETES ALONG WITH DATA SAVED THERE */
15686 +    %end;
15689 +    %if (%sysfunc(compress("&EM_PROPERTY_LIB")) = "") %then %do;            /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
15690 +        libname _em_save "%nrbquote(&EM_NODEDIR)";                          /* AND IN OTHERS AS "" */
15691 +        %let EM_PROPERTY_LIB = _em_save;
15692 +    %end;
15694 +    *** CHECK FOR EXISTING LIB;
15696 +    %let _rc = %sysfunc(libref(&EM_PROPERTY_LIB));
15697 +    %if &_rc %then %do;
15698 +        %let EMEXCEPTIONSTRING=exception.server.DATASOURCE.LIBRARY.NOTASSIGNED,&EM_PROPERTY_LIB;
15699 +        %put &EM_CODEBAR;
15700 +        %let ERROR1 = %sysfunc(sasmsg(sashelp.dmine, DATASOURCE.LIBRARY.NOTASSIGNED_ERR, NOQUOTE, &EM_PROPERTY_LIB));
15701 +        %put &ERROR1;
15702 +        %put &EM_CODEBAR;
15703 +        %goto quit;
15704 +    %end;
15706 +    *** ACCOUNT FOR DEFAULT NAME;                                           /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
15707 +                                                                            /* AND IN OTHERS AS "" */
15708 +    %if (%sysfunc(compress("&EM_PROPERTY_NAME"))="") %then %let EM_PROPERTY_NAME = em_save;
15710 +    *** CALL UTILITY MACROS TO SAVE SETS *************************************;
15712 +    %if ("&EM_PROPERTY_TYPE"="SAS7BDAT") %then %do;                         /* OUTPUT SAS DATA SET */
15713 +        %do _i=1 %to &_num_save_sets;
15714 +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);           /* GET EXACT INPUT VARS FOR EACH INPUT SET */
15715 +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;                     /* IF NO VARIABLES WERE SELECTED CONTINUE TO NEXT PARTITION */
15716 +                %put &EM_CODEBAR;                                           /* REALLY ONLY MATTERS FOR TRANSACTION DATA - OTHERWISE ALL PARTITIONS WILL HAVE SAME NUMBER OF VARS */
15717 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
15718 +                %put &WARNING;
15719 +                %put &EM_CODEBAR;
15720 +                %goto continue_sas_loop;
15721 +            %end;
15722 +            %EM_SAVEXT_SAS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);                /* CYCLE THROUGH SETS TO SAVE */
15723 +            %continue_sas_loop:
15724 +        %end;
15725 +    %end;
15726 +    %else %do;                                                              /* OUTPUT JMP, EXCEL 2007, CSV OR TAB TABLE */
15727 +        %do _i=1 %to &_num_save_sets;
15728 +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
15729 +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;
15730 +                %put &EM_CODEBAR;
15731 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
15732 +                %put &WARNING;
15733 +                %put &EM_CODEBAR;
15734 +                %goto continue_pxpt_loop;
15735 +            %end;
15736 +            %EM_SAVEXT_PXPT(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
15737 +            %continue_pxpt_loop:
15738 +        %end;
15739 +    %end;
15741 +    *** OUTPUT ****************************************************************;
15743 +    %if %sysfunc(exist(_save_output_temp)) %then %do;
15745 +        %EM_GETNAME(key=SAVEOUT, type=DATA);
15747 +        *** SAVE OUTPUT DATA TO PROJECT;
15749 +        data &EM_USER_SAVEOUT;
15750 +            set _save_output_temp;
15751 +            label
15752 +                nobs="%sysfunc(sasmsg(sashelp.dmine, save_numobs_vlabel, NOQUOTE))"
15753 +                outnobs="%sysfunc(sasmsg(sashelp.dmine, save_numoutobs_vlabel, NOQUOTE))"
15754 +                vars="%sysfunc(sasmsg(sashelp.dmine, rpt_varcount_vlabel, NOQUOTE))"
15755 +                name="%sysfunc(sasmsg(sashelp.dmine, save_location_vlabel, NOQUOTE))"
15756 +                %if ("&EM_PROPERTY_TYPE"= "SAS7BDAT") %then %do;
15757 +                    lib= "%sysfunc(sasmsg(sashelp.dmine, rpt_datalib_vlabel, NOQUOTE))"
15758 +                %end;
15759 +                ;
15760 +        run;
15762 +        *** PRINT TO OUTPUT;
15764 +        title "%sysfunc(sasmsg(sashelp.dmine, save_results_title, NOQUOTE))";
15765 +        proc print data=&EM_USER_SAVEOUT label noobs; run;
15766 +        %EM_REPORT(key=SAVEOUT, viewtype=DATA, autodisplay=Y);
15767 +        title;
15769 +    %end;
15771 +    *** SAVE FORMATS **********************************************************;
15773 +    *** CHECK REPLACE CONSTRAINT FOR FORMATS;
15775 +    %if ((%sysfunc(cexist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._FORMATS)) and
15776 +        "&EM_PROPERTY_TYPE"="SAS7BDAT") and
15777 +        ("&EM_PROPERTY_REPLACE"="N"))
15778 +            %then %do;
15779 +                %put &EM_CODEBAR;
15780 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
15781 +                %put &WARNING;
15782 +                %put &EM_CODEBAR;
15783 +                %goto quit;
15784 +            %end;
15786 +    %if ((%sysfunc(fileexist(&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt)) and
15787 +        "&EM_PROPERTY_TYPE" ne "SAS7BDAT") and
15788 +        ("&EM_PROPERTY_REPLACE"="N"))
15789 +           %then %do;
15790 +                %put &EM_CODEBAR;
15791 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
15792 +                %put &WARNING;
15793 +                %put &EM_CODEBAR;
15794 +                %goto quit;
15795 +            %end;
15797 +    *** WRITE FORMAT CATALOGS OR TRANSPORT FILE TO ACCOMPANY SAVED DATA;
15798 +    *** CONTINGENT ON FORMATS EXISTING;
15799 +    *** PARSE NODE VARIABLE SET FOR FORMATS;
15801 +    %let _FORMAT_FLAG = 0;
15802 +    data _formats;
15803 +        length format $32; /* AVOID MERGE VARIABLE LENGTH WARNING */
15804 +        set &EM_DATA_VARIABLESET(keep=format where=(format ne '')) end=eof;
15805 +        format = tranwrd(format, '.', '');
15806 +        if indexc(format, '$') then fmttype = 'C';
15807 +        else fmttype = 'N';
15808 +        if eof then call symput('_FORMAT_FLAG',strip(put(1,1.)));
15809 +    run;
15810 +    %if (&_FORMAT_FLAG) %then %EM_SAVEXT_CATALOG(_formats);
15811 +    proc delete data=_formats; run;
15813 +    *** HOUSEKEEPING **********************************************************;
15815 +    %quit:
15817 +    %if ^(%sysfunc(libref(_em_save))) %then %do;
15818 +        libname &EM_PROPERTY_LIB clear;
15819 +    %end;
15821 +    %if (%sysfunc(exist(_save_output_temp))) %then %do;
15822 +        proc delete data=_save_output_temp; run;
15823 +    %end;
15825 +%mend EM_SAVEXT_TRAIN;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref _TRAIN has been deassigned.
NOTE: %INCLUDE (level 1) file _SAVUTIL is file SASHELP.EMUTIL.SAVEXT_MACROS.SOURCE.
15826 +*** UTILITY MACROS FOR EMSAVE NODE ********************************************;
15828 +*** FUNCTIONALITY TO SAVE SAS DATA SETS ***************************************;
15829 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15831 +%macro EM_SAVEXT_SAS(_SAVE_ROLE, _SAVE_SET);
15833 +    *** CHECK SAS SET NAME LENGTH;
15835 +    %if %symexist(EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
15836 +        %if ("&EM_SAVEXT_SAS_NAME_LENGTH"="") %then %let EM_SAVEXT_SAS_NAME_LENGTH=30;
15837 +    %end;
15838 +    %else %let EM_SAVEXT_SAS_NAME_LENGTH=30;                                /* 30 FOR OUTSIDE VENDOR LIBS */
15840 +    %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
15841 +        %put &EM_CODEBAR;
15842 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_namelengthsas_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
15843 +        %put &WARNING;
15844 +        %put &EM_CODEBAR;
15845 +        *** REVERTING TO DEFAULT NAME;
15846 +        %let EM_PROPERTY_NAME = em_save;
15847 +    %end;
15849 +    *** CHECK REPLACE CONSTRAINT FOR DATA SET;
15851 +    %if (%sysfunc(exist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE)) and
15852 +        ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15853 +        %put &EM_CODEBAR;
15854 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
15855 +        %put &WARNING;
15856 +        %put &EM_CODEBAR;
15857 +        %goto quit;
15858 +    %end;
15860 +    *** WRITE SAVED DATA SET;
15862 +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;
15864 +    data &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
15865 +        set &_SAVE_SET (obs=&EM_PROPERTY_OUTOBS);
15866 +        keep %EM_SAVEXT_VARS;
15867 +    run;
15869 +    *** WRITE RESULTS *********************************************************;
15870 +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
15872 +    %let _dsid=%sysfunc(open(&_SAVE_SET));
15873 +    %if &_dsid %then %do;
15874 +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
15875 +        %let _rc=%sysfunc(close(&_dsid));
15876 +        %if %eval(&_SAVE_NOBS < 0) %then %do;
15877 +            proc sql noprint;
15878 +                select count(*) into: _SAVE_NOBS
15879 +                from &_SAVE_SET;
15880 +            ;
15881 +            quit;
15882 +        %end;
15883 +    %end;
15884 +    %else %do;
15885 +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
15886 +        %put &EM_CODEBAR;
15887 +        %let ERROR2 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
15888 +        %put &ERROR2;
15889 +        %put &EM_CODEBAR;
15890 +        %goto quit;
15891 +    %end;
15893 +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
15894 +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
15895 +    %end;
15897 +    data _save_output_temp_record;
15898 +        length lib $20 name $255 nobs $20 outnobs $20 vars $20;
15899 +        vars=left("&EM_NUM_SAVEXT_VARS");
15900 +        outnobs=left("&EM_PROPERTY_OUTOBS");
15901 +        nobs=left("&_SAVE_NOBS");
15902 +        lib= left("&EM_PROPERTY_LIB");
15903 +        name=left("%sysfunc(pathname(&EM_PROPERTY_LIB))&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE)");
15904 +    run;
15906 +    proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
15907 +    proc delete data=_save_output_temp_record; run;
15909 +    *** HOUSEKEEPING **********************************************************;
15911 +    %quit:
15913 +    %if %symexist(_SAVE_NOBS) %then %do;
15914 +        data _null_;
15915 +            call symdel('_SAVE_NOBS', 'NOWARN');
15916 +        run;
15917 +    %end;
15919 +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
15920 +        data _null_;
15921 +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
15922 +        run;
15923 +    %end;
15925 +%mend EM_SAVEXT_SAS;
15927 +*** FUNCTIONALITY TO SAVE NON-SAS FORMATS *************************************;
15928 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15930 +%macro EM_SAVEXT_PXPT(_SAVE_ROLE, _SAVE_SET);
15932 +    *** ACCOUNT FOR DEFAULT DIR;
15934 +    %if ("&EM_PROPERTY_DIRECTORYSELECTOR" = "") %then %let EM_PROPERTY_DIRECTORYSELECTOR = %nrbquote(&EM_NODEDIR);
15936 +    *** CHECK JMP NAME LENGTH;
15938 +    %if %symexist(EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
15939 +        %if ("&EM_SAVEXT_JMP_NAME_LENGTH"= "") %then %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
15940 +    %end;
15941 +    %else %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
15943 +    %if ("&EM_PROPERTY_TYPE"="JMP") %then %do;
15944 +        %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
15945 +            %put &EM_CODEBAR;
15946 +            %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_namelengthjmp_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
15947 +            %put &WARNING;
15948 +            %put &EM_CODEBAR;
15949 +            *** REVERTING TO DEFAULT NAME;
15950 +            %let EM_PROPERTY_NAME = em_save;
15951 +        %end;
15952 +    %end;
15954 +    *** ESTABLISH FULL SAVE FILE NAME FOR USE BELOW;
15956 +    %let _OUT_FILE_NAME=&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE);
15958 +    *** CHECK REPLACE CONSTRAINT;
15960 +    %if (%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15961 +        %put &EM_CODEBAR;
15962 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &_OUT_FILE_NAME));
15963 +        %put &WARNING;
15964 +        %put &EM_CODEBAR;
15965 +        %goto quit;
15966 +    %end;
15967 +    %else %if (^%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15968 +        %let _REPLACE= ;
15969 +    %end;
15970 +    %else %do;
15971 +        %let _REPLACE=replace;
15972 +    %end;
15974 +    *** EXCEL 2010 LIMITATIONS;
15975 +    *** CAN BE OVERRIDDEN BY STARTUP CODE;
15977 +    %if %symexist(_EXCEL_MAX_ROWS) %then %do;
15978 +        %if ("&_EXCEL_MAX_ROWS"= "") %then %let _EXCEL_MAX_ROWS= 1048575;
15979 +    %end;
15980 +    %else %let _EXCEL_MAX_ROWS= 1048575;
15982 +    %if %symexist(_EXCEL_MAX_COLS) %then %do;
15983 +        %if ("&_EXCEL_MAX_COLS"="") %then %let _EXCEL_MAX_COLS= 16384;
15984 +    %end;
15985 +    %else %let _EXCEL_MAX_COLS=16384;
15987 +    *** GET INFO FOR EXCEL FILE SIZE LIMITATIONS AND OUTPUT;
15989 +    %let _dsid=%sysfunc(open(&_SAVE_SET));
15990 +    %if &_dsid %then %do;
15991 +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
15992 +        %let _rc=%sysfunc(close(&_dsid));
15993 +        %if %eval(&_SAVE_NOBS < 0) %then %do;
15994 +            proc sql noprint;
15995 +                select count(*) into: _SAVE_NOBS
15996 +                from &_SAVE_SET;
15997 +                ;
15998 +            quit;
15999 +        %end;
16000 +    %end;
16001 +    %else %do;
16002 +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&_SAVE_SET;
16003 +        %put &EM_CODEBAR;
16004 +        %let ERROR3 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &_SAVE_SET));
16005 +        %put &ERROR3;
16006 +        %put &EM_CODEBAR;
16007 +        %goto quit;
16008 +    %end;
16010 +    *** CHECK EXCEL FILE SIZE;
16012 +    %if ("&EM_PROPERTY_TYPE"="XLSX") and (%eval(&_SAVE_NOBS > &_EXCEL_MAX_ROWS) or %eval(&EM_NUM_SAVEXT_VARS > &_EXCEL_MAX_COLS)) %then %do;
16013 +        %put &EM_CODEBAR;
16014 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_excel_limit_warn, NOQUOTE, &_SAVE_SET));
16015 +        %put &WARNING;
16016 +        %put &EM_CODEBAR;
16017 +    %end;
16019 +    *** EXECUTE EXPORT ********************************************************;
16020 +    *** VIEW USED TO AVOID EMPTY COLUMNS IN EXPORTED TAB AND CSV FILES ********;
16022 +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;      /* OTHERWISE ONLY EM_PROPERTY_OUTOBS WILL BE WRITTEN */
16024 +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
16025 +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
16026 +    %end;
16028 +    %if ("&EM_PROPERTY_TYPE"="TXT" or "&EM_PROPERTY_TYPE"="CSV") %then %do;
16030 +        *** SPECIAL CONDITION FOR TAB PROPERTY;
16032 +        %if ("&EM_PROPERTY_TYPE"="TXT") %then %let EM_PROPERTY_TYPE=tab;
16034 +        data _temp_save_view /view=_temp_save_view;
16035 +            set &_SAVE_SET;
16036 +            keep %EM_SAVEXT_VARS;
16037 +        run;
16039 +        %let SYSCC=0;
16040 +        proc export data=_temp_save_view(obs=&EM_PROPERTY_OUTOBS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
16041 +        run;
16042 +        quit;
16044 +    %end;
16045 +    %else %do;
16047 +        %let SYSCC=0;
16048 +        proc export data=&_SAVE_SET(obs=&EM_PROPERTY_OUTOBS keep=%EM_SAVEXT_VARS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
16049 +        run;
16050 +        quit;
16052 +    %end;
16054 +    %if (^&SYSCC=0) %then %do;
16055 +        %let EMEXCEPTIONSTRING=exception.server.IO.CREATE,&_OUT_FILE_NAME;
16056 +        %put &EM_CODEBAR;
16057 +        %let ERROR4 = %sysfunc(sasmsg(sashelp.dmine, IO.CREATE_ERR, NOQUOTE, &_OUT_FILE_NAME));
16058 +        %put &ERROR4;
16059 +        %put &EM_CODEBAR;
16060 +        %goto quit;
16061 +    %end;
16063 +    *** WRITE RESULTS *********************************************************;
16064 +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
16066 +    %if %sysfunc(fileexist(&_OUT_FILE_NAME)) %then %do;
16067 +        data _save_output_temp_record;
16068 +            length name $255 nobs $20 outnobs $20 vars $20;
16069 +            vars=left("&EM_NUM_SAVEXT_VARS");
16070 +            outnobs=left("&EM_PROPERTY_OUTOBS");
16071 +            nobs=left("&_SAVE_NOBS");
16072 +            name=left("&_OUT_FILE_NAME");
16073 +        run;
16074 +        proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
16075 +        proc delete data=_save_output_temp_record; run;
16076 +    %end;
16077 +    %else %do;
16078 +        %let EMEXCEPTIONSTRING=exception.server.IO.CANTREADFILE,&_OUT_FILE_NAME;
16079 +        %put &EM_CODEBAR;
16080 +        %let ERROR5 = %sysfunc(sasmsg(sashelp.dmine, IO.CANTREADFILE_ERR, NOQUOTE, &_OUT_FILE_NAME));
16081 +        %put &ERROR5;
16082 +        %put &EM_CODEBAR;
16083 +        %goto quit;
16084 +    %end;
16086 +    *** HOUSEKEEPING **********************************************************;
16088 +    %quit:
16090 +    %if ("&EM_PROPERTY_TYPE"="tab") %then %let EM_PROPERTY_TYPE=TXT;
16092 +    %if %sysfunc(exist(_temp_save_view, VIEW)) %then %do;
16093 +        proc datasets lib=work memtype=view nolist;
16094 +            delete _temp_save_view;
16095 +        run;
16096 +        quit;
16097 +    %end;
16099 +    %if %symexist(_SAVE_NOBS) %then %do;
16100 +        data _null_;
16101 +            call symdel('_SAVE_NOBS', 'NOWARN');
16102 +        run;
16103 +    %end;
16105 +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
16106 +        data _null_;
16107 +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
16108 +        run;
16109 +    %end;
16111 +%mend EM_SAVEXT_PXPT;
16113 +*** SAVES SAS CATALOGS FOR OUTPUT DATA SETS ***********************************;
16114 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
16116 +%macro EM_SAVEXT_CATALOG(_FORMATS);
16118 +    *** SORT AND REMOVE DUPLICATES;
16120 +    proc sort data=&_FORMATS nodupkey;
16121 +        by format;
16122 +    run;
16123 +    quit;
16125 +    *** RETRIEVE FORMAT LOCATION INFO AND ASSIGNED CATALOGS IN ACTIVE SESSION;
16127 +    proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne ''))
16128 +        out=_formats2(rename=(fmtname=format));
16129 +        by fmtname;
16130 +    run;
16131 +    quit;
16133 +    *** MERGE SAS FORMATS WITH LOCATION;
16135 +    data &_FORMATS;
16136 +        merge &_FORMATS(in=_a) _formats2(in=_b);
16137 +        by format;
16138 +        if _a and _b then output;
16139 +    run;
16141 +    *** IF &_FORMATS IS EMPTY AFTER MERGE THEN NO FORMATS BELONG TO THE SAVED SET;
16143 +    proc contents data=&_FORMATS out=_formats_content_temp noprint; run;
16144 +    data _null_;
16145 +        set _formats_content_temp (obs=1);
16146 +        if nobs > 0 then call symput('_USER_FORMATS_FLAG','1');
16147 +        else call symput('_USER_FORMATS_FLAG','0');
16148 +    run;
16149 +    %if (^&_USER_FORMATS_FLAG) %then %do;
16150 +        %put &EM_CODEBAR;
16151 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
16152 +        %put &WARNING;
16153 +        %put &EM_CODEBAR;
16154 +        %goto quit;
16155 +    %end;
16157 +    *** SAVE FORMATS AS CATALOG OR TRANSPORT FORMAT;
16159 +    proc sort data=&_FORMATS;
16160 +        by libname memname;
16161 +    run;
16162 +    quit;
16164 +    *** WRITING CATALOG IN WORK AVOIDS OVERWRITING SAS CATALOG;
16165 +    *** FOR CASE REPLACE=N, TYPE ne SAS7BDAT;
16167 +    data _null_;
16168 +        set &_FORMATS end=eof;
16169 +        by libname memname;
16170 +        if first.libname or first.memname then do;
16171 +            call execute('proc catalog cat='|| strip(libname)||'.'||strip(memname)||';');
16172 +            call execute('copy out=work.&EM_PROPERTY_NAME._FORMATS et=format ;');
16173 +            call execute('select ');
16174 +        end;
16175 +        if strip(fmttype) eq 'C' then do;
16176 +            call execute(' '||strip(tranwrd(format, '$', ''))||'.formatc');
16177 +        end;
16178 +        else call execute(' '||strip(format)||'.format');
16179 +        if last.libname or last.memname then do;
16180 +            call execute(';');
16181 +            call execute('run;');
16182 +        end;
16183 +        if eof then call execute('quit;');
16184 +    run;
16186 +    %if ("&EM_PROPERTY_TYPE" = "SAS7BDAT") %then %do;
16187 +        proc copy in=work out=&EM_PROPERTY_LIB; select &EM_PROPERTY_NAME._FORMATS; run; quit;
16188 +    %end;
16189 +    %else %do;
16190 +        proc cport cat=work.&EM_PROPERTY_NAME._formats file="&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt"; run;
16191 +    %end;
16193 +    *** HOUSEKEEPING **********************************************************;
16195 +    proc datasets lib=work memtype=catalog nolist;
16196 +        delete &EM_PROPERTY_NAME._FORMATS;
16197 +    run;
16198 +    quit;
16200 +    %quit:
16202 +    proc delete data=_formats_content_temp; run;
16203 +    proc delete data=_formats2; run;
16205 +%mend EM_SAVEXT_CATALOG;
16207 +*** FIND VARIABLES TO KEEP ****************************************************;
16208 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
16210 +%macro EM_SAVEXT_GET_VARS(_SAVE_ROLE, _SAVE_SET);
16212 +    %if("%sysfunc(strip(%upcase(&_SAVE_ROLE)))" ne "TRANSACTION") %then %do;
16214 +        *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
16216 +        proc contents data=&_SAVE_SET out=_input_vars(keep=name) noprint; run;
16217 +        proc sort data=_input_vars; by name; run;
16219 +        *** EXCLUDE REJECTED OR UNUSED VARIABLES;
16221 +        proc sort data=&EM_DATA_VARIABLESET
16222 +            (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
16223 +            by name;
16224 +        run;
16226 +        data _em_savext_vars;
16227 +            merge _input_vars(in=_a) _train_vars(in=_b);
16228 +            by name;
16229 +            keep name;
16230 +            if _a and _b then output;
16231 +        run;
16233 +        *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
16235 +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
16237 +        *** HOUSEKEEPING;
16239 +        proc delete data=_input_vars; run;
16240 +        proc delete data=_train_vars; run;
16241 +        proc delete data=_em_savext_vars; run;
16243 +    %end;
16244 +    %else %do; /* TRANSCATION TABLE VARIABLES ARE NOT LISTED IN THE TRAINING VARIABLE SET */
16246 +        proc contents data=&_SAVE_SET out=_em_savext_vars(keep=name) noprint; run;
16247 +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
16248 +        proc delete data=_em_savext_vars; run;
16250 +    %end;
16252 +%mend EM_SAVEXT_GET_VARS;
16254 +*** CHECKS IF A SET OR VIEW EXISTS ********************************************;
16255 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
16257 +%macro EM_SAVEXT_SET_EXISTS(_DATASET);
16259 +    %if (%sysfunc(exist(&_DATASET)) or
16260 +        %sysfunc(exist(&_DATASET, VIEW))) and
16261 +        "&_DATASET" ne "" %then %do;
16262 +            %let _rc=1;
16263 +    %end;
16264 +    %else %do;
16265 +            %let _rc=0;
16266 +    %end;
16268 +    &_rc.
16270 +%mend EM_SAVEXT_SET_EXISTS;
16272 +*** REGISTERS SETS INTO MACRO VARIABLE ARRAY USED IN SAVING PROCESS ***********;
16273 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
16275 +%macro EM_SAVEXT_REGISTER(_DATASET, _ROLE, _i);
16277 +    _save_set="&_DATASET";
16278 +    _save_role="&_ROLE";
16279 +    _save_set_index=cats('_save_set', strip(put(&_i,1.)));
16280 +    _save_role_index=cats('_save_role', strip(put(&_i,1.)));
16281 +    call symput(_save_set_index, _save_set);
16282 +    call symput(_save_role_index, _save_role);
16284 +%mend EM_SAVEXT_REGISTER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref _SAVUTIL has been deassigned.
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK._INPUT_VARS has 40 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK._INPUT_VARS.
NOTE: The data set WORK._INPUT_VARS has 40 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set EMWS1.EMSAVE_VARIABLESET.
      WHERE (use='Y') or ((use='D') and (role not = 'REJECTED'));
NOTE: The data set WORK._TRAIN_VARS has 40 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 40 observations read from the data set WORK._INPUT_VARS.
NOTE: There were 40 observations read from the data set WORK._TRAIN_VARS.
NOTE: The data set WORK._EM_SAVEXT_VARS has 40 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Dimensione della pagina del catalogo=4096,
      Numero pagine del catalogo=4,
      Data di creazione=martedì 20 ottobre 2020 00:08:27,
      Ultima modifica=martedì 20 ottobre 2020 00:08:27,
      Nome file=C:\Users\MARIAV~1\AppData\Local\Temp\SAS Temporary Files\_TD27312_DESKTOP-NN2L3RB_\emutil.sas7bcat,
      Release di creazione=9.0401M5,
      Host di creazione=X64_10PRO,
      Nome proprietario=DESKTOP-NN2L3RB\Maria Vallarelli,
      Dimensione=             5KB,
      Dimensione (byte)=5120
 
NOTE: 14 records were written to the file MACFILE.
      The minimum record length was 20.
      The maximum record length was 78.
NOTE: There were 40 observations read from the data set WORK._EM_SAVEXT_VARS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
16290 +%macro EM_SAVEXT_VARS;
16291 +"Alimentazione"n "Anno"n "Carrozzeria"n "Cilindrata"n "Cilindri"n
16292 +"Classe_emissioni"n "Colore_esterno"n "Colore_originale"n
16293 +"Consumo_carburante_combinato"n "Consumo_carburante_extraurb"n
16294 +"Consumo_carburante_urbano"n "Emissioni_di_CO2"n "Marca"n "Marce"n "Modello"n
16295 +"Per_neopatentati"n "Peso_a_vuoto"n "Porte"n "Posti_a_sedere"n "Rivestimenti"n
16296 +"Tagliandi_certificati"n "Tipo_di_cambio"n "Tipo_di_unita"n "Tipo_di_veicolo"n
16297 +"Tipo_di_vernice"n "Usato_Garantito"n "Veicolo_per_non_fumatori"n "address"n
16298 +"conditional_on_price"n "country"n "discount"n "id_annuncio"n "link_annuncio"n
16299 +"median"n "price"n "seller"n "target"n "variazione_su_mediana"n "vehicle"n
16300 +"vehicle_user_desc"n
16301 +%mend EM_SAVEXT_VARS;
16302 +%global EM_NUM_SAVEXT_VARS;
16303 +%let EM_NUM_SAVEXT_VARS = 40 ;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref MACFILE has been deassigned.
 
NOTE: Deleting WORK._INPUT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TRAIN_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._EM_SAVEXT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Visualizza EMWS1.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
NOTE: There were 6778 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 6778 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: The data set LIB.TEXT_TRAIN has 6778 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
NOTE: Visualizza EMWS1.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: There were 6778 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The data set WORK._SAVE_OUTPUT_TEMP_RECORD has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Appending WORK._SAVE_OUTPUT_TEMP_RECORD a WORK._SAVE_OUTPUT_TEMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP_RECORD.
NOTE: The data set WORK._SAVE_OUTPUT_TEMP has 1 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._SAVE_OUTPUT_TEMP_RECORD (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP.
NOTE: The data set EMWS1.EMSAVE_SAVEOUT has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.EMSAVE_SAVEOUT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.EMSAVE_VARIABLESET.
      WHERE format not = ' ';
NOTE: The data set WORK._FORMATS has 23 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK._FORMATS.
NOTE: 8 observations with duplicate key values were deleted.
NOTE: The data set WORK._FORMATS has 15 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set SASHELP.VFORMAT.
      WHERE (libname not = ' ') and (memname not = ' ');
NOTE: The data set WORK._FORMATS2 has 9 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.73 seconds
      cpu time            0.32 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK._FORMATS.
NOTE: There were 9 observations read from the data set WORK._FORMATS2.
NOTE: The data set WORK._FORMATS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK._FORMATS_CONTENT_TEMP has 4 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK._FORMATS_CONTENT_TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
WARNING: i cataloghi dei formati non saranno sovrascritti.
*------------------------------------------------------------*
 
NOTE: Deleting WORK._FORMATS_CONTENT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._FORMATS2 (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._FORMATS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._SAVE_OUTPUT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16304
16305  *------------------------------------------------------------*;
16306  * End TRAIN: EMSave;
16307  *------------------------------------------------------------*;
 
16308  *------------------------------------------------------------*;
16309  * Close any missing semi colons;
16310  *------------------------------------------------------------*;
16311  ;
16312  ;
16313  ;
16314  ;
16315  quit;
16316  *------------------------------------------------------------*;
16317  * Close any unbalanced quotes;
16318  *------------------------------------------------------------*;
16319  /*; *"; *'; */
16320  ;
16321  run;
16322  quit;
16323  /* Reset EM Options */
16324  options formchar="|----|+|---+=|-/\<>*";
16325  options nocenter ls=256 ps=10000;
16326  goptions reset=all device=GIF NODISPLAY;
 
16327  proc sort data=WORK.EM_USER_REPORT;
16328  by ID VIEW;
16329  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Log di scoring
Data:               20 ottobre 2020
Ora:                00:08:28
*------------------------------------------------------------*
16431  %let EMEXCEPTIONSTRING=;
16432  *------------------------------------------------------------*;
16433  * SCORE: EMSave;
16434  *------------------------------------------------------------*;
16435  %let EM_ACTION = SCORE;
16436  %let syscc = 0;
16437  *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
16438
16439  %macro EM_SAVEXT_MAIN;
16440
16441     %if %upcase("&EM_ACTION") = "CREATE" %then %do;
16442         filename _create catalog 'sashelp.emutil.savext_create.source';
16443         %include _create;
16444         filename _create;
16445         %EM_SAVEXT_CREATE;
16446     %end;
16447     %else
16448     %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
16449         filename _train catalog 'sashelp.emutil.savext_train.source';
16450         %include _train;
16451         filename _train;
16452         %EM_SAVEXT_TRAIN;
16453     %end;
16454
16455  %mend EM_SAVEXT_MAIN;
16456
16457  %EM_SAVEXT_MAIN;
16458
16459  *------------------------------------------------------------*;
16460  * End SCORE: EMSave;
16461  *------------------------------------------------------------*;
 
16462  *------------------------------------------------------------*;
16463  * EMSave: Scoring DATA data;
16464  *------------------------------------------------------------*;
16465  data EMWS1.EMSave_TRAIN
16466  / view=EMWS1.EMSave_TRAIN
16467  ;
16468  set EMWS1.FIMPORT_train
16469  ;
16470  run;
 
NOTE: DATA STEP view saved on file EMWS1.EMSAVE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Visualizza EMWS1.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
16471  quit;
 
16473  *------------------------------------------------------------*;
16474  * EMSave: Computing metadata for TRAIN data;
16475  *------------------------------------------------------------*;
 
NOTE: Visualizza EMWS1.EMSAVE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: Visualizza EMWS1.EMSAVE_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
*------------------------------------------------------------*
* Log dei report
Data:               20 ottobre 2020
Ora:                00:08:29
*------------------------------------------------------------*
16836  %let EMEXCEPTIONSTRING=;
16837  *------------------------------------------------------------*;
16838  * REPORT: EMSave;
16839  *------------------------------------------------------------*;
16840  %let EM_ACTION = REPORT;
16841  %let syscc = 0;
16842  *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
16843
16844  %macro EM_SAVEXT_MAIN;
16845
16846     %if %upcase("&EM_ACTION") = "CREATE" %then %do;
16847         filename _create catalog 'sashelp.emutil.savext_create.source';
16848         %include _create;
16849         filename _create;
16850         %EM_SAVEXT_CREATE;
16851     %end;
16852     %else
16853     %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
16854         filename _train catalog 'sashelp.emutil.savext_train.source';
16855         %include _train;
16856         filename _train;
16857         %EM_SAVEXT_TRAIN;
16858     %end;
16859
16860  %mend EM_SAVEXT_MAIN;
16861
16862  %EM_SAVEXT_MAIN;
16863
16864  *------------------------------------------------------------*;
16865  * End REPORT: EMSave;
16866  *------------------------------------------------------------*;
 
16867  /* Reset EM Options */
16868  options formchar="|----|+|---+=|-/\<>*";
16869  options nocenter ls=256 ps=10000;
16870  goptions reset=all device=GIF NODISPLAY;
 

*------------------------------------------------------------*
Utente:             Maria Vallarelli
Data:               25 ottobre 2020
Ora:                22:52:22
Sito:                50306432
Piattaforma:            X64_10PRO
Release di maintenance: 9.04.01M5P091317
Versione di EM:          14.3
* 
*------------------------------------------------------------*
* Log di training
Data:               25 ottobre 2020
Ora:                22:52:02
*------------------------------------------------------------*
15207  proc freq data=EMWS1.Tree_VariableSet noprint;
15208  table ROLE*LEVEL/out=WORK.TreeMETA;
15209  run;
 
NOTE: There were 32 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
15210  proc print data=WORK.TreeMETA label noobs;
15211  var ROLE LEVEL COUNT;
15212  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15213  title9 ' ';
15214  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15215  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
15216  title10;
 
15217  %let EMNORLEN = %DMNORLEN;
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN EMWS1 Repl_TRAIN
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN EMWS1 Repl_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15246  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15247  length ORDER $20;
15248  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15249     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15250  set EMWS1.IDS_TARGET10_DM( where=(_TYPE_="TARGET"));
15251  NumLevels=2;
15252  select(upcase(ORDER));
15253  when('DESC') ORDER = 'Descending';
15254  when('ASC') ORDER = 'Ascending';
15255  when('FMTDESC') ORDER = 'Formatted Descending';
15256  when('FMTASC') ORDER = 'Formatted Ascending';
15257  otherwise ORDER = 'Descending';
15258  end;
15259  output;
15260  run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
15261  title9 ' ';
15262  proc print data=WORK.Tree_EVENT noobs label;
15263  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15264  title9 ' ';
15265  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15266  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15267  title10;
 
"Nessuna decisione definita per il target "target10"."
15268  proc print data = EMWS1.Ids_target10_DM noobs label;
15269  var _type_ variable label;
15270  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15271  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15272  title9 ' ';
15273  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15274  run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15275  title10;
 
15276  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15837  *------------------------------------------------------------*;
15838  * Tree: Generation of macros and macro variables;
15839  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15840  *------------------------------------------------------------*;
 
15841  %let EMEXCEPTIONSTRING=;
15842  *------------------------------------------------------------*;
15843  * TRAIN: Tree;
15844  *------------------------------------------------------------*;
15845  %let EM_ACTION = TRAIN;
15846  %let syscc = 0;
15847  %macro main;
15848
15849    %if %upcase(&EM_ACTION) = CREATE %then %do;
15850      filename temp catalog 'sashelp.emmodl.tree_create.source';
15851      %include temp;
15852      filename temp;
15853
15854      %em_tree_create;
15855    %end;
15856
15857     %else
15858     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15859
15860         filename temp catalog 'sashelp.emmodl.tree_train.source';
15861         %include temp;
15862         filename temp;
15863         %em_tree_train;
15864     %end;
15865
15866    %else
15867    %if %upcase(&EM_ACTION) = SCORE %then %do;
15868      filename temp catalog 'sashelp.emmodl.tree_score.source';
15869      %include temp;
15870      filename temp;
15871
15872      %em_tree_score;
15873
15874    %end;
15875
15876    %else
15877    %if %upcase(&EM_ACTION) = REPORT %then %do;
15878
15879         filename temp catalog 'sashelp.emmodl.tree_report.source';
15880         %include temp;
15881         filename temp;
15882
15883         %em_tree_report;
15884     %end;
15885
15886    %else
15887    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15888
15889         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15890         %include temp;
15891         filename temp;
15892         %EM_TREE_OPENTREEVIEWER;
15893
15894     %end;
15895
15896    %else
15897    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15898
15899         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15900         %include temp;
15901         filename temp;
15902         %EM_TREE_CLOSETREEVIEWER;
15903
15904     %end;
15905
15906
15907     %doendm:
15908  %mend main;
15909
15910  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15912 +%macro em_tree_train;
15914 +   %if &EM_IMPORT_DATA eq %then %do;
15915 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15916 +       %put &em_codebar;
15917 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15918 +       %put &errormsg;
15919 +       %put &em_codebar;
15920 +       %goto doendm;
15921 +   %end;
15922 +   %else
15923 +       %let EMEXCEPTIONSTRING =;
15925 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15926 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15927 +        %put &em_codebar;
15928 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15929 +        %put &errormsg;
15930 +        %put &em_codebar;
15931 +        %goto doendm;
15932 +   %end;
15934 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15935 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15936 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15937 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15938 +        %put &em_codebar;
15939 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15940 +        %put &errormsg;
15941 +        %put &em_codebar;
15942 +        %goto doendm;
15943 +   %end;
15945 +   /* Initialize property macro variables */
15946 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15947 +   %include temp;
15948 +   filename temp;
15950 +   %EM_SetProperties;
15952 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15953 +   %EM_GETNAME(key=EMTREE, type=DATA);
15954 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15955 +     /* if import eq Y and no importtable defined, throw an exception */
15956 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15957 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15958 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15959 +         %put &em_codebar;
15960 +         %put &errmsg;
15961 +         %put &em_codebar;
15962 +         %goto doendm;
15963 +      %end;
15964 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15965 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15966 +         %put &em_codebar;
15967 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15968 +         %put &errormsg;
15969 +         %put &em_codebar;
15970 +         %goto doendm;
15971 +      %end;
15972 +      %else %do;
15973 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15974 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15975 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15976 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15977 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15978 +         %let dsid = %sysfunc(close(&dsid));
15979 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15980 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15981 +            %put &em_codebar;
15982 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15983 +            %put &errormsg;
15984 +            %put &em_codebar;
15985 +            %goto doendm;
15986 +         %end;
15987 +      %end;
15988 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15989 +         proc delete data=&EM_USER_EMTREE;
15990 +         run;
15991 +      %end;
15992 +   %end;
15993 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15994 +      proc delete data=&EM_USER_EMTREE;
15995 +      run;
15996 +   %end;
15998 +   /* load tree macros */
15999 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16000 +   %include temp;
16001 +   filename temp;
16003 +   /* data sets */
16004 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16005 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16006 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16008 +   /* files */
16009 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16011 +   /* check actual num of target levels */
16012 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16013 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16014 +                              nLevel=_nTargetLevel );
16015 +      %if &_nTargetLevel  > 2 %then %do;
16016 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16017 +        %put &em_codebar;
16018 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16019 +        %put &errormsg;
16020 +        %put &em_codebar;
16021 +        %goto doendm;
16022 +      %end;
16023 +   %end;
16025 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16026 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16027 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16028 +        %let costflag=0;
16029 +        data _null_;
16030 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16031 +          if eof then call symput("costflag", _N_);
16032 +        run;
16033 +        %if &costflag gt 0 %then %do;
16034 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16035 +          %put &em_codebar;
16036 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16037 +          %put &errormsg;
16038 +          %put &em_codebar;
16039 +          %goto doendm;
16040 +       %end;
16041 +     %end;
16042 +   %end;
16044 +   /* determine if multiple targets will be processed */
16045 +   %let em_tree_multipleTargets=N;
16046 +   %let em_tree_numTarget = 1;
16047 +   %let em_tree_targetVars=;
16049 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16050 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16051 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16052 +         %let em_tree_multipleTargets=N;
16053 +      %end;
16054 +      %else %do;
16055 +         /* create macro array of targets  */
16056 +         data _null_;
16057 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16058 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16059 +           if eof then
16060 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16061 +        run;
16063 +        %if &em_tree_numTarget gt 1 %then %do;
16064 +           %let em_tree_multipleTargets=Y;
16065 +        %end;
16066 +      %end;
16067 +   %end;
16069 +   /* create view of only necessary variable for performance reasons */
16070 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16071 +   data &tempData / view=&tempData;
16072 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16073 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16074 +       %EM_TARGET
16075 +     %end;
16076 +     %else %do;
16077 +       %if &em_tree_numTarget ne 0 %then %do;
16078 +         %do i=1 %to &em_tree_numTarget;
16079 +            &&em_tree_targetVars&i
16080 +         %end;
16081 +       %end;
16082 +     %end;
16083 +     );
16084 +   run;
16086 +   /* run Tree procedure */
16087 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16089 +   /* Check return code and throw exception if error is detected */
16090 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16091 +   %if &syserr %then %do;
16092 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16093 +     %goto doendm;
16094 +   %end;
16096 +   /* add decision score code if multiple targets are processed */
16097 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16098 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16099 +   %end;
16101 +   /* create outfit dataset if multiple score statements have been executed */
16102 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16104 +   /* create English Rules */
16105 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16106 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16107 +       %em_tree_makeEnglishRules;
16109 +       /* English Rules */
16110 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16112 +     %end;
16113 +   filename x;
16115 +   %doendm:
16116 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16117 +%macro EM_SetProperties;
16119 +   /* train properties */
16120 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16121 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16122 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16123 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16162 +   /* properties for interactive sample */
16163 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16168 +   /* report properties */
16169 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16171 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16172 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16173 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16176 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16177 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16178 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16183 +   /* score properties */
16184 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16185 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16187 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16189 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16190 +  %global &nLevel;
16191 +  proc dmdb batch data=&indata
16192 +    classout=_tmp_dmdbout;
16193 +    class &target;
16194 +  run;
16195 +  data _tmp_dmdbout;
16196 +    set _tmp_dmdbout;
16197 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16198 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16199 +  run;
16200 +  data _null_;
16201 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16202 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16203 +    %let dsid = %sysfunc(close(&dsid));
16204 +     call symput("&nLevel", put(&_obs, Best12.));
16205 +  run;
16207 +  proc datasets lib=work nolist;
16208 +     delete _tmp_dmdbout;
16209 +  run;
16210 +  quit;
16211 +%Mend EM_CheckBinaryTargetLevel;
16214 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16216 +  /* determine the number of obs in training data */
16217 +  proc sql;
16218 +    reset noprint;
16219 +    select count(*) into :em_nobs from &indata;
16220 +  quit;
16222 +  /* determine the number of input variables */
16223 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16224 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16226 +  /* retrieve targetEvent from decmeta */
16227 +  %let targetEvent=;
16228 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16229 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16230 +      data _null_;
16231 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16232 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16233 +      run;
16234 +    %end;
16235 +  %end;
16237 +  /* create targetTable if multipleTar eq Y */
16238 +  data temptarget;
16239 +    set &EM_DATA_VARIABLESET;
16240 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16241 +  run;
16243 + /* data sets */
16244 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16245 + %EM_GETNAME(key=EMTREE,        type=DATA);
16246 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16247 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16248 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16249 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16250 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16251 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16252 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16253 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16255 + /* files */
16256 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16257 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16259 + /* turn on pmml if requested */
16260 + %let nnpmml=0;
16261 + %if %symexist(EM_PMML) %then %do;
16262 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16263 +       %let nnpmml=1;
16265 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16266 +   %end;
16267 +%end;
16269 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16271 +%if &nnpmml or &numClassTarget %then %do;
16273 +    /* create dmdb needed for pmml generation */
16274 +    %let tree_maxlevel = 512;
16275 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16276 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16277 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16278 +      %end;
16279 +    %end;
16280 +    %if &tree_maxlevel gt 0 %then %do;
16281 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16282 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16283 +    %end;
16285 +    %let targetOrderString =;
16286 +    %let targetString = ;
16287 +    data _null_;
16288 +       length orderString nameString $10000;
16289 +       retain orderString nameString;
16290 +       set &em_data_variableset end=eof;
16291 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16292 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16293 +       %end;
16294 +       %else %do;
16295 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16296 +       %end;          select(order);
16297 +         when('')        order ='DESC';
16298 +         when('FMTASC')  order='ASCFMT';
16299 +         when('FMTDESC') order='DESFMT';
16300 +         otherwise;
16301 +       end;
16302 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16303 +       nameString = trim(nameString)!!' '!!trim(NAME);
16305 +       if eof then do;
16306 +          call symput('targetOrderString', trim(orderString));
16307 +          call symput('targetString', trim(nameString));
16308 +       end;
16309 +    run;
16311 +    %let arborkluge= "work._treeDMDB";
16313 +    proc dmdb batch data=&indata
16314 +    %if &nnpmml %then %do;
16315 +        PMML
16316 +    %end;
16317 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16319 +      %if &nnpmml %then %do;
16320 +           %if "%EM_ID" ne "" %then %do;
16321 +             id %EM_ID;
16322 +           %end;
16323 +           %if &EM_NUM_CLASS gt 0 %then %do;
16324 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16325 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16326 +                  &targetOrderString;
16327 +           %end;
16328 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16329 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16330 +           %end;
16331 +           target &targetString %EM_INTERVAL_TARGET;
16332 +           %if "%EM_FREQ" ne "" %then %do;
16333 +             freq %EM_FREQ;
16334 +           %end;
16335 +      %end;
16336 +      %else %do;
16337 +         class  &targetOrderString;
16338 +         target &targetString %EM_INTERVAL_TARGET;
16339 +      %end;
16340 +    run;
16341 +    quit;
16343 +    proc datasets lib=work nolist;
16344 +       delete classout varout;
16345 +    run;
16346 +    quit;
16348 + %end;
16351 + /* run Arbor procedure */
16352 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16353 +  proc arbor data=&INDATA
16355 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16356 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16357 +  %end;
16359 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16360 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16361 +  %end;
16363 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16364 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16365 +  %end;
16367 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16368 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16369 +  %end;
16371 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16372 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16373 +  %end;
16375 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16376 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16377 +  %end;
16378 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16379 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16380 +  %end;
16381 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16382 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16383 +  %end;
16385 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16386 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16387 +      alpha = &EM_PROPERTY_SIGLEVEL
16388 +    %end;
16389 +  %end;
16391 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16392 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16393 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16394 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16395 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16397 +        padjust =
16398 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16399 +          &chaid
16400 +        %end;
16401 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16402 +          DEPTH
16403 +        %end;
16404 +      %end;
16405 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16406 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16407 +         pvars = &num_inputs
16408 +      %end;
16409 +    %end;
16410 +  %end;
16411 +  %else %do;
16412 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16413 +         padjust = NONE
16414 +      %end;
16415 +  %end;
16417 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16418 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16419 +    Maxrules = &num_nrules
16420 +  %end;
16422 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16423 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16424 +    Maxsurrs = &num_nsurrs
16425 +  %end;
16427 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16428 +     Missing=&EM_PROPERTY_MISSINGVALUE
16429 +  %end;
16431 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16432 +     USEVARONCE
16433 +  %end;
16435 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16436 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16437 +  %end;
16440 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16441 +    event = "&targetEvent"
16442 +  %end;
16444 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16445 +     DECSEARCH
16446 +  %end;
16448 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16449 +     PRIORSSEARCH
16450 +  %end;
16452 +  %if &arbor_1 ne %then %do;
16453 +    &arbor_1
16454 +  %end;
16456 +  %if &em_arbor ne %then %do;
16457 +     &em_arbor
16458 +  %end;
16459 +  ;
16460 + %end;
16461 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16462 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16463 +       Performance &EM_PROPERTY_PERFORMANCE
16464 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16465 +         nodesize=&EM_PROPERTY_NODESAMPLE
16466 +       %end;
16467 +       ;
16468 +       interact;
16469 + %end;
16470 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16471 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16472 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16473 +    %put &em_codebar;
16474 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16475 +    %put &errormsg;
16476 +    %put &em_codebar;
16477 +    %goto doendm;
16478 +   %end;
16479 +   %else %do;
16480 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16481 +       Performance &EM_PROPERTY_PERFORMANCE
16482 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16483 +         nodesize=&EM_PROPERTY_NODESAMPLE
16484 +       %end;
16485 +       ;
16486 +       interact;
16487 +   %end;
16488 + %end;
16490 + %else %do;
16491 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16492 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16493 +    %put &em_codebar;
16494 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16495 +    %put &errormsg;
16496 +    %put &em_codebar;
16497 +    %goto doendm;
16498 +   %end;
16499 +   %else %do;
16500 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16501 +       Performance &EM_PROPERTY_PERFORMANCE
16502 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16503 +         nodesize=&EM_PROPERTY_NODESAMPLE
16504 +       %end;
16505 +       ;
16506 +        interact;
16507 +   %end;
16508 + %end;
16510 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16511 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16512 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16513 +    %end;
16515 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16516 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16517 +    %end;
16519 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16520 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16521 +    %end;
16523 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16524 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16525 +    %end;
16527 +    %if "%EM_FREQ" ne "" %then %do;
16528 +       freq %EM_FREQ;
16529 +    %end;
16531 +    %if "&multipleTar" eq "Y" %then %do;
16532 +       /* cycle through all target vars in variableset */
16533 +       %let tdsid = %sysfunc(open(temptarget));
16534 +       %if &tdsid %then %do;
16535 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16536 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16537 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16538 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16539 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16540 +             target &var / level = &lvl
16541 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16542 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16543 +             %end;
16544 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16545 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16546 +             %end;
16547 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16548 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16549 +             %end;
16550 +          %end;
16551 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16552 +       %end;
16553 +       useTarget variable = %EM_TARGET;
16554 +    %end;
16555 +    %else %do;
16556 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16557 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16558 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16559 +      %end;
16560 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16561 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16562 +      %end;
16563 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16564 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16565 +      %end;
16566 +    %end;
16568 +    %if "&multipleTar" eq "N" %then %do;
16569 +      &EM_DEC_STATEMENT;
16570 +    %end;
16572 +    Performance &EM_PROPERTY_PERFORMANCE
16573 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16574 +      nodesize=&EM_PROPERTY_NODESAMPLE
16575 +    %end;
16576 +    ;
16578 +    %if "&intFlag" eq "Y" %then %do;
16579 +       INTERACT Largest;
16580 +       Train maxnewdepth=0;
16581 +    %end;
16583 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16584 +         Assess
16585 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16586 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16587 +              %put &em_codebar;
16588 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16589 +              %put &errormsg;
16590 +              %put &em_codebar;
16591 +            %end;
16592 +            %else %do;
16593 +               Validata=&EM_IMPORT_VALIDATE
16594 +            %end;
16595 +         %end;
16596 +         %else %do;
16597 +           NoValidata
16598 +         %end;
16599 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16600 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16601 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16602 +               %if &dsid %then %do;
16603 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16604 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16605 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16606 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16607 +                   %else %do;
16608 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16609 +                      %else %let measure= MISC;
16610 +                   %end;
16611 +                 %end;
16612 +               %end;
16613 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16614 +            %end;
16615 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16616 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16617 +                 %let measure=ASE;
16618 +              %end;
16619 +              %else %do;
16620 +                 %let measure=MISC;
16621 +              %end;
16622 +            %end;
16623 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16624 +              %let measure=ASE;
16625 +            %end;
16626 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16627 +               %let measure = LIFT;
16628 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16629 +               %if &dsid %then %do;
16630 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16631 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16632 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16633 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16634 +                 %end;
16635 +               %end;
16636 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16637 +            %end;
16638 +            measure=&measure
16639 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16640 +               event = "&targetEvent"
16641 +            %end;
16642 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16643 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16644 +            %end;
16645 +         %end;
16646 +         %if "&multipleTar" eq "N" %then %do;
16647 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16648 +               CV
16649 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16650 +                 CVNITer = &EM_PROPERTY_CVNITER
16651 +               %end;
16652 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16653 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16654 +               %end;
16655 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16656 +                 CVSeed = &EM_PROPERTY_CVSEED
16657 +               %end;
16658 +            %end;
16659 +         %end;
16660 +       %end;
16661 +      ;
16663 +      %if "&intFlag" ne "Y" %then %do;
16664 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16665 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16666 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16667 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16669 +          SUBTREE &subtree
16670 +          %if "&subtree" eq "NLEAVES" %then %do;
16671 +            =&EM_PROPERTY_NSUBTREE
16672 +          %end;
16673 +          ;
16674 +        %end;
16676 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16677 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16678 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16679 +          %end;
16680 +       %end;
16681 +      %end;
16682 + %end;
16685 + MakeMacro nleaves = nleaves;
16686 + save
16687 + %if "&EM_USER_EMTREE" ne "" %then %do;
16688 +   MODEL=&EM_USER_EMTREE
16689 + %end;
16690 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16691 +   SEQUENCE=&EM_USER_OUTSEQ
16692 + %end;
16693 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16694 +   IMPORTANCE=&EM_USER_OUTIMPORT
16695 + %end;
16696 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16697 +   NODESTAT=&EM_USER_OUTNODES
16698 + %end;
16699 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16700 +   SUMMARY=&EM_USER_OUTSUMMARY
16701 + %end;
16702 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16703 +   STATSBYNODE=&EM_USER_OUTSTATS
16704 + %end;
16705 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16706 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16707 + %end;
16708 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16709 +   Pathlistnonmissing=&EM_USER_OUTPATH
16710 + %end;
16711 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16712 +   RULES = &EM_USER_OUTRULES
16713 + %end;
16714 + ;
16716 + %if "&intFlag" ne "Y" %then %do;
16718 +   %let lookupString = ;
16719 +   %if ^%symexist(EM_OPTION) %then
16720 +      %let EM_OPTION=;
16722 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16723 +      %let lookupString = LOOKUP=SELECT;
16724 +   %end;
16726 +   %let codetext=;
16727 +   %let norescodetxt=;
16729 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16730 +     %let codetext=&codetext DUMMY;
16731 +     %let norescodetxt=&norescodetxt DUMMY;
16732 +   %end;
16733 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16734 +     %let codetext=&codetext NOLEAFID;
16735 +     %let norescodetxt=&norescodetxt NOLEAFID;
16736 +   %end;
16737 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16738 +     %let norescodetxt=&norescodetxt NOPRED;
16739 +   %end;
16741 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16742 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16744 +   %if &nnpmml %then %do;
16745 +     code pmml;
16746 +   %end;
16748 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16749 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16750 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16751 +   %end;
16752 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16753 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16754 +   %end;
16755 + %end;
16757 + run;
16758 + quit;
16760 + /*%em_checkerror(); */
16761 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16762 +   /* Delete DMDB catalog */
16763 +   proc datasets lib=work nolist;
16764 +       delete _treeDMDB / mt=cat;
16765 +  run;
16766 +  %end;
16768 + %if &nnpmml %then %do;
16769 +    ods pmml close;
16770 + %end;
16772 +  %doendm:
16774 +%mend em_tree_runTreeProcedure;
16776 +%macro em_tree_createFitStats( multipleTar= );
16779 +  /* create targetTable is multipleTar eq Y */
16780 +  data temptarget;
16781 +    set &EM_DATA_VARIABLESET;
16782 +    where ROLE="TARGET";
16783 +  run;
16785 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16786 +   data &EM_USER_EMOUTFIT;
16787 +     length target $32;
16788 +     merge work.fit_train
16789 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16790 +       work.fit_valid
16791 +     %end;
16792 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16793 +       work.fit_test
16794 +     %end;
16795 +     ;
16796 +     %if "&multipleTar" eq "N" %then %do;
16797 +       target="%EM_TARGET";
16798 +     %end;
16799 +     %else %do;
16800 +       target = _TARGET_;
16801 +     %end;
16802 +     drop _NW_ _SUMW_
16803 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16804 +        _VSUMW_
16805 +     %end;
16806 +     ;
16807 +   run;
16809 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16810 +     proc datasets library=work nolist;
16811 +       delete fit_valid;
16812 +     run;
16813 +   %end;
16814 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16815 +     proc datasets library=work nolist;
16816 +       delete fit_test;
16817 +     run;
16818 +   %end;
16820 +%mend em_tree_createFitStats;
16823 +%macro em_tree_makeEnglishRules;
16825 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16826 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16828 +  /* verify that necessary tables exist and if not, skip processing */
16829 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16830 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16831 +    %goto doendm;
16832 +  %end;
16833 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16834 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16835 +    %goto doendm;
16836 +  %end;
16838 +  /* determine length of variable in outpath dataset */
16839 +  %let vlength= ;
16840 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16841 +  %if &dsid ne %then %do;
16842 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16843 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16844 +  %end;
16845 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16847 +  data tempoutpath;
16848 +    length varname $&vlength;
16849 +    retain varname;
16850 +    set &EM_USER_OUTPATH;
16852 +    if ^missing(variable) then varname=variable;
16853 +    else if ^missing(var_name) then varname=var_name;
16854 +    output;
16855 +  run;
16857 +  /* create an array of generated predicted variable names */
16858 +  %let tree_pred_vars = ;
16859 +  %let tree_pred_label = ;
16860 +  %let numpred= 0;
16861 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16863 +    data _null_;
16864 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16865 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16866 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16867 +     if eof then
16868 +       call symput('numpred', strip(put(_N_, BEST.)));
16869 +    run;
16870 +  %end;
16872 +  /* determine if NPRIORS exists in outnodes  */
16873 +  %local nprior_flag;
16874 +  data _null_;
16875 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16876 +    if eof then do;
16877 +      call symput('nprior_flag', strip(put(npriors, best.)));
16878 +    end;
16879 +  run;
16881 +  proc sort data=tempoutpath; by node; run;
16882 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16884 +  data tempoutpath;
16885 +    merge tempoutpath(in=_a) outnodes(keep= node
16886 +    %if "&nprior_flag" ne "." %then %do;
16887 +      NPRIORS
16888 +    %end;
16889 +    %else %do;
16890 +      N
16891 +    %end;
16892 +    %if &numpred gt 0 %then %do;
16893 +      %do i=1 %to &numpred;
16894 +        &&tree_pred_vars&i
16895 +      %end;
16896 +    %end;
16897 +    );
16898 +    by node;
16899 +    if _a;
16900 +  run;
16902 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16904 +  data _null_;
16905 +    file x;
16906 +    set tempoutpath;
16907 +    by node descending varname;
16908 +    retain origvar oldnode string;
16909 +    length origvar $32 oldnode 8 string $200;
16911 +    if _N_ = 1 then do;
16912 +      origvar = varname;
16913 +      oldnode = node;
16914 +    end;
16916 +    if first.node then do;
16917 +       put "&EM_CODEBAR";
16918 +       put " Node = " node;
16919 +       put "&EM_CODEBAR";
16920 +    end;
16922 +      if first.varname then do;
16923 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16924 +            if MISSING(CHARACTER_VALUE) then do;
16925 +             if NUMERIC_VALUE ne .  then do;
16926 +              if ^first.node then do;
16927 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16928 +              end;
16929 +              else do;
16930 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16931 +              end;
16932 +             end;
16933 +            end;
16934 +            else do;
16935 +              if ^first.node then do;
16936 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16937 +              end;
16938 +              else do;
16939 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16940 +              end;
16941 +             end;
16942 +         end;
16943 +         else if RELATION in ("=") then do;
16944 +            if ^first.node then do;
16945 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16946 +            end;
16947 +            else do;
16948 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16949 +            end;
16950 +         end;
16951 +         else if RELATION in ("ISMISSING") then do;
16952 +            if ^first.node then do;
16953 +              string = " AND "|| strip(varname) || " equals Missing";
16954 +            end;
16955 +            else do;
16956 +              string = "if "|| strip(varname) ||" equals Missing";
16957 +            end;
16958 +         end;
16959 +         else if RELATION in ("ISNOTMISSING") then do;
16960 +            if ^first.node then do;
16961 +              string = " AND "|| strip(varname) || " equals All Values";
16962 +            end;
16963 +            else do;
16964 +              string = "if "|| strip(varname) ||" equals All Values";
16965 +            end;
16966 +         end;
16967 +         if ^missing(varname) then origvar = varname;
16968 +         oldnode=node;
16970 +      end;
16971 +      else do;
16972 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16973 +          if MISSING(CHARACTER_VALUE) then do;
16974 +           if  NUMERIC_VALUE ne .  then do;
16975 +            if ^MISSING(string) then
16976 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16977 +            else
16978 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16979 +           end;
16980 +          end;
16981 +          else do;
16982 +            if ^MISSING(string) then
16983 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16984 +            else
16985 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16986 +          end;
16988 +         end;
16989 +         else if RELATION in ("=") then do;
16990 +           string = strip(string)||", "||strip(character_value);
16991 +         end;
16992 +         else if RELATION in ("ISMISSING") then do;
16994 +         end;
16995 +         if ^missing(varname) then origvar = varname;
16996 +         oldnode=node;
16997 +      end;
16998 +      if last.varname then do;
16999 +         if RELATION in ("ISMISSING") then do;
17000 +           if ^first.varname then do;
17001 +             string = strip(string) || " or MISSING";
17002 +           end;
17003 +         end;
17004 +         put string;
17005 +         if ^missing(varname) then origvar = varname;
17006 +         oldnode=node;
17007 +      end;
17009 +      if last.node then do;
17010 +         put "then ";
17011 +         put " Tree Node Identifier   = " node;
17013 +         %if "&nprior_flag" ne "." %then %do;
17014 +           put " Number of Observations = " NPRIORS;
17015 +         %end;
17016 +         %else %do;
17017 +           put " Number of Observations = " N;
17018 +         %end;
17020 +         %if &numpred gt 0 %then %do;
17021 +           %do i=1 %to &numpred;
17022 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17023 +           %end;
17024 +         %end;
17026 +         put " ";
17027 +         if ^missing(varname) then origvar = varname;
17028 +         oldnode=node;
17029 +      end;
17031 +  run;
17033 +  proc datasets lib=work nolist;
17034 +    delete tempoutpath outnodes;
17035 +  run;
17037 +  %doendm:
17038 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Records processed = 4743   Memory used = 511K.
NOTE: Visualizza EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.12 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Visualizza EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.09 seconds
 
 
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.12 seconds
 
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.23 seconds
      cpu time            0.18 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 4743   Memory used = 511K.
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.17 seconds
 
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.28 seconds
      cpu time            0.20 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
NOTE: Visualizza EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           2.48 seconds
      cpu time            1.20 seconds
 
NOTE: 1491183 kilobytes of physical memory.
NOTE: Will use 4743 out of 4743 training cases.
NOTE: Using memory pool with 251824128 bytes.
NOTE: Passed training data 20 times.
NOTE: Training used 2826672 bytes of work memory.
NOTE: There were 2035 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The subtree sequence contains 60 subtrees. The largest has 119 nodes and 60 leaves.
NOTE: Using subtree with 107 nodes and 54 leaves.
NOTE: Using subtree with 107 nodes and 54 leaves.
NOTE: Created macro variable NLEAVES equal to 54.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 23 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 4485 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 107 observations and 24 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 729 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 1996 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 60 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 749 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 107 observations and 5 variables.
NOTE: External file C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: Visualizza EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.15 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Visualizza EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: There were 2035 observations read from the data set EMWS1.PART_VALIDATE.
 
 
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.EM_TREE.VIEW used (Total process time):
      real time           3.76 seconds
      cpu time            1.84 seconds
 
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           3.87 seconds
      cpu time            1.90 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 729 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 729 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 729 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 729 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 107 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 107 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 729 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 107 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 729 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 729 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 729 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,Dimensione (byte)=0,
      Ultima modifica=25 ottobre 2020 22:52:11,
      Create Time=25 ottobre 2020 22:52:11
 
NOTE: 636 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 200.
NOTE: There were 729 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.07 seconds
 
 
NOTE: Fileref X has been deassigned.
17040
17041  *------------------------------------------------------------*;
17042  * End TRAIN: Tree;
17043  *------------------------------------------------------------*;
 
17044  *------------------------------------------------------------*;
17045  * Close any missing semi colons;
17046  *------------------------------------------------------------*;
17047  ;
17048  ;
17049  ;
17050  ;
17051  quit;
17052  *------------------------------------------------------------*;
17053  * Close any unbalanced quotes;
17054  *------------------------------------------------------------*;
17055  /*; *"; *'; */
17056  ;
17057  run;
17058  quit;
17059  /* Reset EM Options */
17060  options formchar="|----|+|---+=|-/\<>*";
17061  options nocenter ls=256 ps=10000;
17062  goptions reset=all device=GIF NODISPLAY;
 
17063  proc sort data=WORK.EM_USER_REPORT;
17064  by ID VIEW;
17065  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Log di scoring
Data:               25 ottobre 2020
Ora:                22:52:12
*------------------------------------------------------------*
17167  %let EMEXCEPTIONSTRING=;
17168  *------------------------------------------------------------*;
17169  * SCORE: Tree;
17170  *------------------------------------------------------------*;
17171  %let EM_ACTION = SCORE;
17172  %let syscc = 0;
17173  %macro main;
17174
17175    %if %upcase(&EM_ACTION) = CREATE %then %do;
17176      filename temp catalog 'sashelp.emmodl.tree_create.source';
17177      %include temp;
17178      filename temp;
17179
17180      %em_tree_create;
17181    %end;
17182
17183     %else
17184     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17185
17186         filename temp catalog 'sashelp.emmodl.tree_train.source';
17187         %include temp;
17188         filename temp;
17189         %em_tree_train;
17190     %end;
17191
17192    %else
17193    %if %upcase(&EM_ACTION) = SCORE %then %do;
17194      filename temp catalog 'sashelp.emmodl.tree_score.source';
17195      %include temp;
17196      filename temp;
17197
17198      %em_tree_score;
17199
17200    %end;
17201
17202    %else
17203    %if %upcase(&EM_ACTION) = REPORT %then %do;
17204
17205         filename temp catalog 'sashelp.emmodl.tree_report.source';
17206         %include temp;
17207         filename temp;
17208
17209         %em_tree_report;
17210     %end;
17211
17212    %else
17213    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17214
17215         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17216         %include temp;
17217         filename temp;
17218         %EM_TREE_OPENTREEVIEWER;
17219
17220     %end;
17221
17222    %else
17223    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17224
17225         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17226         %include temp;
17227         filename temp;
17228         %EM_TREE_CLOSETREEVIEWER;
17229
17230     %end;
17231
17232
17233     %doendm:
17234  %mend main;
17235
17236  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17238 +%macro em_tree_score;
17240 +   /* determine if multiple targets will be processed */
17241 +   %let em_tree_multipleTargets=N;
17242 +   %let em_tree_numTarget=1;
17243 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17244 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17245 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17246 +         %let em_tree_multipleTargets=N;
17247 +      %end;
17248 +      %else %do;
17249 +         /* create macro array of targets  */
17250 +         data _null_;
17251 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17252 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17253 +           if eof then
17254 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17255 +        run;
17257 +        %if &em_tree_numTarget gt 1 %then %do;
17258 +           %let em_tree_multipleTargets=Y;
17259 +        %end;
17260 +      %end;
17261 +   %end;
17263 +   /* build flow and publish scoring code */
17264 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17265 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17267 +   filename treeflow "&EM_USER_TREEFLOW";
17268 +   filename treepub "&EM_USER_TREEPUBLISH";
17270 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17271 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17273 +   %em_copyfile(infref=treeflow, outfref=flowref);
17274 +   %em_copyfile(infref=treepub, outfref=pubref);
17276 +   filename treeflow;
17277 +   filename treepub;
17279 +   /* if priors are used, add code to generate unadjusted residuals in export */
17280 +   %let useAdjPriors = N;
17281 +   data _null_;
17282 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17283 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17284 +   run;
17285 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17286 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17287 +      %include temp;
17288 +      filename temp;
17290 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17291 +      filename adjref "&EM_USER_adjResidualCode";
17292 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17294 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17296 +      filename adjref;
17297 +   %end;
17299 +   /* LEAF */
17300 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17301 +      data _null_;
17302 +        file flowref mod;
17303 +        put 'drop _LEAF_;';
17304 +      run;
17306 +      data _null_;
17307 +        file pubref mod;
17308 +        put 'drop _LEAF_;';
17309 +      run;
17311 +   %end;
17313 +   filename flowref;
17314 +   filename pubref;
17316 +   /* em_metachange code */
17317 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17318 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17319 +   %end;
17321 +   /* variable selection based on importance stat    */
17322 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17323 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17324 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17325 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17326 +     %let obs = %sysfunc(fetch(&dsid));
17327 +     %do %while(&obs=0);
17328 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17329 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17330 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17331 +       %let obs = %sysfunc(fetch(&dsid));
17332 +     %end;
17333 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17334 +   %end;
17336 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17337 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17338 +    %let tree_pred_vars = ;
17339 +    %let tree_pred_lvl =;
17340 +    %let numpred= 0;
17342 +    data _null_;
17343 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17344 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17345 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17346 +     if eof then
17347 +       call symput('numpred', strip(put(_N_, BEST.)));
17348 +    run;
17349 +   %end;
17351 +   %if &numpred ne 0 %then %do;
17352 +    %do i=1 %to &numpred;
17353 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17354 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17355 +    %end;
17356 +   %end;
17358 +   /* determine if multiple targets will be processed */
17359 +   %let em_tree_multipleTargets=N;
17360 +   %let em_tree_numTarget=1;
17361 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17362 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17363 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17364 +         %let em_tree_multipleTargets=N;
17365 +      %end;
17366 +      %else %do;
17367 +        data _null_;
17368 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17369 +          if eof then
17370 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17371 +        run;
17373 +        %if &em_tree_numTarget gt 1 %then %do;
17374 +           %let em_tree_multipleTargets=Y;
17375 +        %end;
17376 +     %end;
17377 +   %end;
17379 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17380 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17382 +      /* variable importance */
17383 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17384 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17386 +         %let validexist=0;
17387 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17388 +           %let validexist=1;
17389 +         %end;
17391 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17392 +         /* and the columns may not be generated                                                                                 */
17393 +         %let em_tree_cvexists=;
17394 +         %let em_tree_surrexists=.;
17395 +         data _null_;
17396 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17397 +            if eof then do ;
17398 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17399 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17400 +            end;
17401 +         run;
17403 +         data &EM_USER_OUTIMPORT;
17404 +            set &EM_USER_OUTIMPORT;
17406 +            /* format columns based on Precison value specified */
17407 +            format importance 15.&EM_PROPERTY_PRECISION
17408 +                 %if &validexist %then %do;
17409 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17410 +                 %end;
17411 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17412 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17413 +                 %end;
17414 +            ;
17415 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17416 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17417 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17418 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17419 +                 %if "&em_tree_surrexists" ne "" %then %do;
17420 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17421 +                 %end;
17422 +                 %if &validexist %then %do;
17423 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17424 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17425 +                 %end;
17426 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17427 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17428 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17429 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17430 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17431 +                 %end;
17432 +            ;
17433 +         run;
17435 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17436 +      %end;
17437 +   %end;
17439 +   %doendm:
17440 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,Dimensione (byte)=0,
      Ultima modifica=25 ottobre 2020 22:52:12,
      Create Time=25 ottobre 2020 22:52:12
 
NOTE: 909 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The file PUBREF is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,Dimensione (byte)=0,
      Ultima modifica=25 ottobre 2020 22:52:12,
      Create Time=25 ottobre 2020 22:52:12
 
NOTE: 887 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,Dimensione (byte)=39011,
      Ultima modifica=25 ottobre 2020 22:52:12,
      Create Time=25 ottobre 2020 22:52:12
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,Dimensione (byte)=38366,
      Ultima modifica=25 ottobre 2020 22:52:12,
      Create Time=25 ottobre 2020 22:52:12
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 23 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
17441
17442  *------------------------------------------------------------*;
17443  * End SCORE: Tree;
17444  *------------------------------------------------------------*;
 
17445  proc sort data=WORK.EM_METACHANGE;
17446  by key uname;
17447  run;
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17448  filename x "C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
17449  data _null_;
17450  file x;
17451  put 'if upcase(NAME) = "ALIMENTAZIONE" then do;';
17452  put 'ROLE = "REJECTED";';
17453  put 'end;';
17454  put 'else ';
17455  put 'if upcase(NAME) = "CARROZZERIA" then do;';
17456  put 'ROLE = "REJECTED";';
17457  put 'end;';
17458  put 'else ';
17459  put 'if upcase(NAME) = "CILINDRI" then do;';
17460  put 'ROLE = "REJECTED";';
17461  put 'end;';
17462  put 'else ';
17463  put 'if upcase(NAME) = "CLASSE_EMISSIONI" then do;';
17464  put 'ROLE = "REJECTED";';
17465  put 'end;';
17466  put 'else ';
17467  put 'if upcase(NAME) = "COLORE_ESTERNO" then do;';
17468  put 'ROLE = "REJECTED";';
17469  put 'end;';
17470  put 'else ';
17471  put 'if upcase(NAME) = "CONDITIONAL_ON_PRICE" then do;';
17472  put 'ROLE = "REJECTED";';
17473  put 'end;';
17474  put 'else ';
17475  put 'if upcase(NAME) = "MARCE" then do;';
17476  put 'ROLE = "REJECTED";';
17477  put 'end;';
17478  put 'else ';
17479  put 'if upcase(NAME) = "PER_NEOPATENTATI" then do;';
17480  put 'ROLE = "REJECTED";';
17481  put 'end;';
17482  put 'else ';
17483  put 'if upcase(NAME) = "PORTE" then do;';
17484  put 'ROLE = "REJECTED";';
17485  put 'end;';
17486  put 'else ';
17487  put 'if upcase(NAME) = "POSTI_A_SEDERE" then do;';
17488  put 'ROLE = "REJECTED";';
17489  put 'end;';
17490  put 'else ';
17491  put 'if upcase(NAME) = "Q_TARGET100" then do;';
17492  put 'ROLE = "ASSESS";';
17493  put 'end;';
17494  put 'else ';
17495  put 'if upcase(NAME) = "Q_TARGET101" then do;';
17496  put 'ROLE = "ASSESS";';
17497  put 'end;';
17498  put 'else ';
17499  put 'if upcase(NAME) = "REP_ANNO" then do;';
17500  put 'ROLE = "REJECTED";';
17501  put 'end;';
17502  put 'else ';
17503  put 'if upcase(NAME) = "REP_TIPO_DI_VERNICE" then do;';
17504  put 'ROLE = "REJECTED";';
17505  put 'end;';
17506  put 'else ';
17507  put 'if upcase(NAME) = "TAGLIANDI_CERTIFICATI" then do;';
17508  put 'ROLE = "REJECTED";';
17509  put 'end;';
17510  put 'else ';
17511  put 'if upcase(NAME) = "TIPO_DI_CAMBIO" then do;';
17512  put 'ROLE = "REJECTED";';
17513  put 'end;';
17514  put 'else ';
17515  put 'if upcase(NAME) = "USATO_GARANTITO" then do;';
17516  put 'ROLE = "REJECTED";';
17517  put 'end;';
17518  put 'else ';
17519  put 'if upcase(NAME) = "VEICOLO_PER_NON_FUMATORI" then do;';
17520  put 'ROLE = "REJECTED";';
17521  put 'end;';
17522  put 'else ';
17523  put 'if upcase(NAME) = "_NODE_" then do;';
17524  put 'ROLE = "SEGMENT";';
17525  put 'LEVEL = "NOMINAL";';
17526  put 'end;';
17527  run;
 
NOTE: The file X is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,Dimensione (byte)=0,
      Ultima modifica=25 ottobre 2020 22:52:12,
      Create Time=21 ottobre 2020 23:32:37
 
NOTE: 76 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17528  filename x;
NOTE: Fileref X has been deassigned.
 
17529  filename emflow "C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17530  *------------------------------------------------------------*;
17531  * Tree: Scoring DATA data;
17532  *------------------------------------------------------------*;
17533  data EMWS1.Tree_TRAIN
17534  / view=EMWS1.Tree_TRAIN
17535  ;
17536  set EMWS1.Repl_TRAIN
17537  ;
17538  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17539 +****************************************************************;
17540 +******             DECISION TREE SCORING CODE             ******;
17541 +****************************************************************;
17542 +
17543 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17544 +LENGTH F_target10  $   12;
17545 +LENGTH I_target10  $   12;
17546 +LENGTH _WARN_  $    4;
17547 +
17548 +******              LABELS FOR NEW VARIABLES              ******;
17549 +label _NODE_ = 'Nodo' ;
17550 +label _LEAF_ = 'Foglia' ;
17551 +label P_target101 = 'Previsto: target10=1' ;
17552 +label P_target100 = 'Previsto: target10=0' ;
17553 +label Q_target101 = 'P non corretto: target10=1' ;
17554 +label Q_target100 = 'P non corretto: target10=0' ;
17555 +label V_target101 = 'Convalidato: target10=1' ;
17556 +label V_target100 = 'Convalidato: target10=0' ;
17557 +label R_target101 = 'Residuo: target10=1' ;
17558 +label R_target100 = 'Residuo: target10=0' ;
17559 +label F_target10 = 'Da: target10' ;
17560 +label I_target10 = 'In: target10' ;
17561 +label U_target10 = 'Non normalizzata in: target10' ;
17562 +label _WARN_ = 'Avvertimenti' ;
17563 +
17564 +
17565 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17566 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17567 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17568 +LENGTH _ARBFMT_20 $     20; DROP _ARBFMT_20;
17569 +_ARBFMT_20 = ' '; /* Initialize to avoid warning. */
17570 +LENGTH _ARBFMT_10 $     10; DROP _ARBFMT_10;
17571 +_ARBFMT_10 = ' '; /* Initialize to avoid warning. */
17572 +LENGTH _ARBFMT_17 $     17; DROP _ARBFMT_17;
17573 +_ARBFMT_17 = ' '; /* Initialize to avoid warning. */
17574 +
17575 +
17576 +_ARBFMT_12 = PUT( target10 , BEST.);
17577 + %DMNORMCP( _ARBFMT_12, F_target10 );
17578 +
17579 +******             ASSIGN OBSERVATION TO NODE             ******;
17580 +_ARBFMT_20 = PUT( Modello , $20.);
17581 + %DMNORMIP( _ARBFMT_20);
17582 +IF _ARBFMT_20 IN ('FORTWO' ,'Q3' ,'KONA' ,'A4' ,'COOPER' ,'NIRO' ,'CAPTUR' ,
17583 +  'TIVOLI' ,'RENEGADE' ,'COMPASS' ,'GRANDLAND X' ,'OUTLANDER' ,'TIPO' ,
17584 +  'CLIO' ,'GIULIETTA' ,'500C' ,'Q5' ,'NX 300' ,'3008' ,'PASSAT VARIANT' ,
17585 +  '508' ,'520' ,'A6' ,'LEON' ,'COROLLA' ,'CAYENNE' ,'GOLF' ,'A5' ,'A3' ,
17586 +  'POLO' ,'STELVIO' ,'KADJAR' ,'WRANGLER' ,'Q2' ,'OCTAVIA' ,'TALISMAN' ,
17587 +  'ASTRA' ,'GOLF VARIANT' ,'318' ,'GIULIA' ,'E-PACE' ,'GRAND C4 SPACETOURER' ,
17588 +  'SCENIC' ,'DOBLO' ,'CADDY' ,'218' ,'TOURAN' ,'FIORINO' ,'A4 ALLROAD' ,
17589 +  'ESPACE' ) THEN DO;
17590 +  IF  NOT MISSING(REP_price ) AND
17591 +                   42550 <= REP_price  THEN DO;
17592 +    _ARBFMT_20 = PUT( Modello , $20.);
17593 +     %DMNORMIP( _ARBFMT_20);
17594 +    IF _ARBFMT_20 IN ('Q5' ,'520' ,'A6' ,'CAYENNE' ,'WRANGLER' ) THEN DO;
17595 +      IF  NOT MISSING(REP_price ) AND
17596 +                       50740 <= REP_price  THEN DO;
17597 +        _NODE_  =                   23;
17598 +        _LEAF_  =                   29;
17599 +        P_target101  =                 0.45;
17600 +        P_target100  =                 0.55;
17601 +        Q_target101  =                 0.45;
17602 +        Q_target100  =                 0.55;
17603 +        V_target101  =     0.57142857142857;
17604 +        V_target100  =     0.42857142857142;
17605 +        I_target10  = '0' ;
17606 +        U_target10  =                    0;
17607 +        END;
17608 +      ELSE DO;
17609 +        _NODE_  =                   22;
17610 +        _LEAF_  =                   28;
17611 +        P_target101  =                    1;
17612 +        P_target100  =                    0;
17613 +        Q_target101  =                    1;
17614 +        Q_target100  =                    0;
17615 +        V_target101  =     0.88888888888888;
17616 +        V_target100  =     0.11111111111111;
17617 +        I_target10  = '1' ;
17618 +        U_target10  =                    1;
17619 +        END;
17620 +      END;
17621 +    ELSE DO;
17622 +      IF  NOT MISSING(REP_price ) AND
17623 +        REP_price  <                45200 THEN DO;
17624 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
17625 +          REP_Emissioni_di_CO2  <                  133 THEN DO;
17626 +          _NODE_  =                   38;
17627 +          _LEAF_  =                   23;
17628 +          P_target101  =     0.07692307692307;
17629 +          P_target100  =     0.92307692307692;
17630 +          Q_target101  =     0.07692307692307;
17631 +          Q_target100  =     0.92307692307692;
17632 +          V_target101  =     0.11111111111111;
17633 +          V_target100  =     0.88888888888888;
17634 +          I_target10  = '0' ;
17635 +          U_target10  =                    0;
17636 +          END;
17637 +        ELSE DO;
17638 +          _ARBFMT_20 = PUT( Modello , $20.);
17639 +           %DMNORMIP( _ARBFMT_20);
17640 +          IF _ARBFMT_20 IN ('STELVIO' ) THEN DO;
17641 +            _NODE_  =                   64;
17642 +            _LEAF_  =                   24;
17643 +            P_target101  =                    1;
17644 +            P_target100  =                    0;
17645 +            Q_target101  =                    1;
17646 +            Q_target100  =                    0;
17647 +            V_target101  =                    1;
17648 +            V_target100  =                    0;
17649 +            I_target10  = '1' ;
17650 +            U_target10  =                    1;
17651 +            END;
17652 +          ELSE DO;
17653 +            _NODE_  =                   65;
17654 +            _LEAF_  =                   25;
17655 +            P_target101  =                  0.5;
17656 +            P_target100  =                  0.5;
17657 +            Q_target101  =                  0.5;
17658 +            Q_target100  =                  0.5;
17659 +            V_target101  =                    0;
17660 +            V_target100  =                    1;
17661 +            I_target10  = '1' ;
17662 +            U_target10  =                    1;
17663 +            END;
17664 +          END;
17665 +        END;
17666 +      ELSE DO;
17667 +        _ARBFMT_12 = PUT( Posti_a_sedere , BEST12.);
17668 +         %DMNORMIP( _ARBFMT_12);
17669 +        IF _ARBFMT_12 IN ('4' ) THEN DO;
17670 +          _NODE_  =                   40;
17671 +          _LEAF_  =                   26;
17672 +          P_target101  =                  0.4;
17673 +          P_target100  =                  0.6;
17674 +          Q_target101  =                  0.4;
17675 +          Q_target100  =                  0.6;
17676 +          V_target101  =                    1;
17677 +          V_target100  =                    0;
17678 +          I_target10  = '0' ;
17679 +          U_target10  =                    0;
17680 +          END;
17681 +        ELSE DO;
17682 +          _NODE_  =                   41;
17683 +          _LEAF_  =                   27;
17684 +          P_target101  =     0.01408450704225;
17685 +          P_target100  =     0.98591549295774;
17686 +          Q_target101  =     0.01408450704225;
17687 +          Q_target100  =     0.98591549295774;
17688 +          V_target101  =     0.03448275862068;
17689 +          V_target100  =     0.96551724137931;
17690 +          I_target10  = '0' ;
17691 +          U_target10  =                    0;
17692 +          END;
17693 +        END;
17694 +      END;
17695 +    END;
17696 +  ELSE DO;
17697 +    _ARBFMT_20 = PUT( Modello , $20.);
17698 +     %DMNORMIP( _ARBFMT_20);
17699 +    IF _ARBFMT_20 IN ('KONA' ,'COOPER' ,'NIRO' ,'TIVOLI' ,'GRANDLAND X' ,
17700 +    'CLIO' ,'COROLLA' ,'A3' ,'POLO' ,'KADJAR' ,'Q2' ,'ASTRA' ,'SCENIC' ,
17701 +    'DOBLO' ,'218' ,'FIORINO' ) THEN DO;
17702 +      IF  NOT MISSING(REP_price ) AND
17703 +        REP_price  <                18450 THEN DO;
17704 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
17705 +                            96 <= REP_Emissioni_di_CO2  THEN DO;
17706 +          _NODE_  =                   35;
17707 +          _LEAF_  =                   12;
17708 +          P_target101  =     0.95238095238095;
17709 +          P_target100  =     0.04761904761904;
17710 +          Q_target101  =     0.95238095238095;
17711 +          Q_target100  =     0.04761904761904;
17712 +          V_target101  =                    1;
17713 +          V_target100  =                    0;
17714 +          I_target10  = '1' ;
17715 +          U_target10  =                    1;
17716 +          END;
17717 +        ELSE DO;
17718 +          IF  NOT MISSING(REP_price ) AND
17719 +                           15770 <= REP_price  THEN DO;
17720 +            _NODE_  =                   59;
17721 +            _LEAF_  =                   11;
17722 +            P_target101  =     0.33333333333333;
17723 +            P_target100  =     0.66666666666666;
17724 +            Q_target101  =     0.33333333333333;
17725 +            Q_target100  =     0.66666666666666;
17726 +            V_target101  =                    0;
17727 +            V_target100  =                    1;
17728 +            I_target10  = '0' ;
17729 +            U_target10  =                    0;
17730 +            END;
17731 +          ELSE DO;
17732 +            _NODE_  =                   58;
17733 +            _LEAF_  =                   10;
17734 +            P_target101  =                    1;
17735 +            P_target100  =                    0;
17736 +            Q_target101  =                    1;
17737 +            Q_target100  =                    0;
17738 +            V_target101  =                    1;
17739 +            V_target100  =                    0;
17740 +            I_target10  = '1' ;
17741 +            U_target10  =                    1;
17742 +            END;
17743 +          END;
17744 +        END;
17745 +      ELSE DO;
17746 +        _ARBFMT_20 = PUT( Modello , $20.);
17747 +         %DMNORMIP( _ARBFMT_20);
17748 +        IF _ARBFMT_20 IN ('TIVOLI' ,'CLIO' ,'POLO' ,'DOBLO' ) THEN DO;
17749 +          IF  NOT MISSING(REP_Consumo_Carburante_Totale ) AND
17750 +                            8.35 <= REP_Consumo_Carburante_Totale  THEN DO;
17751 +            _NODE_  =                   63;
17752 +            _LEAF_  =                   22;
17753 +            P_target101  =                  0.2;
17754 +            P_target100  =                  0.8;
17755 +            Q_target101  =                  0.2;
17756 +            Q_target100  =                  0.8;
17757 +            V_target101  =     0.33333333333333;
17758 +            V_target100  =     0.66666666666666;
17759 +            I_target10  = '0' ;
17760 +            U_target10  =                    0;
17761 +            END;
17762 +          ELSE DO;
17763 +            _NODE_  =                   62;
17764 +            _LEAF_  =                   21;
17765 +            P_target101  =                    0;
17766 +            P_target100  =                    1;
17767 +            Q_target101  =                    0;
17768 +            Q_target100  =                    1;
17769 +            V_target101  =                    0;
17770 +            V_target100  =                    1;
17771 +            I_target10  = '0' ;
17772 +            U_target10  =                    0;
17773 +            END;
17774 +          END;
17775 +        ELSE DO;
17776 +          IF  NOT MISSING(REP_price ) AND
17777 +                           33400 <= REP_price  THEN DO;
17778 +            _NODE_  =                   61;
17779 +            _LEAF_  =                   20;
17780 +            P_target101  =                    0;
17781 +            P_target100  =                    1;
17782 +            Q_target101  =                    0;
17783 +            Q_target100  =                    1;
17784 +            V_target101  =                    0;
17785 +            V_target100  =                    1;
17786 +            I_target10  = '0' ;
17787 +            U_target10  =                    0;
17788 +            END;
17789 +          ELSE DO;
17790 +            _ARBFMT_20 = PUT( Modello , $20.);
17791 +             %DMNORMIP( _ARBFMT_20);
17792 +            IF _ARBFMT_20 IN ('KONA' ,'NIRO' ,'COROLLA' ,'KADJAR' ,'Q2' ,
17793 +            'ASTRA' ,'SCENIC' ,'218' ) THEN DO;
17794 +              IF  NOT MISSING(REP_price ) AND
17795 +                REP_price  <                21995 THEN DO;
17796 +                _ARBFMT_20 = PUT( Modello , $20.);
17797 +                 %DMNORMIP( _ARBFMT_20);
17798 +                IF _ARBFMT_20 IN ('ASTRA' ) THEN DO;
17799 +                  IF  NOT MISSING(REP_price ) AND
17800 +                                   20425 <= REP_price  THEN DO;
17801 +                    _NODE_  =                  117;
17802 +                    _LEAF_  =                   14;
17803 +                    P_target101  =                    0;
17804 +                    P_target100  =                    1;
17805 +                    Q_target101  =                    0;
17806 +                    Q_target100  =                    1;
17807 +                    V_target101  =                    0;
17808 +                    V_target100  =                    1;
17809 +                    I_target10  = '0' ;
17810 +                    U_target10  =                    0;
17811 +                    END;
17812 +                  ELSE DO;
17813 +                    _NODE_  =                  116;
17814 +                    _LEAF_  =                   13;
17815 +                    P_target101  =                    1;
17816 +                    P_target100  =                    0;
17817 +                    Q_target101  =                    1;
17818 +                    Q_target100  =                    0;
17819 +                    V_target101  =                    1;
17820 +                    V_target100  =                    0;
17821 +                    I_target10  = '1' ;
17822 +                    U_target10  =                    1;
17823 +                    END;
17824 +                  END;
17825 +                ELSE DO;
17826 +                  _NODE_  =                  111;
17827 +                  _LEAF_  =                   15;
17828 +                  P_target101  =                    1;
17829 +                  P_target100  =                    0;
17830 +                  Q_target101  =                    1;
17831 +                  Q_target100  =                    0;
17832 +                  V_target101  =                    1;
17833 +                  V_target100  =                    0;
17834 +                  I_target10  = '1' ;
17835 +                  U_target10  =                    1;
17836 +                  END;
17837 +                END;
17838 +              ELSE DO;
17839 +                IF  NOT MISSING(REP_Cilindrata ) AND
17840 +                                1773.5 <= REP_Cilindrata  THEN DO;
17841 +                  IF  NOT MISSING(REP_price ) AND
17842 +                                   30300 <= REP_price  THEN DO;
17843 +                    _NODE_  =                  119;
17844 +                    _LEAF_  =                   18;
17845 +                    P_target101  =                    0;
17846 +                    P_target100  =                    1;
17847 +                    Q_target101  =                    0;
17848 +                    Q_target100  =                    1;
17849 +                    V_target101  =                    0;
17850 +                    V_target100  =                    1;
17851 +                    I_target10  = '0' ;
17852 +                    U_target10  =                    0;
17853 +                    END;
17854 +                  ELSE DO;
17855 +                    _NODE_  =                  118;
17856 +                    _LEAF_  =                   17;
17857 +                    P_target101  =     0.94444444444444;
17858 +                    P_target100  =     0.05555555555555;
17859 +                    Q_target101  =     0.94444444444444;
17860 +                    Q_target100  =     0.05555555555555;
17861 +                    V_target101  =     0.94736842105263;
17862 +                    V_target100  =     0.05263157894736;
17863 +                    I_target10  = '1' ;
17864 +                    U_target10  =                    1;
17865 +                    END;
17866 +                  END;
17867 +                ELSE DO;
17868 +                  _NODE_  =                  112;
17869 +                  _LEAF_  =                   16;
17870 +                  P_target101  =     0.18461538461538;
17871 +                  P_target100  =     0.81538461538461;
17872 +                  Q_target101  =     0.18461538461538;
17873 +                  Q_target100  =     0.81538461538461;
17874 +                  V_target101  =     0.23809523809523;
17875 +                  V_target100  =     0.76190476190476;
17876 +                  I_target10  = '0' ;
17877 +                  U_target10  =                    0;
17878 +                  END;
17879 +                END;
17880 +              END;
17881 +            ELSE DO;
17882 +              _NODE_  =                   85;
17883 +              _LEAF_  =                   19;
17884 +              P_target101  =                    1;
17885 +              P_target100  =                    0;
17886 +              Q_target101  =                    1;
17887 +              Q_target100  =                    0;
17888 +              V_target101  =     0.89473684210526;
17889 +              V_target100  =     0.10526315789473;
17890 +              I_target10  = '1' ;
17891 +              U_target10  =                    1;
17892 +              END;
17893 +            END;
17894 +          END;
17895 +        END;
17896 +      END;
17897 +    ELSE DO;
17898 +      _ARBFMT_20 = PUT( Modello , $20.);
17899 +       %DMNORMIP( _ARBFMT_20);
17900 +      IF _ARBFMT_20 IN ('TIPO' ,'GIULIETTA' ,'PASSAT VARIANT' ,'GOLF' ,
17901 +      'OCTAVIA' ,'GOLF VARIANT' ,'GRAND C4 SPACETOURER' ,'CADDY' ) THEN DO;
17902 +        IF  NOT MISSING(REP_price ) AND
17903 +                         25800 <= REP_price  THEN DO;
17904 +          _ARBFMT_20 = PUT( Modello , $20.);
17905 +           %DMNORMIP( _ARBFMT_20);
17906 +          IF _ARBFMT_20 IN ('PASSAT VARIANT' ) THEN DO;
17907 +            _NODE_  =                   54;
17908 +            _LEAF_  =                    6;
17909 +            P_target101  =     0.84210526315789;
17910 +            P_target100  =      0.1578947368421;
17911 +            Q_target101  =     0.84210526315789;
17912 +            Q_target100  =      0.1578947368421;
17913 +            V_target101  =                    1;
17914 +            V_target100  =                    0;
17915 +            I_target10  = '1' ;
17916 +            U_target10  =                    1;
17917 +            END;
17918 +          ELSE DO;
17919 +            _NODE_  =                   55;
17920 +            _LEAF_  =                    7;
17921 +            P_target101  =                    0;
17922 +            P_target100  =                    1;
17923 +            Q_target101  =                    0;
17924 +            Q_target100  =                    1;
17925 +            V_target101  =     0.08333333333333;
17926 +            V_target100  =     0.91666666666666;
17927 +            I_target10  = '0' ;
17928 +            U_target10  =                    0;
17929 +            END;
17930 +          END;
17931 +        ELSE DO;
17932 +          IF  NOT MISSING(REP_price ) AND
17933 +            REP_price  <                16190 THEN DO;
17934 +            _NODE_  =                   52;
17935 +            _LEAF_  =                    1;
17936 +            P_target101  =                    1;
17937 +            P_target100  =                    0;
17938 +            Q_target101  =                    1;
17939 +            Q_target100  =                    0;
17940 +            V_target101  =                    1;
17941 +            V_target100  =                    0;
17942 +            I_target10  = '1' ;
17943 +            U_target10  =                    1;
17944 +            END;
17945 +          ELSE DO;
17946 +            _ARBFMT_20 = PUT( Modello , $20.);
17947 +             %DMNORMIP( _ARBFMT_20);
17948 +            IF _ARBFMT_20 IN ('TIPO' ) THEN DO;
17949 +              _NODE_  =                   81;
17950 +              _LEAF_  =                    5;
17951 +              P_target101  =                    0;
17952 +              P_target100  =                    1;
17953 +              Q_target101  =                    0;
17954 +              Q_target100  =                    1;
17955 +              V_target101  =     0.11111111111111;
17956 +              V_target100  =     0.88888888888888;
17957 +              I_target10  = '0' ;
17958 +              U_target10  =                    0;
17959 +              END;
17960 +            ELSE DO;
17961 +              IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
17962 +                               118.5 <= REP_Emissioni_di_CO2  THEN DO;
17963 +                IF  NOT MISSING(REP_price ) AND
17964 +                                 21800 <= REP_price  THEN DO;
17965 +                  _NODE_  =                  109;
17966 +                  _LEAF_  =                    4;
17967 +                  P_target101  =     0.18181818181818;
17968 +                  P_target100  =     0.81818181818181;
17969 +                  Q_target101  =     0.18181818181818;
17970 +                  Q_target100  =     0.81818181818181;
17971 +                  V_target101  =                    0;
17972 +                  V_target100  =                    1;
17973 +                  I_target10  = '0' ;
17974 +                  U_target10  =                    0;
17975 +                  END;
17976 +                ELSE DO;
17977 +                  _NODE_  =                  108;
17978 +                  _LEAF_  =                    3;
17979 +                  P_target101  =                    1;
17980 +                  P_target100  =                    0;
17981 +                  Q_target101  =                    1;
17982 +                  Q_target100  =                    0;
17983 +                  V_target101  =                    1;
17984 +                  V_target100  =                    0;
17985 +                  I_target10  = '1' ;
17986 +                  U_target10  =                    1;
17987 +                  END;
17988 +                END;
17989 +              ELSE DO;
17990 +                _NODE_  =                   98;
17991 +                _LEAF_  =                    2;
17992 +                P_target101  =     0.98181818181818;
17993 +                P_target100  =     0.01818181818181;
17994 +                Q_target101  =     0.98181818181818;
17995 +                Q_target100  =     0.01818181818181;
17996 +                V_target101  =     0.92957746478873;
17997 +                V_target100  =     0.07042253521126;
17998 +                I_target10  = '1' ;
17999 +                U_target10  =                    1;
18000 +                END;
18001 +              END;
18002 +            END;
18003 +          END;
18004 +        END;
18005 +      ELSE DO;
18006 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
18007 +          REP_Emissioni_di_CO2  <                 64.5 THEN DO;
18008 +          _NODE_  =                   32;
18009 +          _LEAF_  =                    8;
18010 +          P_target101  =                  0.6;
18011 +          P_target100  =                  0.4;
18012 +          Q_target101  =                  0.6;
18013 +          Q_target100  =                  0.4;
18014 +          V_target101  =     0.33333333333333;
18015 +          V_target100  =     0.66666666666666;
18016 +          I_target10  = '1' ;
18017 +          U_target10  =                    1;
18018 +          END;
18019 +        ELSE DO;
18020 +          _NODE_  =                   33;
18021 +          _LEAF_  =                    9;
18022 +          P_target101  =     0.97066326530612;
18023 +          P_target100  =     0.02933673469387;
18024 +          Q_target101  =     0.97066326530612;
18025 +          Q_target100  =     0.02933673469387;
18026 +          V_target101  =     0.97126436781609;
18027 +          V_target100  =      0.0287356321839;
18028 +          I_target10  = '1' ;
18029 +          U_target10  =                    1;
18030 +          END;
18031 +        END;
18032 +      END;
18033 +    END;
18034 +  END;
18035 +ELSE DO;
18036 +  _ARBFMT_20 = PUT( Modello , $20.);
18037 +   %DMNORMIP( _ARBFMT_20);
18038 +  IF _ARBFMT_20 IN ('E-TRON' ,'DS 3 CROSSBACK' ,'LEAF' ,'208' ,'PARTNER' ,
18039 +    'KANGOO' ,'NEW PANDA' ,'500' ,'PANDA' ,'YPSILON' ,'TWINGO' ,'500X' ,
18040 +    'STONIC' ,'SPORTAGE' ,'CROSSLAND X' ,'SANDERO' ,'FIESTA' ,'C3' ,'X1' ,
18041 +    'C-HR' ,'XV' ,'YARIS' ,'A 250' ,'T-ROC' ,'ARONA' ,'ATECA' ,'KAMIQ' ,
18042 +    'QASHQAI' ,'X-TRAIL' ,'T-CROSS' ,'MEGANE' ,'FOCUS' ,'308' ,'C4 CACTUS' ,
18043 +    'IBIZA' ,'COMBO' ,'420' ,'C 220' ,'L200' ,'COOPER D COUNTRYMAN' ,
18044 +    'CHEROKEE' ,'INSIGNIA' ,'COOPER D CLUBMAN' ,'320' ,'730' ) THEN DO;
18045 +    IF  NOT MISSING(REP_price ) AND
18046 +      REP_price  <                 9445 THEN DO;
18047 +      _NODE_  =                   14;
18048 +      _LEAF_  =                   43;
18049 +      P_target101  =     0.87096774193548;
18050 +      P_target100  =     0.12903225806451;
18051 +      Q_target101  =     0.87096774193548;
18052 +      Q_target100  =     0.12903225806451;
18053 +      V_target101  =     0.83333333333333;
18054 +      V_target100  =     0.16666666666666;
18055 +      I_target10  = '1' ;
18056 +      U_target10  =                    1;
18057 +      END;
18058 +    ELSE DO;
18059 +      IF  NOT MISSING(REP_Peso_a_vuoto ) AND
18060 +                      1263.5 <= REP_Peso_a_vuoto  THEN DO;
18061 +        IF  NOT MISSING(REP_price ) AND
18062 +          REP_price  <                17125 THEN DO;
18063 +          _NODE_  =                   50;
18064 +          _LEAF_  =                   51;
18065 +          P_target101  =     0.79166666666666;
18066 +          P_target100  =     0.20833333333333;
18067 +          Q_target101  =     0.79166666666666;
18068 +          Q_target100  =     0.20833333333333;
18069 +          V_target101  =     0.83333333333333;
18070 +          V_target100  =     0.16666666666666;
18071 +          I_target10  = '1' ;
18072 +          U_target10  =                    1;
18073 +          END;
18074 +        ELSE DO;
18075 +          _ARBFMT_20 = PUT( Modello , $20.);
18076 +           %DMNORMIP( _ARBFMT_20);
18077 +          IF _ARBFMT_20 IN ('DS 3 CROSSBACK' ,'C-HR' ,'QASHQAI' ,'420' ) THEN
18078 +           DO;
18079 +            IF  NOT MISSING(REP_price ) AND
18080 +              REP_price  <                22190 THEN DO;
18081 +              _NODE_  =                   96;
18082 +              _LEAF_  =                   52;
18083 +              P_target101  =                    1;
18084 +              P_target100  =                    0;
18085 +              Q_target101  =                    1;
18086 +              Q_target100  =                    0;
18087 +              V_target101  =                 0.75;
18088 +              V_target100  =                 0.25;
18089 +              I_target10  = '1' ;
18090 +              U_target10  =                    1;
18091 +              END;
18092 +            ELSE DO;
18093 +              _NODE_  =                   97;
18094 +              _LEAF_  =                   53;
18095 +              P_target101  =      0.1076923076923;
18096 +              P_target100  =     0.89230769230769;
18097 +              Q_target101  =      0.1076923076923;
18098 +              Q_target100  =     0.89230769230769;
18099 +              V_target101  =     0.03703703703703;
18100 +              V_target100  =     0.96296296296296;
18101 +              I_target10  = '0' ;
18102 +              U_target10  =                    0;
18103 +              END;
18104 +            END;
18105 +          ELSE DO;
18106 +            _NODE_  =                   79;
18107 +            _LEAF_  =                   54;
18108 +            P_target101  =     0.02145922746781;
18109 +            P_target100  =     0.97854077253218;
18110 +            Q_target101  =     0.02145922746781;
18111 +            Q_target100  =     0.97854077253218;
18112 +            V_target101  =     0.02061855670103;
18113 +            V_target100  =     0.97938144329896;
18114 +            I_target10  = '0' ;
18115 +            U_target10  =                    0;
18116 +            END;
18117 +          END;
18118 +        END;
18119 +      ELSE DO;
18120 +        IF  NOT MISSING(REP_price ) AND
18121 +          REP_price  <                11725 THEN DO;
18122 +          _ARBFMT_20 = PUT( Modello , $20.);
18123 +           %DMNORMIP( _ARBFMT_20);
18124 +          IF _ARBFMT_20 IN ('500' ) THEN DO;
18125 +            _NODE_  =                   72;
18126 +            _LEAF_  =                   44;
18127 +            P_target101  =                    1;
18128 +            P_target100  =                    0;
18129 +            Q_target101  =                    1;
18130 +            Q_target100  =                    0;
18131 +            V_target101  =                    1;
18132 +            V_target100  =                    0;
18133 +            I_target10  = '1' ;
18134 +            U_target10  =                    1;
18135 +            END;
18136 +          ELSE DO;
18137 +            _ARBFMT_20 = PUT( Modello , $20.);
18138 +             %DMNORMIP( _ARBFMT_20);
18139 +            IF _ARBFMT_20 IN ('NEW PANDA' ,'PANDA' ,'YPSILON' ) THEN DO;
18140 +              _NODE_  =                   91;
18141 +              _LEAF_  =                   46;
18142 +              P_target101  =                    0;
18143 +              P_target100  =                    1;
18144 +              Q_target101  =                    0;
18145 +              Q_target100  =                    1;
18146 +              V_target101  =     0.01785714285714;
18147 +              V_target100  =     0.98214285714285;
18148 +              I_target10  = '0' ;
18149 +              U_target10  =                    0;
18150 +              END;
18151 +            ELSE DO;
18152 +              _NODE_  =                   90;
18153 +              _LEAF_  =                   45;
18154 +              P_target101  =     0.33333333333333;
18155 +              P_target100  =     0.66666666666666;
18156 +              Q_target101  =     0.33333333333333;
18157 +              Q_target100  =     0.66666666666666;
18158 +              V_target101  =     0.33333333333333;
18159 +              V_target100  =     0.66666666666666;
18160 +              I_target10  = '0' ;
18161 +              U_target10  =                    0;
18162 +              END;
18163 +            END;
18164 +          END;
18165 +        ELSE DO;
18166 +          _ARBFMT_20 = PUT( Modello , $20.);
18167 +           %DMNORMIP( _ARBFMT_20);
18168 +          IF _ARBFMT_20 IN ('LEAF' ,'PARTNER' ,'500' ,'PANDA' ,'YPSILON' ,
18169 +          'TWINGO' ,'500X' ,'STONIC' ,'CROSSLAND X' ,'SANDERO' ,'FIESTA' ,
18170 +          'C-HR' ,'KAMIQ' ,'X-TRAIL' ,'T-CROSS' ,'C4 CACTUS' ,'IBIZA' ,
18171 +          'COMBO' ,'INSIGNIA' ,'COOPER D CLUBMAN' ,'320' ) THEN DO;
18172 +            _ARBFMT_20 = PUT( Modello , $20.);
18173 +             %DMNORMIP( _ARBFMT_20);
18174 +            IF _ARBFMT_20 IN ('500X' ) THEN DO;
18175 +              _NODE_  =                   94;
18176 +              _LEAF_  =                   49;
18177 +              P_target101  =     0.03703703703703;
18178 +              P_target100  =     0.96296296296296;
18179 +              Q_target101  =     0.03703703703703;
18180 +              Q_target100  =     0.96296296296296;
18181 +              V_target101  =              0.03125;
18182 +              V_target100  =              0.96875;
18183 +              I_target10  = '0' ;
18184 +              U_target10  =                    0;
18185 +              END;
18186 +            ELSE DO;
18187 +              _NODE_  =                   95;
18188 +              _LEAF_  =                   50;
18189 +              P_target101  =                    0;
18190 +              P_target100  =                    1;
18191 +              Q_target101  =                    0;
18192 +              Q_target100  =                    1;
18193 +              V_target101  =     0.01106194690265;
18194 +              V_target100  =     0.98893805309734;
18195 +              I_target10  = '0' ;
18196 +              U_target10  =                    0;
18197 +              END;
18198 +            END;
18199 +          ELSE DO;
18200 +            IF  NOT MISSING(REP_price ) AND
18201 +              REP_price  <                17950 THEN DO;
18202 +              _NODE_  =                   92;
18203 +              _LEAF_  =                   47;
18204 +              P_target101  =                0.425;
18205 +              P_target100  =                0.575;
18206 +              Q_target101  =                0.425;
18207 +              Q_target100  =                0.575;
18208 +              V_target101  =     0.26666666666666;
18209 +              V_target100  =     0.73333333333333;
18210 +              I_target10  = '0' ;
18211 +              U_target10  =                    0;
18212 +              END;
18213 +            ELSE DO;
18214 +              _NODE_  =                   93;
18215 +              _LEAF_  =                   48;
18216 +              P_target101  =               0.0625;
18217 +              P_target100  =               0.9375;
18218 +              Q_target101  =               0.0625;
18219 +              Q_target100  =               0.9375;
18220 +              V_target101  =               0.0625;
18221 +              V_target100  =               0.9375;
18222 +              I_target10  = '0' ;
18223 +              U_target10  =                    0;
18224 +              END;
18225 +            END;
18226 +          END;
18227 +        END;
18228 +      END;
18229 +    END;
18230 +  ELSE DO;
18231 +    IF  NOT MISSING(REP_price ) AND
18232 +      REP_price  <                15820 THEN DO;
18233 +      _ARBFMT_20 = PUT( Modello , $20.);
18234 +       %DMNORMIP( _ARBFMT_20);
18235 +      IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ,'500L' ) THEN DO;
18236 +        _ARBFMT_20 = PUT( Modello , $20.);
18237 +         %DMNORMIP( _ARBFMT_20);
18238 +        IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ) THEN DO;
18239 +          IF  NOT MISSING(REP_price ) AND
18240 +                           15045 <= REP_price  THEN DO;
18241 +            _NODE_  =                   67;
18242 +            _LEAF_  =                   31;
18243 +            P_target101  =                  0.5;
18244 +            P_target100  =                  0.5;
18245 +            Q_target101  =                  0.5;
18246 +            Q_target100  =                  0.5;
18247 +            V_target101  =                 0.25;
18248 +            V_target100  =                 0.75;
18249 +            I_target10  = '1' ;
18250 +            U_target10  =                    1;
18251 +            END;
18252 +          ELSE DO;
18253 +            _NODE_  =                   66;
18254 +            _LEAF_  =                   30;
18255 +            P_target101  =                    1;
18256 +            P_target100  =                    0;
18257 +            Q_target101  =                    1;
18258 +            Q_target100  =                    0;
18259 +            V_target101  =                    1;
18260 +            V_target100  =                    0;
18261 +            I_target10  = '1' ;
18262 +            U_target10  =                    1;
18263 +            END;
18264 +          END;
18265 +        ELSE DO;
18266 +          _NODE_  =                   43;
18267 +          _LEAF_  =                   32;
18268 +          P_target101  =                    1;
18269 +          P_target100  =                    0;
18270 +          Q_target101  =                    1;
18271 +          Q_target100  =                    0;
18272 +          V_target101  =                    1;
18273 +          V_target100  =                    0;
18274 +          I_target10  = '1' ;
18275 +          U_target10  =                    1;
18276 +          END;
18277 +        END;
18278 +      ELSE DO;
18279 +        IF  NOT MISSING(REP_price ) AND
18280 +          REP_price  <                12550 THEN DO;
18281 +          _NODE_  =                   44;
18282 +          _LEAF_  =                   33;
18283 +          P_target101  =                 0.95;
18284 +          P_target100  =                 0.05;
18285 +          Q_target101  =                 0.95;
18286 +          Q_target100  =                 0.05;
18287 +          V_target101  =                    1;
18288 +          V_target100  =                    0;
18289 +          I_target10  = '1' ;
18290 +          U_target10  =                    1;
18291 +          END;
18292 +        ELSE DO;
18293 +          _NODE_  =                   45;
18294 +          _LEAF_  =                   34;
18295 +          P_target101  =     0.03703703703703;
18296 +          P_target100  =     0.96296296296296;
18297 +          Q_target101  =     0.03703703703703;
18298 +          Q_target100  =     0.96296296296296;
18299 +          V_target101  =     0.21052631578947;
18300 +          V_target100  =     0.78947368421052;
18301 +          I_target10  = '0' ;
18302 +          U_target10  =                    0;
18303 +          END;
18304 +        END;
18305 +      END;
18306 +    ELSE DO;
18307 +      _ARBFMT_20 = PUT( Modello , $20.);
18308 +       %DMNORMIP( _ARBFMT_20);
18309 +      IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ,'500L' ) THEN DO;
18310 +        _NODE_  =                   27;
18311 +        _LEAF_  =                   42;
18312 +        P_target101  =                    0;
18313 +        P_target100  =                    1;
18314 +        Q_target101  =                    0;
18315 +        Q_target100  =                    1;
18316 +        V_target101  =                    0;
18317 +        V_target100  =                    1;
18318 +        I_target10  = '0' ;
18319 +        U_target10  =                    0;
18320 +        END;
18321 +      ELSE DO;
18322 +        IF  NOT MISSING(REP_price ) AND
18323 +          REP_price  <                20620 THEN DO;
18324 +          IF  NOT MISSING(REP_Consumo_Carburante_Totale ) AND
18325 +                            4.15 <= REP_Consumo_Carburante_Totale  THEN DO;
18326 +            _NODE_  =                   69;
18327 +            _LEAF_  =                   36;
18328 +            P_target101  =               0.8125;
18329 +            P_target100  =               0.1875;
18330 +            Q_target101  =               0.8125;
18331 +            Q_target100  =               0.1875;
18332 +            V_target101  =     0.77419354838709;
18333 +            V_target100  =      0.2258064516129;
18334 +            I_target10  = '1' ;
18335 +            U_target10  =                    1;
18336 +            END;
18337 +          ELSE DO;
18338 +            _NODE_  =                   68;
18339 +            _LEAF_  =                   35;
18340 +            P_target101  =     0.29411764705882;
18341 +            P_target100  =     0.70588235294117;
18342 +            Q_target101  =     0.29411764705882;
18343 +            Q_target100  =     0.70588235294117;
18344 +            V_target101  =     0.16666666666666;
18345 +            V_target100  =     0.83333333333333;
18346 +            I_target10  = '0' ;
18347 +            U_target10  =                    0;
18348 +            END;
18349 +          END;
18350 +        ELSE DO;
18351 +          _ARBFMT_10 = PUT( Tipo_di_unita , $10.);
18352 +           %DMNORMIP( _ARBFMT_10);
18353 +          IF _ARBFMT_10 IN ('POSTERIORE' ) THEN DO;
18354 +            _NODE_  =                   70;
18355 +            _LEAF_  =                   37;
18356 +            P_target101  =     0.70588235294117;
18357 +            P_target100  =     0.29411764705882;
18358 +            Q_target101  =     0.70588235294117;
18359 +            Q_target100  =     0.29411764705882;
18360 +            V_target101  =     0.58333333333333;
18361 +            V_target100  =     0.41666666666666;
18362 +            I_target10  = '1' ;
18363 +            U_target10  =                    1;
18364 +            END;
18365 +          ELSE DO;
18366 +            IF  NOT MISSING(REP_Cilindrata ) AND
18367 +              REP_Cilindrata  <                 1417 THEN DO;
18368 +              _ARBFMT_17 = PUT( Alimentazione , $17.);
18369 +               %DMNORMIP( _ARBFMT_17);
18370 +              IF _ARBFMT_17 IN ('BENZINA' ) THEN DO;
18371 +                _NODE_  =                  102;
18372 +                _LEAF_  =                   38;
18373 +                P_target101  =     0.33333333333333;
18374 +                P_target100  =     0.66666666666666;
18375 +                Q_target101  =     0.33333333333333;
18376 +                Q_target100  =     0.66666666666666;
18377 +                V_target101  =                  0.2;
18378 +                V_target100  =                  0.8;
18379 +                I_target10  = '0' ;
18380 +                U_target10  =                    0;
18381 +                END;
18382 +              ELSE DO;
18383 +                _NODE_  =                  103;
18384 +                _LEAF_  =                   39;
18385 +                P_target101  =                    0;
18386 +                P_target100  =                    1;
18387 +                Q_target101  =                    0;
18388 +                Q_target100  =                    1;
18389 +                V_target101  =                    0;
18390 +                V_target100  =                    1;
18391 +                I_target10  = '0' ;
18392 +                U_target10  =                    0;
18393 +                END;
18394 +              END;
18395 +            ELSE DO;
18396 +              IF  NOT MISSING(REP_price ) AND
18397 +                REP_price  <                31850 THEN DO;
18398 +                _NODE_  =                  104;
18399 +                _LEAF_  =                   40;
18400 +                P_target101  =     0.44554455445544;
18401 +                P_target100  =     0.55445544554455;
18402 +                Q_target101  =     0.44554455445544;
18403 +                Q_target100  =     0.55445544554455;
18404 +                V_target101  =     0.47619047619047;
18405 +                V_target100  =     0.52380952380952;
18406 +                I_target10  = '0' ;
18407 +                U_target10  =                    0;
18408 +                END;
18409 +              ELSE DO;
18410 +                _NODE_  =                  105;
18411 +                _LEAF_  =                   41;
18412 +                P_target101  =     0.16981132075471;
18413 +                P_target100  =     0.83018867924528;
18414 +                Q_target101  =     0.16981132075471;
18415 +                Q_target100  =     0.83018867924528;
18416 +                V_target101  =     0.18309859154929;
18417 +                V_target100  =      0.8169014084507;
18418 +                I_target10  = '0' ;
18419 +                U_target10  =                    0;
18420 +                END;
18421 +              END;
18422 +            END;
18423 +          END;
18424 +        END;
18425 +      END;
18426 +    END;
18427 +  END;
18428 +
18429 +*****  RESIDUALS R_ *************;
18430 +IF  F_target10  NE '1'
18431 +AND F_target10  NE '0'  THEN DO;
18432 +        R_target101  = .;
18433 +        R_target100  = .;
18434 + END;
18435 + ELSE DO;
18436 +       R_target101  =  -P_target101 ;
18437 +       R_target100  =  -P_target100 ;
18438 +       SELECT( F_target10  );
18439 +          WHEN( '1'  ) R_target101  = R_target101  +1;
18440 +          WHEN( '0'  ) R_target100  = R_target100  +1;
18441 +       END;
18442 + END;
18443 +
18444 +****************************************************************;
18445 +******          END OF DECISION TREE SCORING CODE         ******;
18446 +****************************************************************;
18447 +
18448 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18449  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Visualizza EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
18450  quit;
18451  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
18452  filename emflow "C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
18453  *------------------------------------------------------------*;
18454  * Tree: Scoring VALIDATE data;
18455  *------------------------------------------------------------*;
18456  data EMWS1.Tree_VALIDATE
18457  / view=EMWS1.Tree_VALIDATE
18458  ;
18459  set EMWS1.Repl_VALIDATE
18460  ;
18461  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
18462 +****************************************************************;
18463 +******             DECISION TREE SCORING CODE             ******;
18464 +****************************************************************;
18465 +
18466 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18467 +LENGTH F_target10  $   12;
18468 +LENGTH I_target10  $   12;
18469 +LENGTH _WARN_  $    4;
18470 +
18471 +******              LABELS FOR NEW VARIABLES              ******;
18472 +label _NODE_ = 'Nodo' ;
18473 +label _LEAF_ = 'Foglia' ;
18474 +label P_target101 = 'Previsto: target10=1' ;
18475 +label P_target100 = 'Previsto: target10=0' ;
18476 +label Q_target101 = 'P non corretto: target10=1' ;
18477 +label Q_target100 = 'P non corretto: target10=0' ;
18478 +label V_target101 = 'Convalidato: target10=1' ;
18479 +label V_target100 = 'Convalidato: target10=0' ;
18480 +label R_target101 = 'Residuo: target10=1' ;
18481 +label R_target100 = 'Residuo: target10=0' ;
18482 +label F_target10 = 'Da: target10' ;
18483 +label I_target10 = 'In: target10' ;
18484 +label U_target10 = 'Non normalizzata in: target10' ;
18485 +label _WARN_ = 'Avvertimenti' ;
18486 +
18487 +
18488 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18489 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
18490 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
18491 +LENGTH _ARBFMT_20 $     20; DROP _ARBFMT_20;
18492 +_ARBFMT_20 = ' '; /* Initialize to avoid warning. */
18493 +LENGTH _ARBFMT_10 $     10; DROP _ARBFMT_10;
18494 +_ARBFMT_10 = ' '; /* Initialize to avoid warning. */
18495 +LENGTH _ARBFMT_17 $     17; DROP _ARBFMT_17;
18496 +_ARBFMT_17 = ' '; /* Initialize to avoid warning. */
18497 +
18498 +
18499 +_ARBFMT_12 = PUT( target10 , BEST.);
18500 + %DMNORMCP( _ARBFMT_12, F_target10 );
18501 +
18502 +******             ASSIGN OBSERVATION TO NODE             ******;
18503 +_ARBFMT_20 = PUT( Modello , $20.);
18504 + %DMNORMIP( _ARBFMT_20);
18505 +IF _ARBFMT_20 IN ('FORTWO' ,'Q3' ,'KONA' ,'A4' ,'COOPER' ,'NIRO' ,'CAPTUR' ,
18506 +  'TIVOLI' ,'RENEGADE' ,'COMPASS' ,'GRANDLAND X' ,'OUTLANDER' ,'TIPO' ,
18507 +  'CLIO' ,'GIULIETTA' ,'500C' ,'Q5' ,'NX 300' ,'3008' ,'PASSAT VARIANT' ,
18508 +  '508' ,'520' ,'A6' ,'LEON' ,'COROLLA' ,'CAYENNE' ,'GOLF' ,'A5' ,'A3' ,
18509 +  'POLO' ,'STELVIO' ,'KADJAR' ,'WRANGLER' ,'Q2' ,'OCTAVIA' ,'TALISMAN' ,
18510 +  'ASTRA' ,'GOLF VARIANT' ,'318' ,'GIULIA' ,'E-PACE' ,'GRAND C4 SPACETOURER' ,
18511 +  'SCENIC' ,'DOBLO' ,'CADDY' ,'218' ,'TOURAN' ,'FIORINO' ,'A4 ALLROAD' ,
18512 +  'ESPACE' ) THEN DO;
18513 +  IF  NOT MISSING(REP_price ) AND
18514 +                   42550 <= REP_price  THEN DO;
18515 +    _ARBFMT_20 = PUT( Modello , $20.);
18516 +     %DMNORMIP( _ARBFMT_20);
18517 +    IF _ARBFMT_20 IN ('Q5' ,'520' ,'A6' ,'CAYENNE' ,'WRANGLER' ) THEN DO;
18518 +      IF  NOT MISSING(REP_price ) AND
18519 +                       50740 <= REP_price  THEN DO;
18520 +        _NODE_  =                   23;
18521 +        _LEAF_  =                   29;
18522 +        P_target101  =                 0.45;
18523 +        P_target100  =                 0.55;
18524 +        Q_target101  =                 0.45;
18525 +        Q_target100  =                 0.55;
18526 +        V_target101  =     0.57142857142857;
18527 +        V_target100  =     0.42857142857142;
18528 +        I_target10  = '0' ;
18529 +        U_target10  =                    0;
18530 +        END;
18531 +      ELSE DO;
18532 +        _NODE_  =                   22;
18533 +        _LEAF_  =                   28;
18534 +        P_target101  =                    1;
18535 +        P_target100  =                    0;
18536 +        Q_target101  =                    1;
18537 +        Q_target100  =                    0;
18538 +        V_target101  =     0.88888888888888;
18539 +        V_target100  =     0.11111111111111;
18540 +        I_target10  = '1' ;
18541 +        U_target10  =                    1;
18542 +        END;
18543 +      END;
18544 +    ELSE DO;
18545 +      IF  NOT MISSING(REP_price ) AND
18546 +        REP_price  <                45200 THEN DO;
18547 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
18548 +          REP_Emissioni_di_CO2  <                  133 THEN DO;
18549 +          _NODE_  =                   38;
18550 +          _LEAF_  =                   23;
18551 +          P_target101  =     0.07692307692307;
18552 +          P_target100  =     0.92307692307692;
18553 +          Q_target101  =     0.07692307692307;
18554 +          Q_target100  =     0.92307692307692;
18555 +          V_target101  =     0.11111111111111;
18556 +          V_target100  =     0.88888888888888;
18557 +          I_target10  = '0' ;
18558 +          U_target10  =                    0;
18559 +          END;
18560 +        ELSE DO;
18561 +          _ARBFMT_20 = PUT( Modello , $20.);
18562 +           %DMNORMIP( _ARBFMT_20);
18563 +          IF _ARBFMT_20 IN ('STELVIO' ) THEN DO;
18564 +            _NODE_  =                   64;
18565 +            _LEAF_  =                   24;
18566 +            P_target101  =                    1;
18567 +            P_target100  =                    0;
18568 +            Q_target101  =                    1;
18569 +            Q_target100  =                    0;
18570 +            V_target101  =                    1;
18571 +            V_target100  =                    0;
18572 +            I_target10  = '1' ;
18573 +            U_target10  =                    1;
18574 +            END;
18575 +          ELSE DO;
18576 +            _NODE_  =                   65;
18577 +            _LEAF_  =                   25;
18578 +            P_target101  =                  0.5;
18579 +            P_target100  =                  0.5;
18580 +            Q_target101  =                  0.5;
18581 +            Q_target100  =                  0.5;
18582 +            V_target101  =                    0;
18583 +            V_target100  =                    1;
18584 +            I_target10  = '1' ;
18585 +            U_target10  =                    1;
18586 +            END;
18587 +          END;
18588 +        END;
18589 +      ELSE DO;
18590 +        _ARBFMT_12 = PUT( Posti_a_sedere , BEST12.);
18591 +         %DMNORMIP( _ARBFMT_12);
18592 +        IF _ARBFMT_12 IN ('4' ) THEN DO;
18593 +          _NODE_  =                   40;
18594 +          _LEAF_  =                   26;
18595 +          P_target101  =                  0.4;
18596 +          P_target100  =                  0.6;
18597 +          Q_target101  =                  0.4;
18598 +          Q_target100  =                  0.6;
18599 +          V_target101  =                    1;
18600 +          V_target100  =                    0;
18601 +          I_target10  = '0' ;
18602 +          U_target10  =                    0;
18603 +          END;
18604 +        ELSE DO;
18605 +          _NODE_  =                   41;
18606 +          _LEAF_  =                   27;
18607 +          P_target101  =     0.01408450704225;
18608 +          P_target100  =     0.98591549295774;
18609 +          Q_target101  =     0.01408450704225;
18610 +          Q_target100  =     0.98591549295774;
18611 +          V_target101  =     0.03448275862068;
18612 +          V_target100  =     0.96551724137931;
18613 +          I_target10  = '0' ;
18614 +          U_target10  =                    0;
18615 +          END;
18616 +        END;
18617 +      END;
18618 +    END;
18619 +  ELSE DO;
18620 +    _ARBFMT_20 = PUT( Modello , $20.);
18621 +     %DMNORMIP( _ARBFMT_20);
18622 +    IF _ARBFMT_20 IN ('KONA' ,'COOPER' ,'NIRO' ,'TIVOLI' ,'GRANDLAND X' ,
18623 +    'CLIO' ,'COROLLA' ,'A3' ,'POLO' ,'KADJAR' ,'Q2' ,'ASTRA' ,'SCENIC' ,
18624 +    'DOBLO' ,'218' ,'FIORINO' ) THEN DO;
18625 +      IF  NOT MISSING(REP_price ) AND
18626 +        REP_price  <                18450 THEN DO;
18627 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
18628 +                            96 <= REP_Emissioni_di_CO2  THEN DO;
18629 +          _NODE_  =                   35;
18630 +          _LEAF_  =                   12;
18631 +          P_target101  =     0.95238095238095;
18632 +          P_target100  =     0.04761904761904;
18633 +          Q_target101  =     0.95238095238095;
18634 +          Q_target100  =     0.04761904761904;
18635 +          V_target101  =                    1;
18636 +          V_target100  =                    0;
18637 +          I_target10  = '1' ;
18638 +          U_target10  =                    1;
18639 +          END;
18640 +        ELSE DO;
18641 +          IF  NOT MISSING(REP_price ) AND
18642 +                           15770 <= REP_price  THEN DO;
18643 +            _NODE_  =                   59;
18644 +            _LEAF_  =                   11;
18645 +            P_target101  =     0.33333333333333;
18646 +            P_target100  =     0.66666666666666;
18647 +            Q_target101  =     0.33333333333333;
18648 +            Q_target100  =     0.66666666666666;
18649 +            V_target101  =                    0;
18650 +            V_target100  =                    1;
18651 +            I_target10  = '0' ;
18652 +            U_target10  =                    0;
18653 +            END;
18654 +          ELSE DO;
18655 +            _NODE_  =                   58;
18656 +            _LEAF_  =                   10;
18657 +            P_target101  =                    1;
18658 +            P_target100  =                    0;
18659 +            Q_target101  =                    1;
18660 +            Q_target100  =                    0;
18661 +            V_target101  =                    1;
18662 +            V_target100  =                    0;
18663 +            I_target10  = '1' ;
18664 +            U_target10  =                    1;
18665 +            END;
18666 +          END;
18667 +        END;
18668 +      ELSE DO;
18669 +        _ARBFMT_20 = PUT( Modello , $20.);
18670 +         %DMNORMIP( _ARBFMT_20);
18671 +        IF _ARBFMT_20 IN ('TIVOLI' ,'CLIO' ,'POLO' ,'DOBLO' ) THEN DO;
18672 +          IF  NOT MISSING(REP_Consumo_Carburante_Totale ) AND
18673 +                            8.35 <= REP_Consumo_Carburante_Totale  THEN DO;
18674 +            _NODE_  =                   63;
18675 +            _LEAF_  =                   22;
18676 +            P_target101  =                  0.2;
18677 +            P_target100  =                  0.8;
18678 +            Q_target101  =                  0.2;
18679 +            Q_target100  =                  0.8;
18680 +            V_target101  =     0.33333333333333;
18681 +            V_target100  =     0.66666666666666;
18682 +            I_target10  = '0' ;
18683 +            U_target10  =                    0;
18684 +            END;
18685 +          ELSE DO;
18686 +            _NODE_  =                   62;
18687 +            _LEAF_  =                   21;
18688 +            P_target101  =                    0;
18689 +            P_target100  =                    1;
18690 +            Q_target101  =                    0;
18691 +            Q_target100  =                    1;
18692 +            V_target101  =                    0;
18693 +            V_target100  =                    1;
18694 +            I_target10  = '0' ;
18695 +            U_target10  =                    0;
18696 +            END;
18697 +          END;
18698 +        ELSE DO;
18699 +          IF  NOT MISSING(REP_price ) AND
18700 +                           33400 <= REP_price  THEN DO;
18701 +            _NODE_  =                   61;
18702 +            _LEAF_  =                   20;
18703 +            P_target101  =                    0;
18704 +            P_target100  =                    1;
18705 +            Q_target101  =                    0;
18706 +            Q_target100  =                    1;
18707 +            V_target101  =                    0;
18708 +            V_target100  =                    1;
18709 +            I_target10  = '0' ;
18710 +            U_target10  =                    0;
18711 +            END;
18712 +          ELSE DO;
18713 +            _ARBFMT_20 = PUT( Modello , $20.);
18714 +             %DMNORMIP( _ARBFMT_20);
18715 +            IF _ARBFMT_20 IN ('KONA' ,'NIRO' ,'COROLLA' ,'KADJAR' ,'Q2' ,
18716 +            'ASTRA' ,'SCENIC' ,'218' ) THEN DO;
18717 +              IF  NOT MISSING(REP_price ) AND
18718 +                REP_price  <                21995 THEN DO;
18719 +                _ARBFMT_20 = PUT( Modello , $20.);
18720 +                 %DMNORMIP( _ARBFMT_20);
18721 +                IF _ARBFMT_20 IN ('ASTRA' ) THEN DO;
18722 +                  IF  NOT MISSING(REP_price ) AND
18723 +                                   20425 <= REP_price  THEN DO;
18724 +                    _NODE_  =                  117;
18725 +                    _LEAF_  =                   14;
18726 +                    P_target101  =                    0;
18727 +                    P_target100  =                    1;
18728 +                    Q_target101  =                    0;
18729 +                    Q_target100  =                    1;
18730 +                    V_target101  =                    0;
18731 +                    V_target100  =                    1;
18732 +                    I_target10  = '0' ;
18733 +                    U_target10  =                    0;
18734 +                    END;
18735 +                  ELSE DO;
18736 +                    _NODE_  =                  116;
18737 +                    _LEAF_  =                   13;
18738 +                    P_target101  =                    1;
18739 +                    P_target100  =                    0;
18740 +                    Q_target101  =                    1;
18741 +                    Q_target100  =                    0;
18742 +                    V_target101  =                    1;
18743 +                    V_target100  =                    0;
18744 +                    I_target10  = '1' ;
18745 +                    U_target10  =                    1;
18746 +                    END;
18747 +                  END;
18748 +                ELSE DO;
18749 +                  _NODE_  =                  111;
18750 +                  _LEAF_  =                   15;
18751 +                  P_target101  =                    1;
18752 +                  P_target100  =                    0;
18753 +                  Q_target101  =                    1;
18754 +                  Q_target100  =                    0;
18755 +                  V_target101  =                    1;
18756 +                  V_target100  =                    0;
18757 +                  I_target10  = '1' ;
18758 +                  U_target10  =                    1;
18759 +                  END;
18760 +                END;
18761 +              ELSE DO;
18762 +                IF  NOT MISSING(REP_Cilindrata ) AND
18763 +                                1773.5 <= REP_Cilindrata  THEN DO;
18764 +                  IF  NOT MISSING(REP_price ) AND
18765 +                                   30300 <= REP_price  THEN DO;
18766 +                    _NODE_  =                  119;
18767 +                    _LEAF_  =                   18;
18768 +                    P_target101  =                    0;
18769 +                    P_target100  =                    1;
18770 +                    Q_target101  =                    0;
18771 +                    Q_target100  =                    1;
18772 +                    V_target101  =                    0;
18773 +                    V_target100  =                    1;
18774 +                    I_target10  = '0' ;
18775 +                    U_target10  =                    0;
18776 +                    END;
18777 +                  ELSE DO;
18778 +                    _NODE_  =                  118;
18779 +                    _LEAF_  =                   17;
18780 +                    P_target101  =     0.94444444444444;
18781 +                    P_target100  =     0.05555555555555;
18782 +                    Q_target101  =     0.94444444444444;
18783 +                    Q_target100  =     0.05555555555555;
18784 +                    V_target101  =     0.94736842105263;
18785 +                    V_target100  =     0.05263157894736;
18786 +                    I_target10  = '1' ;
18787 +                    U_target10  =                    1;
18788 +                    END;
18789 +                  END;
18790 +                ELSE DO;
18791 +                  _NODE_  =                  112;
18792 +                  _LEAF_  =                   16;
18793 +                  P_target101  =     0.18461538461538;
18794 +                  P_target100  =     0.81538461538461;
18795 +                  Q_target101  =     0.18461538461538;
18796 +                  Q_target100  =     0.81538461538461;
18797 +                  V_target101  =     0.23809523809523;
18798 +                  V_target100  =     0.76190476190476;
18799 +                  I_target10  = '0' ;
18800 +                  U_target10  =                    0;
18801 +                  END;
18802 +                END;
18803 +              END;
18804 +            ELSE DO;
18805 +              _NODE_  =                   85;
18806 +              _LEAF_  =                   19;
18807 +              P_target101  =                    1;
18808 +              P_target100  =                    0;
18809 +              Q_target101  =                    1;
18810 +              Q_target100  =                    0;
18811 +              V_target101  =     0.89473684210526;
18812 +              V_target100  =     0.10526315789473;
18813 +              I_target10  = '1' ;
18814 +              U_target10  =                    1;
18815 +              END;
18816 +            END;
18817 +          END;
18818 +        END;
18819 +      END;
18820 +    ELSE DO;
18821 +      _ARBFMT_20 = PUT( Modello , $20.);
18822 +       %DMNORMIP( _ARBFMT_20);
18823 +      IF _ARBFMT_20 IN ('TIPO' ,'GIULIETTA' ,'PASSAT VARIANT' ,'GOLF' ,
18824 +      'OCTAVIA' ,'GOLF VARIANT' ,'GRAND C4 SPACETOURER' ,'CADDY' ) THEN DO;
18825 +        IF  NOT MISSING(REP_price ) AND
18826 +                         25800 <= REP_price  THEN DO;
18827 +          _ARBFMT_20 = PUT( Modello , $20.);
18828 +           %DMNORMIP( _ARBFMT_20);
18829 +          IF _ARBFMT_20 IN ('PASSAT VARIANT' ) THEN DO;
18830 +            _NODE_  =                   54;
18831 +            _LEAF_  =                    6;
18832 +            P_target101  =     0.84210526315789;
18833 +            P_target100  =      0.1578947368421;
18834 +            Q_target101  =     0.84210526315789;
18835 +            Q_target100  =      0.1578947368421;
18836 +            V_target101  =                    1;
18837 +            V_target100  =                    0;
18838 +            I_target10  = '1' ;
18839 +            U_target10  =                    1;
18840 +            END;
18841 +          ELSE DO;
18842 +            _NODE_  =                   55;
18843 +            _LEAF_  =                    7;
18844 +            P_target101  =                    0;
18845 +            P_target100  =                    1;
18846 +            Q_target101  =                    0;
18847 +            Q_target100  =                    1;
18848 +            V_target101  =     0.08333333333333;
18849 +            V_target100  =     0.91666666666666;
18850 +            I_target10  = '0' ;
18851 +            U_target10  =                    0;
18852 +            END;
18853 +          END;
18854 +        ELSE DO;
18855 +          IF  NOT MISSING(REP_price ) AND
18856 +            REP_price  <                16190 THEN DO;
18857 +            _NODE_  =                   52;
18858 +            _LEAF_  =                    1;
18859 +            P_target101  =                    1;
18860 +            P_target100  =                    0;
18861 +            Q_target101  =                    1;
18862 +            Q_target100  =                    0;
18863 +            V_target101  =                    1;
18864 +            V_target100  =                    0;
18865 +            I_target10  = '1' ;
18866 +            U_target10  =                    1;
18867 +            END;
18868 +          ELSE DO;
18869 +            _ARBFMT_20 = PUT( Modello , $20.);
18870 +             %DMNORMIP( _ARBFMT_20);
18871 +            IF _ARBFMT_20 IN ('TIPO' ) THEN DO;
18872 +              _NODE_  =                   81;
18873 +              _LEAF_  =                    5;
18874 +              P_target101  =                    0;
18875 +              P_target100  =                    1;
18876 +              Q_target101  =                    0;
18877 +              Q_target100  =                    1;
18878 +              V_target101  =     0.11111111111111;
18879 +              V_target100  =     0.88888888888888;
18880 +              I_target10  = '0' ;
18881 +              U_target10  =                    0;
18882 +              END;
18883 +            ELSE DO;
18884 +              IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
18885 +                               118.5 <= REP_Emissioni_di_CO2  THEN DO;
18886 +                IF  NOT MISSING(REP_price ) AND
18887 +                                 21800 <= REP_price  THEN DO;
18888 +                  _NODE_  =                  109;
18889 +                  _LEAF_  =                    4;
18890 +                  P_target101  =     0.18181818181818;
18891 +                  P_target100  =     0.81818181818181;
18892 +                  Q_target101  =     0.18181818181818;
18893 +                  Q_target100  =     0.81818181818181;
18894 +                  V_target101  =                    0;
18895 +                  V_target100  =                    1;
18896 +                  I_target10  = '0' ;
18897 +                  U_target10  =                    0;
18898 +                  END;
18899 +                ELSE DO;
18900 +                  _NODE_  =                  108;
18901 +                  _LEAF_  =                    3;
18902 +                  P_target101  =                    1;
18903 +                  P_target100  =                    0;
18904 +                  Q_target101  =                    1;
18905 +                  Q_target100  =                    0;
18906 +                  V_target101  =                    1;
18907 +                  V_target100  =                    0;
18908 +                  I_target10  = '1' ;
18909 +                  U_target10  =                    1;
18910 +                  END;
18911 +                END;
18912 +              ELSE DO;
18913 +                _NODE_  =                   98;
18914 +                _LEAF_  =                    2;
18915 +                P_target101  =     0.98181818181818;
18916 +                P_target100  =     0.01818181818181;
18917 +                Q_target101  =     0.98181818181818;
18918 +                Q_target100  =     0.01818181818181;
18919 +                V_target101  =     0.92957746478873;
18920 +                V_target100  =     0.07042253521126;
18921 +                I_target10  = '1' ;
18922 +                U_target10  =                    1;
18923 +                END;
18924 +              END;
18925 +            END;
18926 +          END;
18927 +        END;
18928 +      ELSE DO;
18929 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
18930 +          REP_Emissioni_di_CO2  <                 64.5 THEN DO;
18931 +          _NODE_  =                   32;
18932 +          _LEAF_  =                    8;
18933 +          P_target101  =                  0.6;
18934 +          P_target100  =                  0.4;
18935 +          Q_target101  =                  0.6;
18936 +          Q_target100  =                  0.4;
18937 +          V_target101  =     0.33333333333333;
18938 +          V_target100  =     0.66666666666666;
18939 +          I_target10  = '1' ;
18940 +          U_target10  =                    1;
18941 +          END;
18942 +        ELSE DO;
18943 +          _NODE_  =                   33;
18944 +          _LEAF_  =                    9;
18945 +          P_target101  =     0.97066326530612;
18946 +          P_target100  =     0.02933673469387;
18947 +          Q_target101  =     0.97066326530612;
18948 +          Q_target100  =     0.02933673469387;
18949 +          V_target101  =     0.97126436781609;
18950 +          V_target100  =      0.0287356321839;
18951 +          I_target10  = '1' ;
18952 +          U_target10  =                    1;
18953 +          END;
18954 +        END;
18955 +      END;
18956 +    END;
18957 +  END;
18958 +ELSE DO;
18959 +  _ARBFMT_20 = PUT( Modello , $20.);
18960 +   %DMNORMIP( _ARBFMT_20);
18961 +  IF _ARBFMT_20 IN ('E-TRON' ,'DS 3 CROSSBACK' ,'LEAF' ,'208' ,'PARTNER' ,
18962 +    'KANGOO' ,'NEW PANDA' ,'500' ,'PANDA' ,'YPSILON' ,'TWINGO' ,'500X' ,
18963 +    'STONIC' ,'SPORTAGE' ,'CROSSLAND X' ,'SANDERO' ,'FIESTA' ,'C3' ,'X1' ,
18964 +    'C-HR' ,'XV' ,'YARIS' ,'A 250' ,'T-ROC' ,'ARONA' ,'ATECA' ,'KAMIQ' ,
18965 +    'QASHQAI' ,'X-TRAIL' ,'T-CROSS' ,'MEGANE' ,'FOCUS' ,'308' ,'C4 CACTUS' ,
18966 +    'IBIZA' ,'COMBO' ,'420' ,'C 220' ,'L200' ,'COOPER D COUNTRYMAN' ,
18967 +    'CHEROKEE' ,'INSIGNIA' ,'COOPER D CLUBMAN' ,'320' ,'730' ) THEN DO;
18968 +    IF  NOT MISSING(REP_price ) AND
18969 +      REP_price  <                 9445 THEN DO;
18970 +      _NODE_  =                   14;
18971 +      _LEAF_  =                   43;
18972 +      P_target101  =     0.87096774193548;
18973 +      P_target100  =     0.12903225806451;
18974 +      Q_target101  =     0.87096774193548;
18975 +      Q_target100  =     0.12903225806451;
18976 +      V_target101  =     0.83333333333333;
18977 +      V_target100  =     0.16666666666666;
18978 +      I_target10  = '1' ;
18979 +      U_target10  =                    1;
18980 +      END;
18981 +    ELSE DO;
18982 +      IF  NOT MISSING(REP_Peso_a_vuoto ) AND
18983 +                      1263.5 <= REP_Peso_a_vuoto  THEN DO;
18984 +        IF  NOT MISSING(REP_price ) AND
18985 +          REP_price  <                17125 THEN DO;
18986 +          _NODE_  =                   50;
18987 +          _LEAF_  =                   51;
18988 +          P_target101  =     0.79166666666666;
18989 +          P_target100  =     0.20833333333333;
18990 +          Q_target101  =     0.79166666666666;
18991 +          Q_target100  =     0.20833333333333;
18992 +          V_target101  =     0.83333333333333;
18993 +          V_target100  =     0.16666666666666;
18994 +          I_target10  = '1' ;
18995 +          U_target10  =                    1;
18996 +          END;
18997 +        ELSE DO;
18998 +          _ARBFMT_20 = PUT( Modello , $20.);
18999 +           %DMNORMIP( _ARBFMT_20);
19000 +          IF _ARBFMT_20 IN ('DS 3 CROSSBACK' ,'C-HR' ,'QASHQAI' ,'420' ) THEN
19001 +           DO;
19002 +            IF  NOT MISSING(REP_price ) AND
19003 +              REP_price  <                22190 THEN DO;
19004 +              _NODE_  =                   96;
19005 +              _LEAF_  =                   52;
19006 +              P_target101  =                    1;
19007 +              P_target100  =                    0;
19008 +              Q_target101  =                    1;
19009 +              Q_target100  =                    0;
19010 +              V_target101  =                 0.75;
19011 +              V_target100  =                 0.25;
19012 +              I_target10  = '1' ;
19013 +              U_target10  =                    1;
19014 +              END;
19015 +            ELSE DO;
19016 +              _NODE_  =                   97;
19017 +              _LEAF_  =                   53;
19018 +              P_target101  =      0.1076923076923;
19019 +              P_target100  =     0.89230769230769;
19020 +              Q_target101  =      0.1076923076923;
19021 +              Q_target100  =     0.89230769230769;
19022 +              V_target101  =     0.03703703703703;
19023 +              V_target100  =     0.96296296296296;
19024 +              I_target10  = '0' ;
19025 +              U_target10  =                    0;
19026 +              END;
19027 +            END;
19028 +          ELSE DO;
19029 +            _NODE_  =                   79;
19030 +            _LEAF_  =                   54;
19031 +            P_target101  =     0.02145922746781;
19032 +            P_target100  =     0.97854077253218;
19033 +            Q_target101  =     0.02145922746781;
19034 +            Q_target100  =     0.97854077253218;
19035 +            V_target101  =     0.02061855670103;
19036 +            V_target100  =     0.97938144329896;
19037 +            I_target10  = '0' ;
19038 +            U_target10  =                    0;
19039 +            END;
19040 +          END;
19041 +        END;
19042 +      ELSE DO;
19043 +        IF  NOT MISSING(REP_price ) AND
19044 +          REP_price  <                11725 THEN DO;
19045 +          _ARBFMT_20 = PUT( Modello , $20.);
19046 +           %DMNORMIP( _ARBFMT_20);
19047 +          IF _ARBFMT_20 IN ('500' ) THEN DO;
19048 +            _NODE_  =                   72;
19049 +            _LEAF_  =                   44;
19050 +            P_target101  =                    1;
19051 +            P_target100  =                    0;
19052 +            Q_target101  =                    1;
19053 +            Q_target100  =                    0;
19054 +            V_target101  =                    1;
19055 +            V_target100  =                    0;
19056 +            I_target10  = '1' ;
19057 +            U_target10  =                    1;
19058 +            END;
19059 +          ELSE DO;
19060 +            _ARBFMT_20 = PUT( Modello , $20.);
19061 +             %DMNORMIP( _ARBFMT_20);
19062 +            IF _ARBFMT_20 IN ('NEW PANDA' ,'PANDA' ,'YPSILON' ) THEN DO;
19063 +              _NODE_  =                   91;
19064 +              _LEAF_  =                   46;
19065 +              P_target101  =                    0;
19066 +              P_target100  =                    1;
19067 +              Q_target101  =                    0;
19068 +              Q_target100  =                    1;
19069 +              V_target101  =     0.01785714285714;
19070 +              V_target100  =     0.98214285714285;
19071 +              I_target10  = '0' ;
19072 +              U_target10  =                    0;
19073 +              END;
19074 +            ELSE DO;
19075 +              _NODE_  =                   90;
19076 +              _LEAF_  =                   45;
19077 +              P_target101  =     0.33333333333333;
19078 +              P_target100  =     0.66666666666666;
19079 +              Q_target101  =     0.33333333333333;
19080 +              Q_target100  =     0.66666666666666;
19081 +              V_target101  =     0.33333333333333;
19082 +              V_target100  =     0.66666666666666;
19083 +              I_target10  = '0' ;
19084 +              U_target10  =                    0;
19085 +              END;
19086 +            END;
19087 +          END;
19088 +        ELSE DO;
19089 +          _ARBFMT_20 = PUT( Modello , $20.);
19090 +           %DMNORMIP( _ARBFMT_20);
19091 +          IF _ARBFMT_20 IN ('LEAF' ,'PARTNER' ,'500' ,'PANDA' ,'YPSILON' ,
19092 +          'TWINGO' ,'500X' ,'STONIC' ,'CROSSLAND X' ,'SANDERO' ,'FIESTA' ,
19093 +          'C-HR' ,'KAMIQ' ,'X-TRAIL' ,'T-CROSS' ,'C4 CACTUS' ,'IBIZA' ,
19094 +          'COMBO' ,'INSIGNIA' ,'COOPER D CLUBMAN' ,'320' ) THEN DO;
19095 +            _ARBFMT_20 = PUT( Modello , $20.);
19096 +             %DMNORMIP( _ARBFMT_20);
19097 +            IF _ARBFMT_20 IN ('500X' ) THEN DO;
19098 +              _NODE_  =                   94;
19099 +              _LEAF_  =                   49;
19100 +              P_target101  =     0.03703703703703;
19101 +              P_target100  =     0.96296296296296;
19102 +              Q_target101  =     0.03703703703703;
19103 +              Q_target100  =     0.96296296296296;
19104 +              V_target101  =              0.03125;
19105 +              V_target100  =              0.96875;
19106 +              I_target10  = '0' ;
19107 +              U_target10  =                    0;
19108 +              END;
19109 +            ELSE DO;
19110 +              _NODE_  =                   95;
19111 +              _LEAF_  =                   50;
19112 +              P_target101  =                    0;
19113 +              P_target100  =                    1;
19114 +              Q_target101  =                    0;
19115 +              Q_target100  =                    1;
19116 +              V_target101  =     0.01106194690265;
19117 +              V_target100  =     0.98893805309734;
19118 +              I_target10  = '0' ;
19119 +              U_target10  =                    0;
19120 +              END;
19121 +            END;
19122 +          ELSE DO;
19123 +            IF  NOT MISSING(REP_price ) AND
19124 +              REP_price  <                17950 THEN DO;
19125 +              _NODE_  =                   92;
19126 +              _LEAF_  =                   47;
19127 +              P_target101  =                0.425;
19128 +              P_target100  =                0.575;
19129 +              Q_target101  =                0.425;
19130 +              Q_target100  =                0.575;
19131 +              V_target101  =     0.26666666666666;
19132 +              V_target100  =     0.73333333333333;
19133 +              I_target10  = '0' ;
19134 +              U_target10  =                    0;
19135 +              END;
19136 +            ELSE DO;
19137 +              _NODE_  =                   93;
19138 +              _LEAF_  =                   48;
19139 +              P_target101  =               0.0625;
19140 +              P_target100  =               0.9375;
19141 +              Q_target101  =               0.0625;
19142 +              Q_target100  =               0.9375;
19143 +              V_target101  =               0.0625;
19144 +              V_target100  =               0.9375;
19145 +              I_target10  = '0' ;
19146 +              U_target10  =                    0;
19147 +              END;
19148 +            END;
19149 +          END;
19150 +        END;
19151 +      END;
19152 +    END;
19153 +  ELSE DO;
19154 +    IF  NOT MISSING(REP_price ) AND
19155 +      REP_price  <                15820 THEN DO;
19156 +      _ARBFMT_20 = PUT( Modello , $20.);
19157 +       %DMNORMIP( _ARBFMT_20);
19158 +      IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ,'500L' ) THEN DO;
19159 +        _ARBFMT_20 = PUT( Modello , $20.);
19160 +         %DMNORMIP( _ARBFMT_20);
19161 +        IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ) THEN DO;
19162 +          IF  NOT MISSING(REP_price ) AND
19163 +                           15045 <= REP_price  THEN DO;
19164 +            _NODE_  =                   67;
19165 +            _LEAF_  =                   31;
19166 +            P_target101  =                  0.5;
19167 +            P_target100  =                  0.5;
19168 +            Q_target101  =                  0.5;
19169 +            Q_target100  =                  0.5;
19170 +            V_target101  =                 0.25;
19171 +            V_target100  =                 0.75;
19172 +            I_target10  = '1' ;
19173 +            U_target10  =                    1;
19174 +            END;
19175 +          ELSE DO;
19176 +            _NODE_  =                   66;
19177 +            _LEAF_  =                   30;
19178 +            P_target101  =                    1;
19179 +            P_target100  =                    0;
19180 +            Q_target101  =                    1;
19181 +            Q_target100  =                    0;
19182 +            V_target101  =                    1;
19183 +            V_target100  =                    0;
19184 +            I_target10  = '1' ;
19185 +            U_target10  =                    1;
19186 +            END;
19187 +          END;
19188 +        ELSE DO;
19189 +          _NODE_  =                   43;
19190 +          _LEAF_  =                   32;
19191 +          P_target101  =                    1;
19192 +          P_target100  =                    0;
19193 +          Q_target101  =                    1;
19194 +          Q_target100  =                    0;
19195 +          V_target101  =                    1;
19196 +          V_target100  =                    0;
19197 +          I_target10  = '1' ;
19198 +          U_target10  =                    1;
19199 +          END;
19200 +        END;
19201 +      ELSE DO;
19202 +        IF  NOT MISSING(REP_price ) AND
19203 +          REP_price  <                12550 THEN DO;
19204 +          _NODE_  =                   44;
19205 +          _LEAF_  =                   33;
19206 +          P_target101  =                 0.95;
19207 +          P_target100  =                 0.05;
19208 +          Q_target101  =                 0.95;
19209 +          Q_target100  =                 0.05;
19210 +          V_target101  =                    1;
19211 +          V_target100  =                    0;
19212 +          I_target10  = '1' ;
19213 +          U_target10  =                    1;
19214 +          END;
19215 +        ELSE DO;
19216 +          _NODE_  =                   45;
19217 +          _LEAF_  =                   34;
19218 +          P_target101  =     0.03703703703703;
19219 +          P_target100  =     0.96296296296296;
19220 +          Q_target101  =     0.03703703703703;
19221 +          Q_target100  =     0.96296296296296;
19222 +          V_target101  =     0.21052631578947;
19223 +          V_target100  =     0.78947368421052;
19224 +          I_target10  = '0' ;
19225 +          U_target10  =                    0;
19226 +          END;
19227 +        END;
19228 +      END;
19229 +    ELSE DO;
19230 +      _ARBFMT_20 = PUT( Modello , $20.);
19231 +       %DMNORMIP( _ARBFMT_20);
19232 +      IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ,'500L' ) THEN DO;
19233 +        _NODE_  =                   27;
19234 +        _LEAF_  =                   42;
19235 +        P_target101  =                    0;
19236 +        P_target100  =                    1;
19237 +        Q_target101  =                    0;
19238 +        Q_target100  =                    1;
19239 +        V_target101  =                    0;
19240 +        V_target100  =                    1;
19241 +        I_target10  = '0' ;
19242 +        U_target10  =                    0;
19243 +        END;
19244 +      ELSE DO;
19245 +        IF  NOT MISSING(REP_price ) AND
19246 +          REP_price  <                20620 THEN DO;
19247 +          IF  NOT MISSING(REP_Consumo_Carburante_Totale ) AND
19248 +                            4.15 <= REP_Consumo_Carburante_Totale  THEN DO;
19249 +            _NODE_  =                   69;
19250 +            _LEAF_  =                   36;
19251 +            P_target101  =               0.8125;
19252 +            P_target100  =               0.1875;
19253 +            Q_target101  =               0.8125;
19254 +            Q_target100  =               0.1875;
19255 +            V_target101  =     0.77419354838709;
19256 +            V_target100  =      0.2258064516129;
19257 +            I_target10  = '1' ;
19258 +            U_target10  =                    1;
19259 +            END;
19260 +          ELSE DO;
19261 +            _NODE_  =                   68;
19262 +            _LEAF_  =                   35;
19263 +            P_target101  =     0.29411764705882;
19264 +            P_target100  =     0.70588235294117;
19265 +            Q_target101  =     0.29411764705882;
19266 +            Q_target100  =     0.70588235294117;
19267 +            V_target101  =     0.16666666666666;
19268 +            V_target100  =     0.83333333333333;
19269 +            I_target10  = '0' ;
19270 +            U_target10  =                    0;
19271 +            END;
19272 +          END;
19273 +        ELSE DO;
19274 +          _ARBFMT_10 = PUT( Tipo_di_unita , $10.);
19275 +           %DMNORMIP( _ARBFMT_10);
19276 +          IF _ARBFMT_10 IN ('POSTERIORE' ) THEN DO;
19277 +            _NODE_  =                   70;
19278 +            _LEAF_  =                   37;
19279 +            P_target101  =     0.70588235294117;
19280 +            P_target100  =     0.29411764705882;
19281 +            Q_target101  =     0.70588235294117;
19282 +            Q_target100  =     0.29411764705882;
19283 +            V_target101  =     0.58333333333333;
19284 +            V_target100  =     0.41666666666666;
19285 +            I_target10  = '1' ;
19286 +            U_target10  =                    1;
19287 +            END;
19288 +          ELSE DO;
19289 +            IF  NOT MISSING(REP_Cilindrata ) AND
19290 +              REP_Cilindrata  <                 1417 THEN DO;
19291 +              _ARBFMT_17 = PUT( Alimentazione , $17.);
19292 +               %DMNORMIP( _ARBFMT_17);
19293 +              IF _ARBFMT_17 IN ('BENZINA' ) THEN DO;
19294 +                _NODE_  =                  102;
19295 +                _LEAF_  =                   38;
19296 +                P_target101  =     0.33333333333333;
19297 +                P_target100  =     0.66666666666666;
19298 +                Q_target101  =     0.33333333333333;
19299 +                Q_target100  =     0.66666666666666;
19300 +                V_target101  =                  0.2;
19301 +                V_target100  =                  0.8;
19302 +                I_target10  = '0' ;
19303 +                U_target10  =                    0;
19304 +                END;
19305 +              ELSE DO;
19306 +                _NODE_  =                  103;
19307 +                _LEAF_  =                   39;
19308 +                P_target101  =                    0;
19309 +                P_target100  =                    1;
19310 +                Q_target101  =                    0;
19311 +                Q_target100  =                    1;
19312 +                V_target101  =                    0;
19313 +                V_target100  =                    1;
19314 +                I_target10  = '0' ;
19315 +                U_target10  =                    0;
19316 +                END;
19317 +              END;
19318 +            ELSE DO;
19319 +              IF  NOT MISSING(REP_price ) AND
19320 +                REP_price  <                31850 THEN DO;
19321 +                _NODE_  =                  104;
19322 +                _LEAF_  =                   40;
19323 +                P_target101  =     0.44554455445544;
19324 +                P_target100  =     0.55445544554455;
19325 +                Q_target101  =     0.44554455445544;
19326 +                Q_target100  =     0.55445544554455;
19327 +                V_target101  =     0.47619047619047;
19328 +                V_target100  =     0.52380952380952;
19329 +                I_target10  = '0' ;
19330 +                U_target10  =                    0;
19331 +                END;
19332 +              ELSE DO;
19333 +                _NODE_  =                  105;
19334 +                _LEAF_  =                   41;
19335 +                P_target101  =     0.16981132075471;
19336 +                P_target100  =     0.83018867924528;
19337 +                Q_target101  =     0.16981132075471;
19338 +                Q_target100  =     0.83018867924528;
19339 +                V_target101  =     0.18309859154929;
19340 +                V_target100  =      0.8169014084507;
19341 +                I_target10  = '0' ;
19342 +                U_target10  =                    0;
19343 +                END;
19344 +              END;
19345 +            END;
19346 +          END;
19347 +        END;
19348 +      END;
19349 +    END;
19350 +  END;
19351 +
19352 +*****  RESIDUALS R_ *************;
19353 +IF  F_target10  NE '1'
19354 +AND F_target10  NE '0'  THEN DO;
19355 +        R_target101  = .;
19356 +        R_target100  = .;
19357 + END;
19358 + ELSE DO;
19359 +       R_target101  =  -P_target101 ;
19360 +       R_target100  =  -P_target100 ;
19361 +       SELECT( F_target10  );
19362 +          WHEN( '1'  ) R_target101  = R_target101  +1;
19363 +          WHEN( '0'  ) R_target100  = R_target100  +1;
19364 +       END;
19365 + END;
19366 +
19367 +****************************************************************;
19368 +******          END OF DECISION TREE SCORING CODE         ******;
19369 +****************************************************************;
19370 +
19371 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
19372  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Visualizza EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.07 seconds
 
 
19373  quit;
19374  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: Visualizza EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.07 seconds
 
19376  proc sort data=WORK.EM_USER_REPORT;
19377  by ID VIEW;
19378  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
19379  *------------------------------------------------------------*;
19380  * Tree: Computing metadata for TRAIN data;
19381  *------------------------------------------------------------*;
 
NOTE: Visualizza EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.07 seconds
 
19805  data WORK.MODELTEMP_INFO;
19806  set EMWS1.Tree_EMINFO;
19807  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
19808  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19809  data EMWS1.Tree_EMINFO;
19810  length TARGET KEY $32 DATA $43;
19811  input TARGET KEY DATA $;
19812  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19816  run;
19817  data EMWS1.Tree_EMINFO;
19818  set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
19819  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19820  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
19821  by TARGET KEY;
19822  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19823  proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
19824  by TARGET KEY;
19825  run;
 
NOTE: There were 4 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19826  proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
19827  by TARGET KEY;
19828  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19829  data EMWS1.Tree_EMINFO;
19830  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
19831  by TARGET KEY;
19832  run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
19833  proc datasets lib=work nolist;
19834  delete TEMP_INFO SORTEDEMINFO;
19835  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
19836  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Visualizza EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: Visualizza EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.07 seconds
 
*------------------------------------------------------------*
* Log dei report
Data:               25 ottobre 2020
Ora:                22:52:16
*------------------------------------------------------------*
19860  data EMWS1.Tree_EMOUTFIT;
19861  set EMWS1.Tree_EMOUTFIT;
19862  length TargetLabel $200;
19863  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
19864  if upcase(TARGET) eq "TARGET10" then TargetLabel = 'target10';
19865  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19866  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
19867  by TARGET;
19868  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19869  %let _EMwarndup = 0;
19870  %let _EMtargetdup =;
19871  %let _EMASEtargetdup =;
19872  data _null_;
19873  set EMWS1.Tree_EMOUTFIT;
19874  if .<_ASE_<0.000001 then do;
19875  call symput('_EMwarndup', '1');
19876  call symput('_EMtargetdup', target);
19877  call symput('_EMASEtargetdup', put(_ASE_, best.));
19878  end;
19879  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19880  %let EMEXCEPTIONSTRING=;
19881  *------------------------------------------------------------*;
19882  * REPORT: Tree;
19883  *------------------------------------------------------------*;
19884  %let EM_ACTION = REPORT;
19885  %let syscc = 0;
19886  %macro main;
19887
19888    %if %upcase(&EM_ACTION) = CREATE %then %do;
19889      filename temp catalog 'sashelp.emmodl.tree_create.source';
19890      %include temp;
19891      filename temp;
19892
19893      %em_tree_create;
19894    %end;
19895
19896     %else
19897     %if %upcase(&EM_ACTION) = TRAIN %then %do;
19898
19899         filename temp catalog 'sashelp.emmodl.tree_train.source';
19900         %include temp;
19901         filename temp;
19902         %em_tree_train;
19903     %end;
19904
19905    %else
19906    %if %upcase(&EM_ACTION) = SCORE %then %do;
19907      filename temp catalog 'sashelp.emmodl.tree_score.source';
19908      %include temp;
19909      filename temp;
19910
19911      %em_tree_score;
19912
19913    %end;
19914
19915    %else
19916    %if %upcase(&EM_ACTION) = REPORT %then %do;
19917
19918         filename temp catalog 'sashelp.emmodl.tree_report.source';
19919         %include temp;
19920         filename temp;
19921
19922         %em_tree_report;
19923     %end;
19924
19925    %else
19926    %if %upcase(&EM_ACTION) = OPENINT %then %do;
19927
19928         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19929         %include temp;
19930         filename temp;
19931         %EM_TREE_OPENTREEVIEWER;
19932
19933     %end;
19934
19935    %else
19936    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19937
19938         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19939         %include temp;
19940         filename temp;
19941         %EM_TREE_CLOSETREEVIEWER;
19942
19943     %end;
19944
19945
19946     %doendm:
19947  %mend main;
19948
19949  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
19951 +%macro em_tree_makePlotDs( multipleTar= );
19953 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19954 +  %EM_GETNAME(key=OUTNODES, type=DATA);
19955 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19956 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19958 +  /* determine if validation statistics will be displayed */
19959 +  %let validflag=N;
19960 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19961 +    /* determine if validation data exists */
19962 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19963 +      %let validflag=Y;
19964 +    %end;
19965 +  %end;
19967 +   /* retrieve name of decmeta even in presence of multiple targets */
19968 +   %let decmeta = ;
19969 +   %if &EM_DEC_DECMETA eq %then %do;
19970 +     data _Target;
19971 +       set &em_data_variableset;
19972 +       where ROLE='TARGET' and USE in('D', 'Y');
19973 +       keep NAME;
19974 +     run;
19975 +     proc sort data=_Target;
19976 +       by NAME;
19977 +     run;
19978 +     proc sort data=EM_TARGETDECINFO;
19979 +       by TARGET;
19980 +     run;
19981 +     data _Target;
19982 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19983 +       by NAME;
19984 +       if _a then do;
19985 +         call symput('decmeta', trim(DECMETA));
19986 +       end;
19987 +     run;
19988 +     proc delete data=_Target;run;
19989 +   %end;
19990 +   %else %let decmeta = &EM_DEC_DECMETA;
19993 +  /* retrieve targetEvent from decmeta */
19994 +  %let targetEvent=;
19995 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19996 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19997 +      data _null_;
19998 +       set &DECMETA(where=(_TYPE_="TARGET"));
19999 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
20000 +      run;
20001 +    %end;
20002 +  %end;
20004 +  /* retrieve predicted var for targetEvent from decmeta */
20005 +  %let predTarget=;
20006 +  %let predLvl=;
20007 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20008 +    %if %sysfunc(exist(&DECMETA)) %then %do;
20009 +      data _null_;
20010 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
20011 +       call symput('predTarget', strip(VARIABLE));
20012 +       call symput('predLvl', strip(LEVEL));
20013 +      run;
20014 +    %end;
20015 +  %end;
20016 +  %else %do;
20017 +    %if %sysfunc(exist(&DECMETA)) %then %do;
20018 +      data _null_;
20019 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
20020 +       call symput('predTarget', strip(VARIABLE));
20021 +      run;
20022 +    %end;
20023 +  %end;
20025 +  /* create BelowText value */
20026 +  data belowtext;
20027 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
20028 +    keep node belowtext;
20029 +  run;
20031 +  /* replace belowtext with variable label if it exists */
20032 +  data belowtext2;
20033 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
20034 +    keep node belowtextlbl;
20035 +  run;
20037 +  proc sort data=belowtext; by node; run;
20038 +  proc sort data=belowtext2; by node; run;
20040 +  data belowtext;
20041 +    merge belowtext belowtext2(in=_a);
20042 +    by node;
20043 +    if _a then belowtext=belowtextlbl;
20044 +    keep node belowtext;
20045 +  run;
20047 +  /* create AboveText value */
20048 +  data abovetext;
20049 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
20050 +  run;
20051 +  proc sort data=abovetext; by node numeric_value; run;
20053 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
20054 +  data abovetext;
20055 +    set abovetext(rename=(node=parent));
20056 +    by parent numeric_value;
20057 +    retain abovetext tempstring flag branch origval origchar ;
20058 +    length abovetext $256;
20059 +    length tempstring origchar $64;
20061 +    if STAT in ("INTERVAL", "ORDINAL") then do;
20062 +      if first.parent then do;
20063 +        if missing(character_value) then do;
20064 +          numeric_value = round(numeric_value, &sp_precision);
20065 +          abovetext = "< "||strip(NUMERIC_VALUE);
20066 +          branch = 1;
20067 +          origval = numeric_value;
20068 +          output;
20069 +        end;
20070 +        else do;
20071 +          abovetext = "< "||strip(CHARACTER_VALUE);
20072 +          branch = 1;
20073 +          origchar = character_value;
20074 +          output;
20075 +        end;
20077 +        if first.parent AND last.parent then do;
20078 +          if missing(character_value) then do;
20079 +            numeric_value = round(numeric_value, &sp_precision);
20080 +            branch = branch + 1;
20081 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20082 +            output;
20083 +          end;
20084 +          else do;
20085 +            branch = branch + 1;
20086 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20087 +            output;
20088 +          end;
20089 +        end;
20090 +      end;
20091 +      else if last.parent then do;
20092 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
20093 +          if missing(character_value) then do;
20094 +            numeric_value = round(numeric_value, &sp_precision);
20095 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
20096 +          end;
20097 +          else do;
20098 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
20099 +          end;
20100 +          branch = branch + 1;
20101 +          output;
20103 +          if missing(character_value) then do;
20104 +            numeric_value = round(numeric_value, &sp_precision);
20105 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20106 +          end;
20107 +          else do;
20108 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20109 +          end;
20110 +          branch = branch + 1;
20111 +          output;
20112 +        end;
20113 +        else do;
20114 +          if missing(character_value) then do;
20115 +            numeric_value = round(numeric_value, &sp_precision);
20116 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20117 +          end;
20118 +          else do;
20119 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20120 +          end;
20121 +          branch = branch + 1;
20122 +          output;
20123 +        end;
20124 +      end;
20125 +      else do;
20126 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
20127 +          if missing(character_value) then do;
20128 +            numeric_value = round(numeric_value,&sp_precision);
20129 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
20130 +            origval = numeric_value;
20131 +          end;
20132 +          else do;
20133 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
20134 +            origchar = character_value;
20135 +          end;
20136 +          branch = branch + 1;
20137 +          output;
20139 +        end;
20140 +        else do;
20141 +          if missing(character_value) then do;
20142 +            numeric_value = round(numeric_value, &sp_precision);
20143 +            abovetext = ">= "||strip(NUMERIC_VALUE);
20144 +            origval = numeric_value;
20145 +          end;
20146 +          else do;
20147 +            abovetext = ">= "||strip(CHARACTER_VALUE);
20148 +            origval = character_value;
20149 +          end;
20150 +          branch = branch + 1;
20151 +          output;
20152 +        end;
20153 +      end;
20154 +    end;
20155 +    else do;
20156 +       if first.numeric_value then do;
20157 +         flag = 0;
20158 +         abovetext = strip(CHARACTER_VALUE);
20159 +         branch = numeric_value;
20160 +         if first.numeric_value AND last.numeric_value then do;
20161 +           output;
20162 +         end;
20163 +       end;
20164 +       else if last.numeric_value then do;
20165 +         if flag=0 then do;
20166 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20167 +           length = length(strip(tempstring));
20168 +           if length < 32 then do;
20169 +             abovetext = strip(tempstring);
20170 +           end;
20171 +           else do;
20172 +             abovetext = strip(abovetext)||", ...";
20173 +             flag = 1;
20174 +           end;
20175 +         end;
20176 +         branch = numeric_value;
20177 +         output;
20178 +       end;
20179 +       else do;
20180 +         if flag=0 then do;
20181 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
20182 +           length = length(strip(tempstring));
20183 +           if length < 32 then do;
20184 +             abovetext = strip(tempstring);
20185 +           end;
20186 +           else do;
20187 +             abovetext = strip(abovetext)||", ...";
20188 +             flag=1;
20189 +           end;
20190 +         end;
20191 +         branch = numeric_value;
20192 +       end;
20193 +    end;
20194 +    keep parent branch abovetext;
20195 +  run;
20197 +  /* Missing value to abovetext */
20198 +  data tempmissing;
20199 +    set &EM_USER_OUTRULES;
20200 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
20201 +    rename node=parent numeric_value=branch character_value=misschar;
20202 +  run;
20205 +  proc sort data=abovetext; by parent branch; run;
20206 +  proc sort data=tempmissing; by parent branch; run;
20207 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
20209 +  data tempoutnodes;
20210 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
20211 +    by parent branch;
20212 +    length traintotal validtotal 8;
20213 +    retain traintotal validtotal;
20215 +    if _a then do;
20216 +      if ^MISSING(abovetext) then do;
20217 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
20218 +      end;
20219 +      else do;
20220 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
20221 +      end;
20222 +    end;
20223 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
20225 +    if node=1 then do;
20226 +      traintotal = N;
20227 +      validtotal=VN;
20228 +    end;
20230 +    drop role rank stat misschar belowtext;
20231 +  run;
20232 +  proc sort data=tempoutnodes; by node; run;
20233 +  proc sort data=belowtext; by node; run;
20235 +  data tempoutnodes;
20236 +    merge tempoutnodes belowtext;
20237 +    by node;
20239 +  run;
20241 +  /* determine if adjusted counts exists; if so, use these vs true counts */
20242 +  %let adjusted = N;
20243 +  %let npriors = 0;
20244 +  data _null_ ;
20245 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
20246 +    if eof then do ;
20247 +      call symput("npriors" , strip(put(_N_,best.))) ;
20248 +    end;
20249 +  run;
20250 +  %if &npriors gt 0 %then %let adjusted=Y;
20253 +  /* create a table with targetUsed and targetLevel columns for each node */
20254 +  data temptarmeta;
20255 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
20256 +    %if &multipleTar eq N %then %do;
20257 +      AND USE in ('D', 'Y')
20258 +    %end;
20259 +    ));
20260 +    length TARGET $32;
20261 +    Target=name;
20262 +    keep target level;
20263 +  run;
20265 +  %if &multipleTar eq Y %then %do;
20266 +    data temptargetused;
20267 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
20268 +      keep node target;
20269 +    run;
20270 +    proc sort data=temptargetused; by target; run;
20271 +    proc sort data=temptarmeta; by target; run;
20272 +    data temptargetused;
20273 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
20274 +      by target;
20275 +      if _a and _b;
20276 +    run;
20277 +  %end;
20278 +  %else %do;
20279 +    data temptargetused;
20280 +      set &EM_USER_OUTSTATS;
20281 +      length target $32 tarlevel $10;
20282 +      target="%EM_TARGET";
20283 +      tarlevel="%EM_TARGET_LEVEL";
20284 +      keep node target tarlevel;
20285 +    run;
20286 +    proc sort data=temptargetused nodupkey; by node; run;
20287 +  %end;
20289 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
20290 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
20291 +  proc sort data=temptargetused; by node; run;
20294 +  /* create tables for all interval targets as well as all class targets */
20295 +  data tempinterval tempclass;
20296 +    merge tempoutstats temptargetused( rename=(target=targetused));
20297 +    by node;
20298 +    %if "&multipleTar" eq "Y" %then %do;
20299 +      if ((missing(Target)) OR (target=targetused ));
20300 +    %end;
20302 +    if tarlevel="INTERVAL" then output tempinterval;
20303 +    else output tempclass;
20304 +  run;
20306 +  /* initialize intTarget and classTarget flags */
20307 +  %let em_intNobs =0;
20308 +  %let em_classNobs = 0;
20309 +  %let em_intTarget= N;
20310 +  %let em_classTarget= N;
20312 +  proc sql;
20313 +    reset noprint;
20314 +    select count(*) into :em_intNobs from tempinterval;
20315 +  quit;
20316 +  proc sql;
20317 +    reset noprint;
20318 +    select count(*) into :em_classNobs from tempclass;
20319 +  quit;
20321 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
20322 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
20324 +  /* retrieve all information for interval targets */
20325 +  %if &em_intTarget eq Y %then %do;
20327 +    /* determine if leaf variable exists */
20328 +    %let dsid=%sysfunc(open(tempinterval,i));
20329 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
20330 +    %let rc=%sysfunc(close(&dsid));
20332 +    proc transpose data=tempinterval
20333 +      %if &leafexists %then %do;
20334 +        (drop=leaf)
20335 +      %end;
20336 +      %if &validexist %then %do;
20337 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
20338 +      %end;
20339 +      %else %do;
20340 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
20341 +      %end;
20342 +      by node;
20343 +      id statname;
20344 +    run;
20345 +    data tempinterval;
20346 +      set tempinterval;
20347 +      if missing(N) then delete;
20348 +    run;
20349 +  %end;
20351 +  /* retrieve all information for class targets */
20352 +  %if &em_classTarget eq Y %then %do;
20353 +    proc sort data=tempclass; by node category; run;
20354 +    %if &validflag eq N %then %do;
20355 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
20356 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
20357 +    %end;
20358 +    %else %do;
20359 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
20360 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
20361 +    %end;
20362 +      set tempclass;
20364 +      %if &validflag eq N %then %do;
20365 +        %if "&adjusted" eq "N" %then %do;
20366 +          if statname="N" then output tempn;
20367 +        %end;
20368 +        %else %do;
20369 +          if statname="NPRIORS" then output tempn;
20370 +        %end;
20371 +        else if statname="PREDICTION" then output temppredict;
20372 +        else if statname="PROBABILITY" then output tempprob;
20373 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
20374 +        else if statname="ALTERNATIVE LOSS" then output temploss;
20375 +      %end;
20376 +      %else %do;
20377 +        %if "&adjusted" eq "N" %then %do;
20378 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
20379 +        %end;
20380 +        %else %do;
20381 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
20382 +        %end;
20383 +        else if statname="PREDICTION" then output temppredict;
20384 +        else if statname="PROBABILITY" then output tempprob;
20385 +        else if statname="VALID: PROBABILITY" then output tempvprob;
20386 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
20387 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
20388 +      %end;
20389 +    run;
20392 +    /* determine if profit/loss exists in tempprofit */
20393 +    %let em_profitflag=0;
20394 +    %let em_lossflag=0;
20395 +    proc sql;
20396 +      reset noprint;
20397 +      select count(*) into :em_profitflag from tempprofit;
20398 +    quit;
20399 +    proc sql;
20400 +      reset noprint;
20401 +      select count(*) into :em_lossflag from temploss;
20402 +    quit;
20404 +    %if &validFlag eq Y %then %do;
20405 +      proc transpose data=tempn
20406 +        %if "&adjusted" eq "N" %then %do;
20407 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
20408 +        %end;
20409 +        %else %do;
20410 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
20411 +        %end;
20412 +        by node;
20413 +        id statname;
20414 +      run;
20415 +      %if &em_profitflag ne 0 %then %do;
20416 +        proc transpose data=tempprofit out=tempprofit;
20417 +          by node category;
20418 +          id statname ;
20419 +        run;
20420 +      %end;
20421 +      %if &em_lossflag ne 0 %then %do;
20422 +        proc transpose data=temploss out=temploss;
20423 +          by node category;
20424 +          id statname ;
20425 +        run;
20426 +      %end;
20427 +      data tempprob;
20428 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
20429 +        by node
20430 +        %if &multipleTar eq Y %then %do;
20431 +          target
20432 +        %end;
20433 +        category;
20434 +      run;
20435 +    %end;
20437 +    /* store percentcorrect value */
20438 +    data temppredict;
20439 +      merge tempprob temppredict(in=_a);
20440 +      by node category;
20441 +      if _a then do;
20442 +        percentCorrect = statvalue;
20443 +        %if &validFlag eq Y %then %do;
20444 +          vpercentCorrect= vstatvalue;
20445 +        %end;
20446 +      end;
20447 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
20448 +      %if &validFlag eq Y %then %do;
20449 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
20450 +      %end;
20451 +      ;
20452 +      if missing(percentCorrect) then delete;
20453 +      drop target;
20454 +    run;
20456 +    /* build profittext */
20457 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20458 +      data tempprofittext(keep= node profittext profitloss);
20459 +        length profittext $800 profitloss 8.;
20460 +        retain profittext profitloss;
20462 +        merge tempprob
20463 +        %if &em_profitflag ne 0 %then %do;
20464 +          tempprofit
20465 +        %end;
20466 +        %else %if &em_lossflag ne 0 %then %do;
20467 +          temploss
20468 +        %end;
20469 +        ;
20470 +        by node category;
20472 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20473 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
20474 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
20475 +          %let profittype = ALL;
20476 +        %end;
20478 +        /* create the profitloss variable for nodecolor if selected */
20479 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
20481 +        %if "&profittype" eq "ALL" %then %do;
20482 +          if strip(CATEGORY)="&targetEvent" then do;
20483 +            profitloss=statvalue;
20484 +          end;
20485 +          if first.node then do;
20486 +            %if &validFlag eq N %then %do;
20487 +             %if &em_profitflag ne 0 %then %do;
20488 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20489 +             %end;
20490 +             %if &em_lossflag ne 0 %then %do;
20491 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20492 +             %end;
20493 +            %end;
20494 +            %else %do;
20495 +             %if &em_profitflag ne 0 %then %do;
20496 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20496!+;
20497 +             %end;
20498 +             %if &em_lossflag ne 0 %then %do;
20499 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20500 +             %end;
20501 +            %end;
20502 +          end;
20503 +          else if last.node then do;
20504 +            %if &validFlag eq N %then %do;
20505 +             %if &em_profitflag ne 0 %then %do;
20506 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20507 +             %end;
20508 +             %if &em_lossflag ne 0 %then %do;
20509 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20510 +             %end;
20511 +             /*if CATEGORY="&targetEvent" then do;
20512 +               profitloss=statvalue;
20513 +             end;*/
20514 +            %end;
20515 +            %else %do;
20516 +             %if &em_profitflag ne 0 %then %do;
20517 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20517!+14.&EM_PROPERTY_SPLITPRECISION);
20518 +                if CATEGORY="&targetEvent" then do;
20519 +                 profitloss=ALTERNATIVE_PROFIT;
20520 +                end;
20521 +             %end;
20522 +             %if &em_lossflag ne 0 %then %do;
20523 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20523!+14.&EM_PROPERTY_SPLITPRECISION);
20524 +                if CATEGORY="&targetEvent" then do;
20525 +                  profitloss=ALTERNATIVE_LOSS;
20526 +                end;
20527 +             %end;
20528 +            %end;
20529 +            output;
20530 +          end;
20531 +          else do;
20532 +            %if &validFlag eq N %then %do;
20533 +             %if &em_profitflag ne 0 %then %do;
20534 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20535 +             %end;
20536 +             %if &em_lossflag ne 0 %then %do;
20537 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20538 +             %end;
20539 +            %end;
20540 +            %else %do;
20541 +             %if &em_profitflag ne 0 %then %do;
20542 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20542!+14.&EM_PROPERTY_SPLITPRECISION);
20543 +             %end;
20544 +             %if &em_lossflag ne 0 %then %do;
20545 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20545!+14.&EM_PROPERTY_SPLITPRECISION);
20546 +             %end;
20547 +            %end;
20548 +          end;
20549 +        %end;
20550 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20551 +          if strip(CATEGORY) = "&targetevent" then do;
20552 +            %if &validFlag eq N %then %do;
20553 +             %if &em_profitflag ne 0 %then %do;
20554 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20555 +             %end;
20556 +             %if &em_lossflag ne 0 %then %do;
20557 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20558 +             %end;
20559 +             profitloss=statvalue;
20560 +            %end;
20561 +            %else %do;
20562 +             %if &em_profitflag ne 0 %then %do;
20563 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20563!+;
20564 +                profitloss=ALTERNATIVE_PROFIT;
20565 +             %end;
20566 +             %if &em_lossflag ne 0 %then %do;
20567 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20568 +                profitloss=ALTERNATIVE_LOSS;
20569 +             %end;
20570 +            %end;
20571 +            output;
20572 +          end;
20573 +        %end;
20574 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
20575 +          if strip(CATEGORY) = "&targetevent" then do;
20576 +            %if &validFlag eq N %then %do;
20577 +             profitloss=statvalue;
20578 +            %end;
20579 +            %else %do;
20580 +             %if &em_profitflag ne 0 %then %do;
20581 +                profitloss=ALTERNATIVE_PROFIT;
20582 +             %end;
20583 +             %if &em_lossflag ne 0 %then %do;
20584 +                profitloss=ALTERNATIVE_LOSS;
20585 +             %end;
20586 +            %end;
20587 +            output;
20588 +          end;
20589 +        %end;
20590 +      run;
20591 +    %end;
20593 +    data tempprob(keep= node probtext);
20594 +      length probtext $800;
20595 +      retain probtext;
20596 +      set tempprob ;
20597 +      by node;
20599 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20600 +      %let probtype = &EM_PROPERTY_TARGET;
20601 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
20602 +        %let probtype = ALL;
20603 +      %end;
20605 +      %if "&probtype" eq "ALL" %then %do;
20606 +        if first.node then do;
20607 +          %if &validFlag eq N %then %do;
20608 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20609 +          %end;
20610 +          %else %do;
20611 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20612 +          %end;
20613 +        end;
20614 +        else if last.node then do;
20615 +          %if &validFlag eq N %then %do;
20616 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20617 +          %end;
20618 +          %else %do;
20619 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20620 +          %end;
20621 +          output;
20622 +        end;
20623 +        else do;
20624 +          %if &validFlag eq N %then %do;
20625 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20626 +          %end;
20627 +          %else %do;
20628 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20629 +          %end;
20630 +        end;
20631 +      %end;
20632 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20633 +        if strip(CATEGORY) = "&targetevent" then do;
20634 +          %if &validFlag eq N %then %do;
20635 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20636 +          %end;
20637 +          %else %do;
20638 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20639 +          %end;
20640 +          output;
20641 +        end;
20642 +      %end;
20643 +      %else %if "&probtype" eq "NONE" %then %do;
20644 +        if last.node then do;
20645 +          output;
20646 +        end;
20647 +      %end;
20648 +    run;
20649 +  %end;
20651 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
20653 +  %let oldexists=0;
20654 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
20655 +     data old_tree_plot;
20656 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
20657 +        rename nodecolor=oldnodecolor;
20658 +     run;
20660 +     proc sort data=old_tree_plot;
20661 +        by node;
20662 +     run;
20664 +     %let oldexists=1;
20665 +  %end;
20667 +  data &EM_USER_TREE_PLOT;
20668 +    length textall $800;
20669 +    merge tempoutnodes temptargetused
20671 +    %if &em_intTarget eq Y %then %do;
20672 +      tempinterval
20673 +    %end;
20675 +    %if &em_classTarget eq Y %then %do;
20677 +      %if &validFlag eq N %then %do;
20678 +        tempn(rename=(statvalue=N))
20679 +      %end;
20680 +      %else %do;
20681 +        tempn
20682 +      %end;
20684 +      temppredict tempprob
20686 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20687 +        tempprofittext
20688 +      %end;
20689 +    %end;
20690 +    ;
20691 +    by node;
20693 +    /* build nodetext based on user selection */
20694 +    textall="";
20696 +    %if &em_intTarget eq Y %then %do;
20697 +    if tarlevel="INTERVAL" then do;
20698 +      /* Nodeid */
20699 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20700 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20701 +      %end;
20703 +      /* Target identifier if multiple targets are used */
20704 +      %if "&multipleTar" eq "Y" %then %do;
20705 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20706 +      %end;
20708 +      %if &validFlag eq Y %then %do;
20709 +         /* Column labels displayed in validflag eq Y only */
20710 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20711 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20711!+noquote ))";
20712 +         %end;
20714 +         /* Average values */
20715 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20716 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20717 +         %end;
20719 +         /* RASE */
20720 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20721 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
20722 +         %end;
20724 +         /* Count */
20725 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20726 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
20727 +         %end;
20728 +      %end;
20729 +      %else %do;
20730 +         /* Average values */
20731 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20732 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20733 +         %end;
20735 +         /* RASE */
20736 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20737 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
20738 +         %end;
20740 +         /* Count */
20741 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20742 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
20743 +         %end;
20744 +      %end;
20746 +      /* nodecolor */
20747 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
20748 +        nodecolor=PREDICTION;
20749 +      %end;
20750 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
20751 +        nodecolor=RASE;
20752 +      %end;
20753 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
20754 +        nodecolor=1;
20755 +      %end;
20757 +    end;
20758 +    %end;
20759 +    %if &em_classTarget eq Y %then %do;
20760 +    if tarlevel^="INTERVAL" then  do;
20762 +      /* Nodeid */
20763 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20764 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20765 +      %end;
20766 +      /* Target identifier if multiple targets are used */
20767 +      %if "&multipleTar" eq "Y" %then %do;
20768 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20769 +      %end;
20771 +      /* Predicted values */
20772 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
20773 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
20774 +      %end;
20776 +      /* Column labels displayed in validflag eq Y only */
20777 +      %if "&ValidFlag" eq "Y" %then %do;
20778 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20779 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20779!+noquote ))";
20780 +        %end;
20781 +      %end;
20783 +      /* Target Values */
20784 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
20785 +        textall=strip(textall)||"0A"x||strip(probtext);
20786 +      %end;
20788 +      /* include profit or loss for all target levels */
20789 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
20790 +        textall=strip(textall)||"0A"x||strip(profittext);
20791 +      %end;
20793 +      %if &validFlag eq N %then %do;
20794 +        /* Percent Correct */
20795 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20796 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
20797 +        %end;
20799 +         /* Count */
20800 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20801 +          %if "&adjusted" eq "N" %then %do;
20802 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
20803 +          %end;
20804 +          %else %do;
20805 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
20806 +          %end;
20807 +         %end;
20808 +      %end;
20809 +      %else %do;
20810 +        /* Percent Correct */
20811 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20812 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
20813 +        %end;
20815 +         /* Count */
20816 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20817 +          %if "&adjusted" eq "N" %then %do;
20818 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
20819 +          %end;
20820 +          %else %do;
20821 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
20822 +          %end;
20823 +         %end;
20824 +      %end;
20826 +      /* nodecolor */
20827 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
20828 +       %if &multipleTar ne Y %then %do;
20829 +        nodecolor=&predTarget;
20830 +       %end;
20831 +       %else %do;
20832 +         nodecolor=percentcorrect;
20833 +       %end;
20834 +      %end;
20835 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
20836 +        nodecolor=percentcorrect;
20837 +      %end;
20838 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
20839 +        nodecolor=1;
20840 +      %end;
20841 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
20842 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
20843 +          nodecolor=percentcorrect;
20844 +        %end;
20845 +        %else %do;
20846 +          nodecolor=profitloss;
20847 +        %end;
20848 +      %end;
20850 +    end;
20851 +    %end;
20852 +    %if &em_intTarget eq Y %then %do;
20853 +     drop  PREDICTION  TARGET TARLEVEL
20854 +     %if &ValidFlag eq Y %then %do;
20855 +         VPREDICTION
20856 +     %end;
20857 +     ;
20858 +    %end;
20859 +    %if &em_classTarget eq Y %then %do;
20860 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
20861 +     %if &ValidFlag eq Y %then %do;
20862 +         VSTATVALUE
20863 +     %end;
20864 +     ;
20865 +    %end;
20867 +  run;
20869 +  /* add leaf index information to plotds - based on primary target only*/
20870 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20871 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20872 +      set &EM_USER_OUTSTATS;
20873 +      if ((statname="PROBABILITY"
20874 +      %if &validexist %then %do;
20875 +       or statname="VALID: PROBABILITY"
20876 +      %end;
20877 +      ) AND (CATEGORY="&TARGETEVENT")
20878 +      %if "&multipleTar" eq "Y" %then %do;
20879 +        AND (Target="%EM_TARGET")
20880 +      %end;
20881 +      );
20882 +    run;
20884 +    %if &validexist %then %do;
20885 +      proc sort data=tempprob; by node; run;
20886 +      %let vpredTarget = V%substr(&predTarget, 2);
20887 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
20888 +         by node;
20889 +         id statname;
20890 +      run;
20891 +    %end;
20892 +  %end;
20893 +  %else %do;
20894 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20895 +      set &EM_USER_OUTSTATS;
20896 +      if ((statname="PREDICTION"
20897 +      %if &validexist %then %do;
20898 +       or statname="VALID: PREDICTION"
20899 +      %end;
20900 +      )
20901 +      %if "&multipleTar" eq "Y" %then %do;
20902 +        AND (Target="%EM_TARGET")
20903 +      %end;
20904 +      );
20905 +    run;
20906 +    %if &validexist %then %do;
20907 +      proc sort data=tempprob; by node; run;
20908 +      %let vpredTarget = V%substr(&predTarget, 2);
20909 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
20910 +         by node;
20911 +         id statname;
20912 +      run;
20913 +    %end;
20914 +  %end;
20916 +  proc sort data=tempprob; by node; run;
20917 +  data tempoutnodes;
20918 +    merge tempoutnodes tempprob;
20919 +    by node;
20920 +  run;
20922 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
20923 +  data tempnodes;
20924 +    retain traintotal validtotal;
20925 +    set tempnodes(where=(leaf ne . ));
20926 +    tprob=round(&predTarget, .01);
20927 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20928 +      percevent_train=round(tprob*100, .01);
20929 +    %end;
20930 +    %else %do;
20931 +      percevent_train=tprob;
20932 +    %end;
20934 +    perc_train=round((n/traintotal)*100, 0.01);
20935 +    /* leafwidth already has a *10 multiplier */
20936 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
20938 +    %if &validexist %then %do;
20939 +      %let vpredTarget = V%substr(&predTarget,2);
20940 +      vprob=round(&vpredTarget, .01);
20941 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20942 +        percevent_valid=round(vprob*100, .01);
20943 +      %end;
20944 +      %else %do;
20945 +        percevent_valid=vprob;
20946 +      %end;
20947 +      perc_valid=round((vn/validtotal)*100, .01);
20948 +    %end;
20950 +    index=_N_;
20951 +    keep node index tprob perc_train percevent_train
20952 +    %if &validexist %then %do;
20953 +        vprob percevent_valid perc_valid
20954 +    %end;
20955 +    ;
20956 +  run;
20957 +  proc sort data=tempnodes; by node; run;
20958 +  data &EM_USER_TREE_PLOT;
20959 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20960 +    by node;
20961 +    if missing(node) then delete;
20962 +    %if &oldexists %then %do;
20963 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20964 +      drop oldnodecolor;
20965 +    %end;
20966 +    abovetext = compbl(abovetext);
20968 +    /* add variable labels */
20969 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20970 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20971 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20972 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20973 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20974 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20976 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20977 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20978 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20979 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20980 +          %end;
20981 +          %else %do;
20982 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20983 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20984 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20985 +          %end;
20986 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20988 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20989 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20990 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20991 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20992 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20993 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20994 +          %end;
20995 +          %else %do;
20996 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20997 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20998 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20999 +          %end;
21000 +    ;
21001 +  run;
21003 +  /* delete temporary tables */
21004 +  proc datasets lib=work nolist;
21005 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
21006 +  run;
21008 +%mend em_tree_makePlotDs;
21012 +%macro em_tree_report;
21014 +   /* report properties */
21015 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
21016 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
21017 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
21018 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
21019 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
21020 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
21021 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
21022 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
21023 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
21024 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
21025 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
21026 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
21027 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
21029 +   %let validexist=0;
21030 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
21031 +     %let validexist=1;
21032 +   %end;
21034 +   /* determine if multiple targets will be processed */
21035 +   %let em_tree_multipleTargets=N;
21036 +   %let em_tree_numTarget=1;
21037 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
21038 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
21039 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
21040 +         %let em_tree_multipleTargets=N;
21041 +      %end;
21042 +      %else %do;
21043 +        data _null_;
21044 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
21045 +          if eof then
21046 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
21047 +        run;
21049 +        %if &em_tree_numTarget gt 1 %then %do;
21050 +           %let em_tree_multipleTargets=Y;
21051 +        %end;
21052 +     %end;
21053 +   %end;
21055 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
21057 +   /* variable importance */
21058 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
21059 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
21061 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
21062 +     /* and the columns may not be generated                                                                                 */
21063 +     %let em_tree_cvexists=;
21064 +     %let em_tree_surrexists=.;
21065 +     data _null_;
21066 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
21067 +       if eof then do ;
21068 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
21069 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
21070 +       end;
21071 +     run;
21073 +     data &EM_USER_OUTIMPORT;
21074 +         set &EM_USER_OUTIMPORT;
21075 +         /* format columns based on Precison value specified */
21076 +         format importance 15.&EM_PROPERTY_PRECISION
21077 +              %if &validexist %then %do;
21078 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
21079 +              %end;
21080 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
21081 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
21082 +              %end;
21083 +         ;
21084 +     run;
21086 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
21087 +     proc print data=&EM_USER_OUTIMPORT
21088 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
21089 +          (where=((nrules>0) OR (nsurrogates>0)))
21090 +        %end;
21091 +        %else %do;
21092 +           (where=(nrules>0))
21093 +        %end;
21094 +        label noobs
21095 +        ;
21096 +     run;
21097 +     title10;
21099 +   %end;
21101 +   /* Sequence */
21102 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
21103 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
21104 +   data _null_ ;
21105 +      set &EM_USER_outseq (obs=2) end=eof ;
21106 +      if eof then do ;
21107 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
21108 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
21109 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
21110 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
21111 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
21112 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
21113 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
21114 +      end;
21115 +    run;
21117 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
21118 +      data &EM_USER_OUTSEQ;
21119 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
21120 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
21121 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21122 +           _XMISC_=_VMISC_
21123 +        %end;
21124 +        %if "&em_tree_aprof" ne "."  %then %do;
21125 +           _XAPROF_=_VAPROF_
21126 +           _XPROF_ = _VPROF_
21127 +        %end;
21128 +        %if "&em_tree_aloss" ne "."  %then %do;
21129 +           _XALOSS_=_VALOSS_
21130 +        %end;
21131 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
21132 +           _XPASE_ = _VPASE_
21133 +           _XPMISC_ = _VPMISC_
21134 +        %end;
21136 +        ));
21137 +     %end;
21138 +     %else %do;
21139 +        set &EM_USER_OUTSEQ;
21140 +     %end;
21142 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
21143 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21144 +            _MISC_   15.&EM_PROPERTY_PRECISION
21145 +         %end;
21146 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
21147 +            _PASE_  15.&EM_PROPERTY_PRECISION
21148 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
21149 +         %end;
21150 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
21151 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
21152 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21153 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21154 +            %end;
21155 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
21156 +              _VPASE_  15.&EM_PROPERTY_PRECISION
21157 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
21158 +            %end;
21159 +         %end;
21160 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
21161 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
21162 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21163 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
21164 +            %end;
21165 +         %end;
21166 +         %if "&em_tree_seq" ne "." %then %do;
21167 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
21168 +         %end;
21169 +         %if "&em_tree_vseq" ne "." %then %do;
21170 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
21171 +         %end;
21172 +         %if "&em_tree_aprof" ne "." %then %do;
21173 +           _APROF_ 15.&EM_PROPERTY_PRECISION
21174 +           _PROF_ 15.&EM_PROPERTY_PRECISION
21175 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21176 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
21177 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
21178 +           %end;
21179 +         %end;
21180 +         %else %if "&em_tree_aloss" ne "." %then %do;
21181 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
21182 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
21183 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
21184 +           %end;
21185 +         %end;
21186 +      ;
21187 +    run;
21188 +   %end;
21190 +   /* Observation Based Importance */
21191 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
21193 +      /* need to check for 0 obs */
21194 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
21195 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
21196 +      %let rc=%sysfunc(close(&dsid));
21198 +      %if &onobs %then %do;
21199 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
21200 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
21202 +         data &EM_USER_OUTOBSIMP;
21203 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
21204 +           if _a;
21205 +           by _INPUT1_;
21206 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
21207 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21208 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
21209 +                   %end;
21210 +                   ;
21211 +         run;
21212 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
21213 +      %end;
21214 +   %end;
21216 +  %end;
21218 +  /* create dataset to support tree diagram and icicle plot */
21219 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
21220 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
21222 +  /* display tree diagram */
21223 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
21224 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
21226 +  /* display icicle diagram */
21227 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
21228 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
21230 +  /* Leaf Statistics Plot */
21231 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
21233 +  /* print leaf information to output window */
21234 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
21236 +     proc sort data=&EM_USER_TREE_PLOT out=t;
21237 +       by descending N;
21238 +     run;
21240 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
21241 +     %local vn;
21242 +     data _null_;
21243 +       set t (obs=2) end=eof;
21244 +       if eof then do;
21245 +         call symput("vn", strip(put(vn, best.)));
21246 +       end;
21247 +     run;
21249 +     data t;
21250 +       set t;
21251 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
21252 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
21253 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21254 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
21255 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
21256 +       %end;
21257 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21258 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
21259 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21260 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
21261 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
21262 +          %end;
21263 +       %end;
21264 +       ;
21265 +     run;
21267 +     /* determine if rase is found in t */
21268 +    %let dsid=%sysfunc(open(t,i));
21269 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
21270 +    %let rc=%sysfunc(close(&dsid));
21272 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
21273 +     proc print data=t noobs label;
21274 +       where tprob ne .;
21275 +       var node depth N tprob
21276 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
21277 +         %if "&vn" ne "." %then %do;
21278 +           VN
21279 +         %end;
21280 +         vprob
21281 +       %end;
21282 +       %if &raseexists %then %do;
21283 +            RASE
21284 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
21285 +              VRASE
21286 +            %end;
21287 +       %end;
21288 +       ;
21289 +     run;
21290 +     title10;
21291 +  %end;
21293 +  /* create plots that are done during training of node */
21294 +  /* display iterative plot, including reference line */
21295 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
21296 +   /* %if &nleaves eq  %then %do; */
21297 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
21298 +      data _null_;
21299 +        set &EM_USER_OUTTOPOLOGY end=eof;
21300 +        if eof then do;
21301 +          call symput('nleaves', LEAF);
21302 +        end;
21303 +      run;
21304 +   /* %end; */
21306 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
21307 +    /*%EM_REPORT(view=1, Y=_ASE_); */
21308 +  %end;
21310 +  /* display leaf statistics */
21311 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
21313 +  /* stats by node if multiple targets = Y */
21314 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
21315 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
21316 +    data &EM_USER_OUTSTATS;
21317 +      set &EM_USER_OUTSTATS;
21319 +     * if STATNAME="TARGET" then delete;
21320 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
21321 +      drop leaf;
21322 +    run;
21323 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
21325 +  %end;
21326 +  %else %do;
21327 +    /* add outstats and outdescribe to spk but not results */
21328 +    %EM_REPORT(viewtype=, key=OUTSTATS);
21329 +  %end;
21331 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 60 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 60 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 53 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 53 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 51 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 51 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 53 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 51 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 51 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 53 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 434 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 434 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 434 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 434 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 434 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1996 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 53 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 105 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 53 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 107 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 107 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 107 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 53 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 107 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 107 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 107 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 53 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 107 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 53 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 107 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 749 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 749 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 749 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 642 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 107 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 749 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 749 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 749 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 107 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 749 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 749 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 749 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 749 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 214 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 107 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 214 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 214 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 214 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 107 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 214 observations read from the data set WORK.TEMPPROB.
NOTE: There were 214 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 214 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 214 observations read from the data set WORK.TEMPPROB.
NOTE: There were 107 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 107 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 214 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 107 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 107 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 107 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 107 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 107 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 107 observations read from the data set WORK.TEMPN.
NOTE: There were 107 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 107 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 107 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 749 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 214 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 214 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 214 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 214 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 107 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 107 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 107 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 107 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 107 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 107 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 107 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 107 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 54 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 54 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 107 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 54 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 107 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: There were 107 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 107 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 107 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 107 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      297:141
NOTE: There were 107 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
 
21332
21333  *------------------------------------------------------------*;
21334  * End REPORT: Tree;
21335  *------------------------------------------------------------*;
 
21336  /* Reset EM Options */
21337  options formchar="|----|+|---+=|-/\<>*";
21338  options nocenter ls=256 ps=10000;
21339  goptions reset=all device=GIF NODISPLAY;
 
21340  proc sort data=WORK.EM_USER_REPORT;
21341  by ID VIEW;
21342  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21343  proc sort data=EMWS1.Repl_CMeta_TRAIN out=WORK.SUBSETINMETA;
21344  by NAME;
21345  run;
 
NOTE: There were 32 observations read from the data set EMWS1.REPL_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 32 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21346  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
21347  by NAME;
21348  run;
 
NOTE: There were 32 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 32 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21349  data WORK.ASSESS_META;
21350  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
21351  by NAME;
21352  run;
 
NOTE: There were 32 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 32 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21353  data EM_temp_assessMeta;
21354  set EMWS1.Tree_CMeta_TRAIN;
21355  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
21356  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21357  data EM_temp_assessdata;
21358  set EMWS1.Tree_TRAIN(keep=
21359  F_target10
21360  I_target10
21361  P_target100
21362  P_target101
21363  Q_target100
21364  Q_target101
21365  R_target100
21366  R_target101
21367  U_target10
21368  V_target100
21369  V_target101
21370  _WARN_
21371  target10
21372  );
21373  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 4743 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
25655   data EM_temp_assessMeta;
25656   set EMWS1.Tree_CMeta_TRAIN;
25657   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
25658   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
25659   data EM_temp_assessdata;
25660   set EMWS1.Tree_VALIDATE(keep=
25661   F_target10
25662   I_target10
25663   P_target100
25664   P_target101
25665   Q_target100
25666   Q_target101
25667   R_target100
25668   R_target101
25669   U_target10
25670   V_target100
25671   V_target101
25672   _WARN_
25673   target10
25674   );
25675   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2035 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: Visualizza EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
NOTE: There were 2035 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: There were 2035 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2035 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.19 seconds
      cpu time            0.15 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
29966   %let _cn = %sysfunc(getoption(CENTER));
29967   options nocenter;
29968   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
29969   var STAT LABEL TRAIN
29970   VALIDATE
29971   ;
29972   by TARGET TARGETLABEL;
29973   title9 ' ';
29974   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29975   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
29976   title10;
29977   options &_cn;
 
29978   proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
29979   by DATAROLE TARGET TARGETLABEL;
29980   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29981   %let _cn = %sysfunc(getoption(CENTER));
29982   options nocenter;
29983   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
29984   var from into pct_row pct_col count percent
29985   ;
29986   by DATAROLE TARGET TARGETLABEL;
29987   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
29988   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
29989   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
29990   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
29991   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
29992   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
29993   where _TYPE_='PREDICTION';
29994   title9 ' ';
29995   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
29996   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
29997   title9;
29998   title10;
29999   options &_cn;
 
30000   %let _cn = %sysfunc(getoption(CENTER));
30001   options nocenter;
30002   data EMWS1.Tree_EMEVENTREPORT;
30003   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
30004   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
30004 ! FALSEEVENT
30005   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
30006      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
30007   FALSEEVENT=0;
30008   FALSENEVENT=0;
30009   TRUEEVENT=0;
30010   TRUENEVENT=0;
30011   set EMWS1.Tree_EMEVENTREPORT;
30012   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
30013   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
30014   title9 ' ';
30015   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
30016   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
30017   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
30018   title10;
30019   options &_cn;
 
30020   proc datasets library=EMWS1 nolist;
30021   modify Tree_EMRANK;
30022   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
30023   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
30024   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
30025   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
30026   %let _cn = %sysfunc(getoption(CENTER));
30027   options nocenter;
30028   proc print data=EMWS1.Tree_EMRANK label noobs;
30029   var
30030   decile gain lift liftc resp respc N _meanP_;
30031   by
30032   notsorted DATAROLE
30033   notsorted TARGET
30034   notsorted TARGETLABEL
30035   ;
30036   title9 ' ';
30037   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
30038   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
30039   title10;
30040   options &_cn;
 
30041   proc datasets library=EMWS1 nolist;
30042   modify Tree_EMSCOREDIST;
30043   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
30044   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
30045   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
30046   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 

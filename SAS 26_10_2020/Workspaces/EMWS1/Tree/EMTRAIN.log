*------------------------------------------------------------*
* Log di training
Data:               25 ottobre 2020
Ora:                22:52:02
*------------------------------------------------------------*
15207  proc freq data=EMWS1.Tree_VariableSet noprint;
15208  table ROLE*LEVEL/out=WORK.TreeMETA;
15209  run;

NOTE: There were 32 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

15210  proc print data=WORK.TreeMETA label noobs;
15211  var ROLE LEVEL COUNT;
15212  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15213  title9 ' ';
15214  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15215  run;

NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

15216  title10;

15217  %let EMNORLEN = %DMNORLEN;
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN 
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN EMWS1 Repl_TRAIN 
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN 
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN EMWS1 Repl_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
15246  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15247  length ORDER $20;
15248  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15249     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15250  set EMWS1.IDS_TARGET10_DM( where=(_TYPE_="TARGET"));
15251  NumLevels=2;
15252  select(upcase(ORDER));
15253  when('DESC') ORDER = 'Descending';
15254  when('ASC') ORDER = 'Ascending';
15255  when('FMTDESC') ORDER = 'Formatted Descending';
15256  when('FMTASC') ORDER = 'Formatted Ascending';
15257  otherwise ORDER = 'Descending';
15258  end;
15259  output;
15260  run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

15261  title9 ' ';
15262  proc print data=WORK.Tree_EVENT noobs label;
15263  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15264  title9 ' ';
15265  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15266  run;

NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15267  title10;

"Nessuna decisione definita per il target "target10"." 
15268  proc print data = EMWS1.Ids_target10_DM noobs label;
15269  var _type_ variable label;
15270  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15271  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15272  title9 ' ';
15273  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15274  run;

NOTE: There were 7 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

15275  title10;

15276  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15837  *------------------------------------------------------------*;
15838  * Tree: Generation of macros and macro variables;
15839  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15840  *------------------------------------------------------------*;

15841  %let EMEXCEPTIONSTRING=;
15842  *------------------------------------------------------------*;
15843  * TRAIN: Tree;
15844  *------------------------------------------------------------*;
15845  %let EM_ACTION = TRAIN;
15846  %let syscc = 0;
15847  %macro main;
15848  
15849    %if %upcase(&EM_ACTION) = CREATE %then %do;
15850      filename temp catalog 'sashelp.emmodl.tree_create.source';
15851      %include temp;
15852      filename temp;
15853  
15854      %em_tree_create;
15855    %end;
15856  
15857     %else
15858     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15859  
15860         filename temp catalog 'sashelp.emmodl.tree_train.source';
15861         %include temp;
15862         filename temp;
15863         %em_tree_train;
15864     %end;
15865  
15866    %else
15867    %if %upcase(&EM_ACTION) = SCORE %then %do;
15868      filename temp catalog 'sashelp.emmodl.tree_score.source';
15869      %include temp;
15870      filename temp;
15871  
15872      %em_tree_score;
15873  
15874    %end;
15875  
15876    %else
15877    %if %upcase(&EM_ACTION) = REPORT %then %do;
15878  
15879         filename temp catalog 'sashelp.emmodl.tree_report.source';
15880         %include temp;
15881         filename temp;
15882  
15883         %em_tree_report;
15884     %end;
15885  
15886    %else
15887    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15888  
15889         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15890         %include temp;
15891         filename temp;
15892         %EM_TREE_OPENTREEVIEWER;
15893  
15894     %end;
15895  
15896    %else
15897    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15898  
15899         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15900         %include temp;
15901         filename temp;
15902         %EM_TREE_CLOSETREEVIEWER;
15903  
15904     %end;
15905  
15906  
15907     %doendm:
15908  %mend main;
15909  
15910  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15912 +%macro em_tree_train;
15914 +   %if &EM_IMPORT_DATA eq %then %do;
15915 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15916 +       %put &em_codebar;
15917 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15918 +       %put &errormsg;
15919 +       %put &em_codebar;
15920 +       %goto doendm;
15921 +   %end;
15922 +   %else
15923 +       %let EMEXCEPTIONSTRING =;
15925 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15926 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15927 +        %put &em_codebar;
15928 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15929 +        %put &errormsg;
15930 +        %put &em_codebar;
15931 +        %goto doendm;
15932 +   %end;
15934 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15935 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15936 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15937 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15938 +        %put &em_codebar;
15939 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15940 +        %put &errormsg;
15941 +        %put &em_codebar;
15942 +        %goto doendm;
15943 +   %end;
15945 +   /* Initialize property macro variables */
15946 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15947 +   %include temp;
15948 +   filename temp;
15950 +   %EM_SetProperties;
15952 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15953 +   %EM_GETNAME(key=EMTREE, type=DATA);
15954 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15955 +     /* if import eq Y and no importtable defined, throw an exception */
15956 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15957 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15958 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15959 +         %put &em_codebar;
15960 +         %put &errmsg;
15961 +         %put &em_codebar;
15962 +         %goto doendm;
15963 +      %end;
15964 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15965 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15966 +         %put &em_codebar;
15967 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15968 +         %put &errormsg;
15969 +         %put &em_codebar;
15970 +         %goto doendm;
15971 +      %end;
15972 +      %else %do;
15973 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15974 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15975 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15976 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15977 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15978 +         %let dsid = %sysfunc(close(&dsid));
15979 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15980 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15981 +            %put &em_codebar;
15982 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15983 +            %put &errormsg;
15984 +            %put &em_codebar;
15985 +            %goto doendm;
15986 +         %end;
15987 +      %end;
15988 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15989 +         proc delete data=&EM_USER_EMTREE;
15990 +         run;
15991 +      %end;
15992 +   %end;
15993 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15994 +      proc delete data=&EM_USER_EMTREE;
15995 +      run;
15996 +   %end;
15998 +   /* load tree macros */
15999 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16000 +   %include temp;
16001 +   filename temp;
16003 +   /* data sets */
16004 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16005 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16006 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16008 +   /* files */
16009 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16011 +   /* check actual num of target levels */
16012 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16013 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16014 +                              nLevel=_nTargetLevel );
16015 +      %if &_nTargetLevel  > 2 %then %do;
16016 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16017 +        %put &em_codebar;
16018 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16019 +        %put &errormsg;
16020 +        %put &em_codebar;
16021 +        %goto doendm;
16022 +      %end;
16023 +   %end;
16025 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16026 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16027 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16028 +        %let costflag=0;
16029 +        data _null_;
16030 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16031 +          if eof then call symput("costflag", _N_);
16032 +        run;
16033 +        %if &costflag gt 0 %then %do;
16034 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16035 +          %put &em_codebar;
16036 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16037 +          %put &errormsg;
16038 +          %put &em_codebar;
16039 +          %goto doendm;
16040 +       %end;
16041 +     %end;
16042 +   %end;
16044 +   /* determine if multiple targets will be processed */
16045 +   %let em_tree_multipleTargets=N;
16046 +   %let em_tree_numTarget = 1;
16047 +   %let em_tree_targetVars=;
16049 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16050 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16051 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16052 +         %let em_tree_multipleTargets=N;
16053 +      %end;
16054 +      %else %do;
16055 +         /* create macro array of targets  */
16056 +         data _null_;
16057 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16058 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16059 +           if eof then
16060 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16061 +        run;
16063 +        %if &em_tree_numTarget gt 1 %then %do;
16064 +           %let em_tree_multipleTargets=Y;
16065 +        %end;
16066 +      %end;
16067 +   %end;
16069 +   /* create view of only necessary variable for performance reasons */
16070 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16071 +   data &tempData / view=&tempData;
16072 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16073 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16074 +       %EM_TARGET
16075 +     %end;
16076 +     %else %do;
16077 +       %if &em_tree_numTarget ne 0 %then %do;
16078 +         %do i=1 %to &em_tree_numTarget;
16079 +            &&em_tree_targetVars&i
16080 +         %end;
16081 +       %end;
16082 +     %end;
16083 +     );
16084 +   run;
16086 +   /* run Tree procedure */
16087 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16089 +   /* Check return code and throw exception if error is detected */
16090 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16091 +   %if &syserr %then %do;
16092 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16093 +     %goto doendm;
16094 +   %end;
16096 +   /* add decision score code if multiple targets are processed */
16097 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16098 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16099 +   %end;
16101 +   /* create outfit dataset if multiple score statements have been executed */
16102 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16104 +   /* create English Rules */
16105 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16106 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16107 +       %em_tree_makeEnglishRules;
16109 +       /* English Rules */
16110 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16112 +     %end;
16113 +   filename x;
16115 +   %doendm:
16116 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16117 +%macro EM_SetProperties;
16119 +   /* train properties */
16120 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16121 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16122 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16123 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16162 +   /* properties for interactive sample */
16163 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16168 +   /* report properties */
16169 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16171 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16172 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16173 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16176 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16177 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16178 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16183 +   /* score properties */
16184 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16185 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16187 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16189 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16190 +  %global &nLevel;
16191 +  proc dmdb batch data=&indata
16192 +    classout=_tmp_dmdbout;
16193 +    class &target;
16194 +  run;
16195 +  data _tmp_dmdbout;
16196 +    set _tmp_dmdbout;
16197 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16198 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16199 +  run;
16200 +  data _null_;
16201 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16202 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16203 +    %let dsid = %sysfunc(close(&dsid));
16204 +     call symput("&nLevel", put(&_obs, Best12.));
16205 +  run;
16207 +  proc datasets lib=work nolist;
16208 +     delete _tmp_dmdbout;
16209 +  run;
16210 +  quit;
16211 +%Mend EM_CheckBinaryTargetLevel;
16214 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16216 +  /* determine the number of obs in training data */
16217 +  proc sql;
16218 +    reset noprint;
16219 +    select count(*) into :em_nobs from &indata;
16220 +  quit;
16222 +  /* determine the number of input variables */
16223 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16224 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16226 +  /* retrieve targetEvent from decmeta */
16227 +  %let targetEvent=;
16228 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16229 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16230 +      data _null_;
16231 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16232 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16233 +      run;
16234 +    %end;
16235 +  %end;
16237 +  /* create targetTable if multipleTar eq Y */
16238 +  data temptarget;
16239 +    set &EM_DATA_VARIABLESET;
16240 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16241 +  run;
16243 + /* data sets */
16244 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16245 + %EM_GETNAME(key=EMTREE,        type=DATA);
16246 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16247 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16248 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16249 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16250 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16251 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16252 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16253 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16255 + /* files */
16256 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16257 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16259 + /* turn on pmml if requested */
16260 + %let nnpmml=0;
16261 + %if %symexist(EM_PMML) %then %do;
16262 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16263 +       %let nnpmml=1;
16265 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16266 +   %end;
16267 +%end;
16269 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16271 +%if &nnpmml or &numClassTarget %then %do;
16273 +    /* create dmdb needed for pmml generation */
16274 +    %let tree_maxlevel = 512;
16275 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16276 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16277 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16278 +      %end;
16279 +    %end;
16280 +    %if &tree_maxlevel gt 0 %then %do;
16281 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16282 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16283 +    %end;
16285 +    %let targetOrderString =;
16286 +    %let targetString = ;
16287 +    data _null_;
16288 +       length orderString nameString $10000;
16289 +       retain orderString nameString;
16290 +       set &em_data_variableset end=eof;
16291 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16292 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16293 +       %end;
16294 +       %else %do;
16295 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16296 +       %end;          select(order);
16297 +         when('')        order ='DESC';
16298 +         when('FMTASC')  order='ASCFMT';
16299 +         when('FMTDESC') order='DESFMT';
16300 +         otherwise;
16301 +       end;
16302 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16303 +       nameString = trim(nameString)!!' '!!trim(NAME);
16305 +       if eof then do;
16306 +          call symput('targetOrderString', trim(orderString));
16307 +          call symput('targetString', trim(nameString));
16308 +       end;
16309 +    run;
16311 +    %let arborkluge= "work._treeDMDB";
16313 +    proc dmdb batch data=&indata
16314 +    %if &nnpmml %then %do;
16315 +        PMML
16316 +    %end;
16317 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16319 +      %if &nnpmml %then %do;
16320 +           %if "%EM_ID" ne "" %then %do;
16321 +             id %EM_ID;
16322 +           %end;
16323 +           %if &EM_NUM_CLASS gt 0 %then %do;
16324 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16325 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16326 +                  &targetOrderString;
16327 +           %end;
16328 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16329 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16330 +           %end;
16331 +           target &targetString %EM_INTERVAL_TARGET;
16332 +           %if "%EM_FREQ" ne "" %then %do;
16333 +             freq %EM_FREQ;
16334 +           %end;
16335 +      %end;
16336 +      %else %do;
16337 +         class  &targetOrderString;
16338 +         target &targetString %EM_INTERVAL_TARGET;
16339 +      %end;
16340 +    run;
16341 +    quit;
16343 +    proc datasets lib=work nolist;
16344 +       delete classout varout;
16345 +    run;
16346 +    quit;
16348 + %end;
16351 + /* run Arbor procedure */
16352 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16353 +  proc arbor data=&INDATA
16355 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16356 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16357 +  %end;
16359 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16360 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16361 +  %end;
16363 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16364 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16365 +  %end;
16367 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16368 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16369 +  %end;
16371 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16372 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16373 +  %end;
16375 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16376 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16377 +  %end;
16378 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16379 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16380 +  %end;
16381 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16382 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16383 +  %end;
16385 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16386 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16387 +      alpha = &EM_PROPERTY_SIGLEVEL
16388 +    %end;
16389 +  %end;
16391 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16392 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16393 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16394 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16395 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16397 +        padjust =
16398 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16399 +          &chaid
16400 +        %end;
16401 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16402 +          DEPTH
16403 +        %end;
16404 +      %end;
16405 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16406 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16407 +         pvars = &num_inputs
16408 +      %end;
16409 +    %end;
16410 +  %end;
16411 +  %else %do;
16412 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16413 +         padjust = NONE
16414 +      %end;
16415 +  %end;
16417 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16418 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16419 +    Maxrules = &num_nrules
16420 +  %end;
16422 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16423 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16424 +    Maxsurrs = &num_nsurrs
16425 +  %end;
16427 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16428 +     Missing=&EM_PROPERTY_MISSINGVALUE
16429 +  %end;
16431 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16432 +     USEVARONCE
16433 +  %end;
16435 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16436 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16437 +  %end;
16440 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16441 +    event = "&targetEvent"
16442 +  %end;
16444 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16445 +     DECSEARCH
16446 +  %end;
16448 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16449 +     PRIORSSEARCH
16450 +  %end;
16452 +  %if &arbor_1 ne %then %do;
16453 +    &arbor_1
16454 +  %end;
16456 +  %if &em_arbor ne %then %do;
16457 +     &em_arbor
16458 +  %end;
16459 +  ;
16460 + %end;
16461 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16462 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16463 +       Performance &EM_PROPERTY_PERFORMANCE
16464 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16465 +         nodesize=&EM_PROPERTY_NODESAMPLE
16466 +       %end;
16467 +       ;
16468 +       interact;
16469 + %end;
16470 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16471 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16472 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16473 +    %put &em_codebar;
16474 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16475 +    %put &errormsg;
16476 +    %put &em_codebar;
16477 +    %goto doendm;
16478 +   %end;
16479 +   %else %do;
16480 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16481 +       Performance &EM_PROPERTY_PERFORMANCE
16482 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16483 +         nodesize=&EM_PROPERTY_NODESAMPLE
16484 +       %end;
16485 +       ;
16486 +       interact;
16487 +   %end;
16488 + %end;
16490 + %else %do;
16491 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16492 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16493 +    %put &em_codebar;
16494 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16495 +    %put &errormsg;
16496 +    %put &em_codebar;
16497 +    %goto doendm;
16498 +   %end;
16499 +   %else %do;
16500 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16501 +       Performance &EM_PROPERTY_PERFORMANCE
16502 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16503 +         nodesize=&EM_PROPERTY_NODESAMPLE
16504 +       %end;
16505 +       ;
16506 +        interact;
16507 +   %end;
16508 + %end;
16510 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16511 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16512 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16513 +    %end;
16515 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16516 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16517 +    %end;
16519 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16520 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16521 +    %end;
16523 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16524 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16525 +    %end;
16527 +    %if "%EM_FREQ" ne "" %then %do;
16528 +       freq %EM_FREQ;
16529 +    %end;
16531 +    %if "&multipleTar" eq "Y" %then %do;
16532 +       /* cycle through all target vars in variableset */
16533 +       %let tdsid = %sysfunc(open(temptarget));
16534 +       %if &tdsid %then %do;
16535 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16536 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16537 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16538 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16539 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16540 +             target &var / level = &lvl
16541 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16542 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16543 +             %end;
16544 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16545 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16546 +             %end;
16547 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16548 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16549 +             %end;
16550 +          %end;
16551 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16552 +       %end;
16553 +       useTarget variable = %EM_TARGET;
16554 +    %end;
16555 +    %else %do;
16556 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16557 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16558 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16559 +      %end;
16560 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16561 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16562 +      %end;
16563 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16564 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16565 +      %end;
16566 +    %end;
16568 +    %if "&multipleTar" eq "N" %then %do;
16569 +      &EM_DEC_STATEMENT;
16570 +    %end;
16572 +    Performance &EM_PROPERTY_PERFORMANCE
16573 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16574 +      nodesize=&EM_PROPERTY_NODESAMPLE
16575 +    %end;
16576 +    ;
16578 +    %if "&intFlag" eq "Y" %then %do;
16579 +       INTERACT Largest;
16580 +       Train maxnewdepth=0;
16581 +    %end;
16583 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16584 +         Assess
16585 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16586 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16587 +              %put &em_codebar;
16588 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16589 +              %put &errormsg;
16590 +              %put &em_codebar;
16591 +            %end;
16592 +            %else %do;
16593 +               Validata=&EM_IMPORT_VALIDATE
16594 +            %end;
16595 +         %end;
16596 +         %else %do;
16597 +           NoValidata
16598 +         %end;
16599 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16600 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16601 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16602 +               %if &dsid %then %do;
16603 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16604 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16605 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16606 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16607 +                   %else %do;
16608 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16609 +                      %else %let measure= MISC;
16610 +                   %end;
16611 +                 %end;
16612 +               %end;
16613 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16614 +            %end;
16615 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16616 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16617 +                 %let measure=ASE;
16618 +              %end;
16619 +              %else %do;
16620 +                 %let measure=MISC;
16621 +              %end;
16622 +            %end;
16623 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16624 +              %let measure=ASE;
16625 +            %end;
16626 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16627 +               %let measure = LIFT;
16628 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16629 +               %if &dsid %then %do;
16630 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16631 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16632 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16633 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16634 +                 %end;
16635 +               %end;
16636 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16637 +            %end;
16638 +            measure=&measure
16639 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16640 +               event = "&targetEvent"
16641 +            %end;
16642 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16643 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16644 +            %end;
16645 +         %end;
16646 +         %if "&multipleTar" eq "N" %then %do;
16647 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16648 +               CV
16649 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16650 +                 CVNITer = &EM_PROPERTY_CVNITER
16651 +               %end;
16652 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16653 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16654 +               %end;
16655 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16656 +                 CVSeed = &EM_PROPERTY_CVSEED
16657 +               %end;
16658 +            %end;
16659 +         %end;
16660 +       %end;
16661 +      ;
16663 +      %if "&intFlag" ne "Y" %then %do;
16664 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16665 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16666 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16667 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16669 +          SUBTREE &subtree
16670 +          %if "&subtree" eq "NLEAVES" %then %do;
16671 +            =&EM_PROPERTY_NSUBTREE
16672 +          %end;
16673 +          ;
16674 +        %end;
16676 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16677 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16678 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16679 +          %end;
16680 +       %end;
16681 +      %end;
16682 + %end;
16685 + MakeMacro nleaves = nleaves;
16686 + save
16687 + %if "&EM_USER_EMTREE" ne "" %then %do;
16688 +   MODEL=&EM_USER_EMTREE
16689 + %end;
16690 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16691 +   SEQUENCE=&EM_USER_OUTSEQ
16692 + %end;
16693 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16694 +   IMPORTANCE=&EM_USER_OUTIMPORT
16695 + %end;
16696 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16697 +   NODESTAT=&EM_USER_OUTNODES
16698 + %end;
16699 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16700 +   SUMMARY=&EM_USER_OUTSUMMARY
16701 + %end;
16702 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16703 +   STATSBYNODE=&EM_USER_OUTSTATS
16704 + %end;
16705 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16706 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16707 + %end;
16708 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16709 +   Pathlistnonmissing=&EM_USER_OUTPATH
16710 + %end;
16711 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16712 +   RULES = &EM_USER_OUTRULES
16713 + %end;
16714 + ;
16716 + %if "&intFlag" ne "Y" %then %do;
16718 +   %let lookupString = ;
16719 +   %if ^%symexist(EM_OPTION) %then
16720 +      %let EM_OPTION=;
16722 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16723 +      %let lookupString = LOOKUP=SELECT;
16724 +   %end;
16726 +   %let codetext=;
16727 +   %let norescodetxt=;
16729 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16730 +     %let codetext=&codetext DUMMY;
16731 +     %let norescodetxt=&norescodetxt DUMMY;
16732 +   %end;
16733 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16734 +     %let codetext=&codetext NOLEAFID;
16735 +     %let norescodetxt=&norescodetxt NOLEAFID;
16736 +   %end;
16737 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16738 +     %let norescodetxt=&norescodetxt NOPRED;
16739 +   %end;
16741 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16742 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16744 +   %if &nnpmml %then %do;
16745 +     code pmml;
16746 +   %end;
16748 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16749 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16750 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16751 +   %end;
16752 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16753 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16754 +   %end;
16755 + %end;
16757 + run;
16758 + quit;
16760 + /*%em_checkerror(); */
16761 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16762 +   /* Delete DMDB catalog */
16763 +   proc datasets lib=work nolist;
16764 +       delete _treeDMDB / mt=cat;
16765 +  run;
16766 +  %end;
16768 + %if &nnpmml %then %do;
16769 +    ods pmml close;
16770 + %end;
16772 +  %doendm:
16774 +%mend em_tree_runTreeProcedure;
16776 +%macro em_tree_createFitStats( multipleTar= );
16779 +  /* create targetTable is multipleTar eq Y */
16780 +  data temptarget;
16781 +    set &EM_DATA_VARIABLESET;
16782 +    where ROLE="TARGET";
16783 +  run;
16785 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16786 +   data &EM_USER_EMOUTFIT;
16787 +     length target $32;
16788 +     merge work.fit_train
16789 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16790 +       work.fit_valid
16791 +     %end;
16792 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16793 +       work.fit_test
16794 +     %end;
16795 +     ;
16796 +     %if "&multipleTar" eq "N" %then %do;
16797 +       target="%EM_TARGET";
16798 +     %end;
16799 +     %else %do;
16800 +       target = _TARGET_;
16801 +     %end;
16802 +     drop _NW_ _SUMW_
16803 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16804 +        _VSUMW_
16805 +     %end;
16806 +     ;
16807 +   run;
16809 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16810 +     proc datasets library=work nolist;
16811 +       delete fit_valid;
16812 +     run;
16813 +   %end;
16814 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16815 +     proc datasets library=work nolist;
16816 +       delete fit_test;
16817 +     run;
16818 +   %end;
16820 +%mend em_tree_createFitStats;
16823 +%macro em_tree_makeEnglishRules;
16825 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16826 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16828 +  /* verify that necessary tables exist and if not, skip processing */
16829 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16830 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16831 +    %goto doendm;
16832 +  %end;
16833 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16834 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16835 +    %goto doendm;
16836 +  %end;
16838 +  /* determine length of variable in outpath dataset */
16839 +  %let vlength= ;
16840 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16841 +  %if &dsid ne %then %do;
16842 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16843 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16844 +  %end;
16845 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16847 +  data tempoutpath;
16848 +    length varname $&vlength;
16849 +    retain varname;
16850 +    set &EM_USER_OUTPATH;
16852 +    if ^missing(variable) then varname=variable;
16853 +    else if ^missing(var_name) then varname=var_name;
16854 +    output;
16855 +  run;
16857 +  /* create an array of generated predicted variable names */
16858 +  %let tree_pred_vars = ;
16859 +  %let tree_pred_label = ;
16860 +  %let numpred= 0;
16861 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16863 +    data _null_;
16864 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16865 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16866 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16867 +     if eof then
16868 +       call symput('numpred', strip(put(_N_, BEST.)));
16869 +    run;
16870 +  %end;
16872 +  /* determine if NPRIORS exists in outnodes  */
16873 +  %local nprior_flag;
16874 +  data _null_;
16875 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16876 +    if eof then do;
16877 +      call symput('nprior_flag', strip(put(npriors, best.)));
16878 +    end;
16879 +  run;
16881 +  proc sort data=tempoutpath; by node; run;
16882 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16884 +  data tempoutpath;
16885 +    merge tempoutpath(in=_a) outnodes(keep= node
16886 +    %if "&nprior_flag" ne "." %then %do;
16887 +      NPRIORS
16888 +    %end;
16889 +    %else %do;
16890 +      N
16891 +    %end;
16892 +    %if &numpred gt 0 %then %do;
16893 +      %do i=1 %to &numpred;
16894 +        &&tree_pred_vars&i
16895 +      %end;
16896 +    %end;
16897 +    );
16898 +    by node;
16899 +    if _a;
16900 +  run;
16902 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16904 +  data _null_;
16905 +    file x;
16906 +    set tempoutpath;
16907 +    by node descending varname;
16908 +    retain origvar oldnode string;
16909 +    length origvar $32 oldnode 8 string $200;
16911 +    if _N_ = 1 then do;
16912 +      origvar = varname;
16913 +      oldnode = node;
16914 +    end;
16916 +    if first.node then do;
16917 +       put "&EM_CODEBAR";
16918 +       put " Node = " node;
16919 +       put "&EM_CODEBAR";
16920 +    end;
16922 +      if first.varname then do;
16923 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16924 +            if MISSING(CHARACTER_VALUE) then do;
16925 +             if NUMERIC_VALUE ne .  then do;
16926 +              if ^first.node then do;
16927 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16928 +              end;
16929 +              else do;
16930 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16931 +              end;
16932 +             end;
16933 +            end;
16934 +            else do;
16935 +              if ^first.node then do;
16936 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16937 +              end;
16938 +              else do;
16939 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16940 +              end;
16941 +             end;
16942 +         end;
16943 +         else if RELATION in ("=") then do;
16944 +            if ^first.node then do;
16945 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16946 +            end;
16947 +            else do;
16948 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16949 +            end;
16950 +         end;
16951 +         else if RELATION in ("ISMISSING") then do;
16952 +            if ^first.node then do;
16953 +              string = " AND "|| strip(varname) || " equals Missing";
16954 +            end;
16955 +            else do;
16956 +              string = "if "|| strip(varname) ||" equals Missing";
16957 +            end;
16958 +         end;
16959 +         else if RELATION in ("ISNOTMISSING") then do;
16960 +            if ^first.node then do;
16961 +              string = " AND "|| strip(varname) || " equals All Values";
16962 +            end;
16963 +            else do;
16964 +              string = "if "|| strip(varname) ||" equals All Values";
16965 +            end;
16966 +         end;
16967 +         if ^missing(varname) then origvar = varname;
16968 +         oldnode=node;
16970 +      end;
16971 +      else do;
16972 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16973 +          if MISSING(CHARACTER_VALUE) then do;
16974 +           if  NUMERIC_VALUE ne .  then do;
16975 +            if ^MISSING(string) then
16976 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16977 +            else
16978 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16979 +           end;
16980 +          end;
16981 +          else do;
16982 +            if ^MISSING(string) then
16983 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16984 +            else
16985 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16986 +          end;
16988 +         end;
16989 +         else if RELATION in ("=") then do;
16990 +           string = strip(string)||", "||strip(character_value);
16991 +         end;
16992 +         else if RELATION in ("ISMISSING") then do;
16994 +         end;
16995 +         if ^missing(varname) then origvar = varname;
16996 +         oldnode=node;
16997 +      end;
16998 +      if last.varname then do;
16999 +         if RELATION in ("ISMISSING") then do;
17000 +           if ^first.varname then do;
17001 +             string = strip(string) || " or MISSING";
17002 +           end;
17003 +         end;
17004 +         put string;
17005 +         if ^missing(varname) then origvar = varname;
17006 +         oldnode=node;
17007 +      end;
17009 +      if last.node then do;
17010 +         put "then ";
17011 +         put " Tree Node Identifier   = " node;
17013 +         %if "&nprior_flag" ne "." %then %do;
17014 +           put " Number of Observations = " NPRIORS;
17015 +         %end;
17016 +         %else %do;
17017 +           put " Number of Observations = " N;
17018 +         %end;
17020 +         %if &numpred gt 0 %then %do;
17021 +           %do i=1 %to &numpred;
17022 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17023 +           %end;
17024 +         %end;
17026 +         put " ";
17027 +         if ^missing(varname) then origvar = varname;
17028 +         oldnode=node;
17029 +      end;
17031 +  run;
17033 +  proc datasets lib=work nolist;
17034 +    delete tempoutpath outnodes;
17035 +  run;
17037 +  %doendm:
17038 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: Records processed = 4743   Memory used = 511K.
NOTE: Visualizza EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
      
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.12 seconds
      cpu time            0.07 seconds
      


NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Visualizza EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.09 seconds
      

NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.12 seconds
      
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.23 seconds
      cpu time            0.18 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 4743   Memory used = 511K.
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.17 seconds
      
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.28 seconds
      cpu time            0.20 seconds
      


NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

NOTE: Visualizza EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           2.48 seconds
      cpu time            1.20 seconds
      
NOTE: 1491183 kilobytes of physical memory.
NOTE: Will use 4743 out of 4743 training cases.
NOTE: Using memory pool with 251824128 bytes.
NOTE: Passed training data 20 times.
NOTE: Training used 2826672 bytes of work memory.
NOTE: There were 2035 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The subtree sequence contains 60 subtrees. The largest has 119 nodes and 60 leaves.
NOTE: Using subtree with 107 nodes and 54 leaves.
NOTE: Using subtree with 107 nodes and 54 leaves.
NOTE: Created macro variable NLEAVES equal to 54.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 23 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 4485 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 107 observations and 24 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 729 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 1996 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 60 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 749 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 107 observations and 5 variables.
NOTE: External file C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: Visualizza EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.15 seconds
      
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Visualizza EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
      
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: There were 2035 observations read from the data set EMWS1.PART_VALIDATE.


NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.EM_TREE.VIEW used (Total process time):
      real time           3.76 seconds
      cpu time            1.84 seconds
      
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           3.87 seconds
      cpu time            1.90 seconds
      


NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 729 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 729 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 729 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 729 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 107 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 107 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 729 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 107 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 729 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 729 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 729 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,Dimensione (byte)=0,
      Ultima modifica=25 ottobre 2020 22:52:11,
      Create Time=25 ottobre 2020 22:52:11

NOTE: 636 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 200.
NOTE: There were 729 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.07 seconds
      

NOTE: Fileref X has been deassigned.
17040  
17041  *------------------------------------------------------------*;
17042  * End TRAIN: Tree;
17043  *------------------------------------------------------------*;

17044  *------------------------------------------------------------*;
17045  * Close any missing semi colons;
17046  *------------------------------------------------------------*;
17047  ;
17048  ;
17049  ;
17050  ;
17051  quit;
17052  *------------------------------------------------------------*;
17053  * Close any unbalanced quotes;
17054  *------------------------------------------------------------*;
17055  /*; *"; *'; */
17056  ;
17057  run;
17058  quit;
17059  /* Reset EM Options */
17060  options formchar="|----|+|---+=|-/\<>*";
17061  options nocenter ls=256 ps=10000;
17062  goptions reset=all device=GIF NODISPLAY;

17063  proc sort data=WORK.EM_USER_REPORT;
17064  by ID VIEW;
17065  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


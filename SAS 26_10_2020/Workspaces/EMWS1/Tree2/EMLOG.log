*------------------------------------------------------------*
Utente:             Maria Vallarelli
Data:               25 ottobre 2020
Ora:                22:52:11
Sito:                50306432
Piattaforma:            X64_10PRO
Release di maintenance: 9.04.01M5P091317
Versione di EM:          14.3
* 
*------------------------------------------------------------*
* Log di training
Data:               25 ottobre 2020
Ora:                22:51:50
*------------------------------------------------------------*
15207  proc freq data=EMWS1.Tree2_VariableSet noprint;
15208  table ROLE*LEVEL/out=WORK.Tree2META;
15209  run;
 
NOTE: There were 32 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
 
 
15210  proc print data=WORK.Tree2META label noobs;
15211  var ROLE LEVEL COUNT;
15212  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15213  title9 ' ';
15214  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15215  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
15216  title10;
 
15217  %let EMNORLEN = %DMNORLEN;
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN EMWS1 Repl_TRAIN
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN EMWS1 Repl_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15246  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15247  length ORDER $20;
15248  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15249     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15250  set EMWS1.IDS_TARGET10_DM( where=(_TYPE_="TARGET"));
15251  NumLevels=2;
15252  select(upcase(ORDER));
15253  when('DESC') ORDER = 'Descending';
15254  when('ASC') ORDER = 'Ascending';
15255  when('FMTDESC') ORDER = 'Formatted Descending';
15256  when('FMTASC') ORDER = 'Formatted Ascending';
15257  otherwise ORDER = 'Descending';
15258  end;
15259  output;
15260  run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
15261  title9 ' ';
15262  proc print data=WORK.Tree2_EVENT noobs label;
15263  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15264  title9 ' ';
15265  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15266  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15267  title10;
 
"Nessuna decisione definita per il target "target10"."
15268  proc print data = EMWS1.Ids_target10_DM noobs label;
15269  var _type_ variable label;
15270  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15271  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15272  title9 ' ';
15273  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15274  run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15275  title10;
 
15276  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15820  *------------------------------------------------------------*;
15821  * Tree2: Generation of macros and macro variables;
15822  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15823  *------------------------------------------------------------*;
 
15824  %let EMEXCEPTIONSTRING=;
15825  *------------------------------------------------------------*;
15826  * TRAIN: Tree2;
15827  *------------------------------------------------------------*;
15828  %let EM_ACTION = TRAIN;
15829  %let syscc = 0;
15830  %macro main;
15831
15832    %if %upcase(&EM_ACTION) = CREATE %then %do;
15833      filename temp catalog 'sashelp.emmodl.tree_create.source';
15834      %include temp;
15835      filename temp;
15836
15837      %em_tree_create;
15838    %end;
15839
15840     %else
15841     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15842
15843         filename temp catalog 'sashelp.emmodl.tree_train.source';
15844         %include temp;
15845         filename temp;
15846         %em_tree_train;
15847     %end;
15848
15849    %else
15850    %if %upcase(&EM_ACTION) = SCORE %then %do;
15851      filename temp catalog 'sashelp.emmodl.tree_score.source';
15852      %include temp;
15853      filename temp;
15854
15855      %em_tree_score;
15856
15857    %end;
15858
15859    %else
15860    %if %upcase(&EM_ACTION) = REPORT %then %do;
15861
15862         filename temp catalog 'sashelp.emmodl.tree_report.source';
15863         %include temp;
15864         filename temp;
15865
15866         %em_tree_report;
15867     %end;
15868
15869    %else
15870    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15871
15872         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15873         %include temp;
15874         filename temp;
15875         %EM_TREE_OPENTREEVIEWER;
15876
15877     %end;
15878
15879    %else
15880    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15881
15882         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15883         %include temp;
15884         filename temp;
15885         %EM_TREE_CLOSETREEVIEWER;
15886
15887     %end;
15888
15889
15890     %doendm:
15891  %mend main;
15892
15893  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15895 +%macro em_tree_train;
15897 +   %if &EM_IMPORT_DATA eq %then %do;
15898 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15899 +       %put &em_codebar;
15900 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15901 +       %put &errormsg;
15902 +       %put &em_codebar;
15903 +       %goto doendm;
15904 +   %end;
15905 +   %else
15906 +       %let EMEXCEPTIONSTRING =;
15908 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15909 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15910 +        %put &em_codebar;
15911 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15912 +        %put &errormsg;
15913 +        %put &em_codebar;
15914 +        %goto doendm;
15915 +   %end;
15917 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15918 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15919 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15920 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15921 +        %put &em_codebar;
15922 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15923 +        %put &errormsg;
15924 +        %put &em_codebar;
15925 +        %goto doendm;
15926 +   %end;
15928 +   /* Initialize property macro variables */
15929 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15930 +   %include temp;
15931 +   filename temp;
15933 +   %EM_SetProperties;
15935 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15936 +   %EM_GETNAME(key=EMTREE, type=DATA);
15937 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15938 +     /* if import eq Y and no importtable defined, throw an exception */
15939 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15940 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15941 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15942 +         %put &em_codebar;
15943 +         %put &errmsg;
15944 +         %put &em_codebar;
15945 +         %goto doendm;
15946 +      %end;
15947 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15948 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15949 +         %put &em_codebar;
15950 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15951 +         %put &errormsg;
15952 +         %put &em_codebar;
15953 +         %goto doendm;
15954 +      %end;
15955 +      %else %do;
15956 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15957 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15958 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15959 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15960 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15961 +         %let dsid = %sysfunc(close(&dsid));
15962 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15963 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15964 +            %put &em_codebar;
15965 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15966 +            %put &errormsg;
15967 +            %put &em_codebar;
15968 +            %goto doendm;
15969 +         %end;
15970 +      %end;
15971 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15972 +         proc delete data=&EM_USER_EMTREE;
15973 +         run;
15974 +      %end;
15975 +   %end;
15976 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15977 +      proc delete data=&EM_USER_EMTREE;
15978 +      run;
15979 +   %end;
15981 +   /* load tree macros */
15982 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15983 +   %include temp;
15984 +   filename temp;
15986 +   /* data sets */
15987 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15988 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15989 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15991 +   /* files */
15992 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15994 +   /* check actual num of target levels */
15995 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15996 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15997 +                              nLevel=_nTargetLevel );
15998 +      %if &_nTargetLevel  > 2 %then %do;
15999 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16000 +        %put &em_codebar;
16001 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16002 +        %put &errormsg;
16003 +        %put &em_codebar;
16004 +        %goto doendm;
16005 +      %end;
16006 +   %end;
16008 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16009 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16010 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16011 +        %let costflag=0;
16012 +        data _null_;
16013 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16014 +          if eof then call symput("costflag", _N_);
16015 +        run;
16016 +        %if &costflag gt 0 %then %do;
16017 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16018 +          %put &em_codebar;
16019 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16020 +          %put &errormsg;
16021 +          %put &em_codebar;
16022 +          %goto doendm;
16023 +       %end;
16024 +     %end;
16025 +   %end;
16027 +   /* determine if multiple targets will be processed */
16028 +   %let em_tree_multipleTargets=N;
16029 +   %let em_tree_numTarget = 1;
16030 +   %let em_tree_targetVars=;
16032 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16033 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16034 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16035 +         %let em_tree_multipleTargets=N;
16036 +      %end;
16037 +      %else %do;
16038 +         /* create macro array of targets  */
16039 +         data _null_;
16040 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16041 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16042 +           if eof then
16043 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16044 +        run;
16046 +        %if &em_tree_numTarget gt 1 %then %do;
16047 +           %let em_tree_multipleTargets=Y;
16048 +        %end;
16049 +      %end;
16050 +   %end;
16052 +   /* create view of only necessary variable for performance reasons */
16053 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16054 +   data &tempData / view=&tempData;
16055 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16056 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16057 +       %EM_TARGET
16058 +     %end;
16059 +     %else %do;
16060 +       %if &em_tree_numTarget ne 0 %then %do;
16061 +         %do i=1 %to &em_tree_numTarget;
16062 +            &&em_tree_targetVars&i
16063 +         %end;
16064 +       %end;
16065 +     %end;
16066 +     );
16067 +   run;
16069 +   /* run Tree procedure */
16070 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16072 +   /* Check return code and throw exception if error is detected */
16073 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16074 +   %if &syserr %then %do;
16075 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16076 +     %goto doendm;
16077 +   %end;
16079 +   /* add decision score code if multiple targets are processed */
16080 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16081 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16082 +   %end;
16084 +   /* create outfit dataset if multiple score statements have been executed */
16085 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16087 +   /* create English Rules */
16088 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16089 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16090 +       %em_tree_makeEnglishRules;
16092 +       /* English Rules */
16093 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16095 +     %end;
16096 +   filename x;
16098 +   %doendm:
16099 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16100 +%macro EM_SetProperties;
16102 +   /* train properties */
16103 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16104 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16105 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16106 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16107 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16108 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16109 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16110 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16111 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16112 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16113 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16114 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16115 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16116 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16117 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16118 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16119 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16120 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16121 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16122 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16123 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16145 +   /* properties for interactive sample */
16146 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16151 +   /* report properties */
16152 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16166 +   /* score properties */
16167 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16170 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16172 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16173 +  %global &nLevel;
16174 +  proc dmdb batch data=&indata
16175 +    classout=_tmp_dmdbout;
16176 +    class &target;
16177 +  run;
16178 +  data _tmp_dmdbout;
16179 +    set _tmp_dmdbout;
16180 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16181 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16182 +  run;
16183 +  data _null_;
16184 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16185 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16186 +    %let dsid = %sysfunc(close(&dsid));
16187 +     call symput("&nLevel", put(&_obs, Best12.));
16188 +  run;
16190 +  proc datasets lib=work nolist;
16191 +     delete _tmp_dmdbout;
16192 +  run;
16193 +  quit;
16194 +%Mend EM_CheckBinaryTargetLevel;
16197 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16199 +  /* determine the number of obs in training data */
16200 +  proc sql;
16201 +    reset noprint;
16202 +    select count(*) into :em_nobs from &indata;
16203 +  quit;
16205 +  /* determine the number of input variables */
16206 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16207 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16209 +  /* retrieve targetEvent from decmeta */
16210 +  %let targetEvent=;
16211 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16212 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16213 +      data _null_;
16214 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16215 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16216 +      run;
16217 +    %end;
16218 +  %end;
16220 +  /* create targetTable if multipleTar eq Y */
16221 +  data temptarget;
16222 +    set &EM_DATA_VARIABLESET;
16223 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16224 +  run;
16226 + /* data sets */
16227 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16228 + %EM_GETNAME(key=EMTREE,        type=DATA);
16229 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16230 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16231 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16232 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16233 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16234 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16235 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16236 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16238 + /* files */
16239 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16240 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16242 + /* turn on pmml if requested */
16243 + %let nnpmml=0;
16244 + %if %symexist(EM_PMML) %then %do;
16245 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16246 +       %let nnpmml=1;
16248 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16249 +   %end;
16250 +%end;
16252 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16254 +%if &nnpmml or &numClassTarget %then %do;
16256 +    /* create dmdb needed for pmml generation */
16257 +    %let tree_maxlevel = 512;
16258 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16259 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16260 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16261 +      %end;
16262 +    %end;
16263 +    %if &tree_maxlevel gt 0 %then %do;
16264 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16265 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16266 +    %end;
16268 +    %let targetOrderString =;
16269 +    %let targetString = ;
16270 +    data _null_;
16271 +       length orderString nameString $10000;
16272 +       retain orderString nameString;
16273 +       set &em_data_variableset end=eof;
16274 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16275 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16276 +       %end;
16277 +       %else %do;
16278 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16279 +       %end;          select(order);
16280 +         when('')        order ='DESC';
16281 +         when('FMTASC')  order='ASCFMT';
16282 +         when('FMTDESC') order='DESFMT';
16283 +         otherwise;
16284 +       end;
16285 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16286 +       nameString = trim(nameString)!!' '!!trim(NAME);
16288 +       if eof then do;
16289 +          call symput('targetOrderString', trim(orderString));
16290 +          call symput('targetString', trim(nameString));
16291 +       end;
16292 +    run;
16294 +    %let arborkluge= "work._treeDMDB";
16296 +    proc dmdb batch data=&indata
16297 +    %if &nnpmml %then %do;
16298 +        PMML
16299 +    %end;
16300 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16302 +      %if &nnpmml %then %do;
16303 +           %if "%EM_ID" ne "" %then %do;
16304 +             id %EM_ID;
16305 +           %end;
16306 +           %if &EM_NUM_CLASS gt 0 %then %do;
16307 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16308 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16309 +                  &targetOrderString;
16310 +           %end;
16311 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16312 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16313 +           %end;
16314 +           target &targetString %EM_INTERVAL_TARGET;
16315 +           %if "%EM_FREQ" ne "" %then %do;
16316 +             freq %EM_FREQ;
16317 +           %end;
16318 +      %end;
16319 +      %else %do;
16320 +         class  &targetOrderString;
16321 +         target &targetString %EM_INTERVAL_TARGET;
16322 +      %end;
16323 +    run;
16324 +    quit;
16326 +    proc datasets lib=work nolist;
16327 +       delete classout varout;
16328 +    run;
16329 +    quit;
16331 + %end;
16334 + /* run Arbor procedure */
16335 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16336 +  proc arbor data=&INDATA
16338 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16339 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16340 +  %end;
16342 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16343 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16344 +  %end;
16346 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16347 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16348 +  %end;
16350 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16351 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16352 +  %end;
16354 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16355 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16356 +  %end;
16358 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16359 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16360 +  %end;
16361 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16362 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16363 +  %end;
16364 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16365 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16366 +  %end;
16368 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16369 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16370 +      alpha = &EM_PROPERTY_SIGLEVEL
16371 +    %end;
16372 +  %end;
16374 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16375 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16376 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16377 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16378 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16380 +        padjust =
16381 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16382 +          &chaid
16383 +        %end;
16384 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16385 +          DEPTH
16386 +        %end;
16387 +      %end;
16388 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16389 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16390 +         pvars = &num_inputs
16391 +      %end;
16392 +    %end;
16393 +  %end;
16394 +  %else %do;
16395 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16396 +         padjust = NONE
16397 +      %end;
16398 +  %end;
16400 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16401 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16402 +    Maxrules = &num_nrules
16403 +  %end;
16405 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16406 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16407 +    Maxsurrs = &num_nsurrs
16408 +  %end;
16410 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16411 +     Missing=&EM_PROPERTY_MISSINGVALUE
16412 +  %end;
16414 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16415 +     USEVARONCE
16416 +  %end;
16418 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16419 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16420 +  %end;
16423 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16424 +    event = "&targetEvent"
16425 +  %end;
16427 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16428 +     DECSEARCH
16429 +  %end;
16431 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16432 +     PRIORSSEARCH
16433 +  %end;
16435 +  %if &arbor_1 ne %then %do;
16436 +    &arbor_1
16437 +  %end;
16439 +  %if &em_arbor ne %then %do;
16440 +     &em_arbor
16441 +  %end;
16442 +  ;
16443 + %end;
16444 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16445 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16446 +       Performance &EM_PROPERTY_PERFORMANCE
16447 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16448 +         nodesize=&EM_PROPERTY_NODESAMPLE
16449 +       %end;
16450 +       ;
16451 +       interact;
16452 + %end;
16453 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16454 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16455 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16456 +    %put &em_codebar;
16457 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16458 +    %put &errormsg;
16459 +    %put &em_codebar;
16460 +    %goto doendm;
16461 +   %end;
16462 +   %else %do;
16463 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16464 +       Performance &EM_PROPERTY_PERFORMANCE
16465 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16466 +         nodesize=&EM_PROPERTY_NODESAMPLE
16467 +       %end;
16468 +       ;
16469 +       interact;
16470 +   %end;
16471 + %end;
16473 + %else %do;
16474 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16475 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16476 +    %put &em_codebar;
16477 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16478 +    %put &errormsg;
16479 +    %put &em_codebar;
16480 +    %goto doendm;
16481 +   %end;
16482 +   %else %do;
16483 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16484 +       Performance &EM_PROPERTY_PERFORMANCE
16485 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16486 +         nodesize=&EM_PROPERTY_NODESAMPLE
16487 +       %end;
16488 +       ;
16489 +        interact;
16490 +   %end;
16491 + %end;
16493 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16494 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16495 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16496 +    %end;
16498 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16499 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16500 +    %end;
16502 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16503 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16504 +    %end;
16506 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16507 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16508 +    %end;
16510 +    %if "%EM_FREQ" ne "" %then %do;
16511 +       freq %EM_FREQ;
16512 +    %end;
16514 +    %if "&multipleTar" eq "Y" %then %do;
16515 +       /* cycle through all target vars in variableset */
16516 +       %let tdsid = %sysfunc(open(temptarget));
16517 +       %if &tdsid %then %do;
16518 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16519 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16520 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16521 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16522 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16523 +             target &var / level = &lvl
16524 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16525 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16526 +             %end;
16527 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16528 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16529 +             %end;
16530 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16531 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16532 +             %end;
16533 +          %end;
16534 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16535 +       %end;
16536 +       useTarget variable = %EM_TARGET;
16537 +    %end;
16538 +    %else %do;
16539 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16540 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16541 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16542 +      %end;
16543 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16544 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16545 +      %end;
16546 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16547 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16548 +      %end;
16549 +    %end;
16551 +    %if "&multipleTar" eq "N" %then %do;
16552 +      &EM_DEC_STATEMENT;
16553 +    %end;
16555 +    Performance &EM_PROPERTY_PERFORMANCE
16556 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16557 +      nodesize=&EM_PROPERTY_NODESAMPLE
16558 +    %end;
16559 +    ;
16561 +    %if "&intFlag" eq "Y" %then %do;
16562 +       INTERACT Largest;
16563 +       Train maxnewdepth=0;
16564 +    %end;
16566 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16567 +         Assess
16568 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16569 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16570 +              %put &em_codebar;
16571 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16572 +              %put &errormsg;
16573 +              %put &em_codebar;
16574 +            %end;
16575 +            %else %do;
16576 +               Validata=&EM_IMPORT_VALIDATE
16577 +            %end;
16578 +         %end;
16579 +         %else %do;
16580 +           NoValidata
16581 +         %end;
16582 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16583 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16584 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16585 +               %if &dsid %then %do;
16586 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16587 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16588 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16589 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16590 +                   %else %do;
16591 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16592 +                      %else %let measure= MISC;
16593 +                   %end;
16594 +                 %end;
16595 +               %end;
16596 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16597 +            %end;
16598 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16599 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16600 +                 %let measure=ASE;
16601 +              %end;
16602 +              %else %do;
16603 +                 %let measure=MISC;
16604 +              %end;
16605 +            %end;
16606 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16607 +              %let measure=ASE;
16608 +            %end;
16609 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16610 +               %let measure = LIFT;
16611 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16612 +               %if &dsid %then %do;
16613 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16614 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16615 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16616 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16617 +                 %end;
16618 +               %end;
16619 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16620 +            %end;
16621 +            measure=&measure
16622 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16623 +               event = "&targetEvent"
16624 +            %end;
16625 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16626 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16627 +            %end;
16628 +         %end;
16629 +         %if "&multipleTar" eq "N" %then %do;
16630 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16631 +               CV
16632 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16633 +                 CVNITer = &EM_PROPERTY_CVNITER
16634 +               %end;
16635 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16636 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16637 +               %end;
16638 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16639 +                 CVSeed = &EM_PROPERTY_CVSEED
16640 +               %end;
16641 +            %end;
16642 +         %end;
16643 +       %end;
16644 +      ;
16646 +      %if "&intFlag" ne "Y" %then %do;
16647 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16648 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16649 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16650 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16652 +          SUBTREE &subtree
16653 +          %if "&subtree" eq "NLEAVES" %then %do;
16654 +            =&EM_PROPERTY_NSUBTREE
16655 +          %end;
16656 +          ;
16657 +        %end;
16659 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16660 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16661 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16662 +          %end;
16663 +       %end;
16664 +      %end;
16665 + %end;
16668 + MakeMacro nleaves = nleaves;
16669 + save
16670 + %if "&EM_USER_EMTREE" ne "" %then %do;
16671 +   MODEL=&EM_USER_EMTREE
16672 + %end;
16673 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16674 +   SEQUENCE=&EM_USER_OUTSEQ
16675 + %end;
16676 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16677 +   IMPORTANCE=&EM_USER_OUTIMPORT
16678 + %end;
16679 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16680 +   NODESTAT=&EM_USER_OUTNODES
16681 + %end;
16682 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16683 +   SUMMARY=&EM_USER_OUTSUMMARY
16684 + %end;
16685 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16686 +   STATSBYNODE=&EM_USER_OUTSTATS
16687 + %end;
16688 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16689 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16690 + %end;
16691 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16692 +   Pathlistnonmissing=&EM_USER_OUTPATH
16693 + %end;
16694 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16695 +   RULES = &EM_USER_OUTRULES
16696 + %end;
16697 + ;
16699 + %if "&intFlag" ne "Y" %then %do;
16701 +   %let lookupString = ;
16702 +   %if ^%symexist(EM_OPTION) %then
16703 +      %let EM_OPTION=;
16705 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16706 +      %let lookupString = LOOKUP=SELECT;
16707 +   %end;
16709 +   %let codetext=;
16710 +   %let norescodetxt=;
16712 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16713 +     %let codetext=&codetext DUMMY;
16714 +     %let norescodetxt=&norescodetxt DUMMY;
16715 +   %end;
16716 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16717 +     %let codetext=&codetext NOLEAFID;
16718 +     %let norescodetxt=&norescodetxt NOLEAFID;
16719 +   %end;
16720 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16721 +     %let norescodetxt=&norescodetxt NOPRED;
16722 +   %end;
16724 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16725 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16727 +   %if &nnpmml %then %do;
16728 +     code pmml;
16729 +   %end;
16731 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16732 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16733 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16734 +   %end;
16735 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16736 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16737 +   %end;
16738 + %end;
16740 + run;
16741 + quit;
16743 + /*%em_checkerror(); */
16744 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16745 +   /* Delete DMDB catalog */
16746 +   proc datasets lib=work nolist;
16747 +       delete _treeDMDB / mt=cat;
16748 +  run;
16749 +  %end;
16751 + %if &nnpmml %then %do;
16752 +    ods pmml close;
16753 + %end;
16755 +  %doendm:
16757 +%mend em_tree_runTreeProcedure;
16759 +%macro em_tree_createFitStats( multipleTar= );
16762 +  /* create targetTable is multipleTar eq Y */
16763 +  data temptarget;
16764 +    set &EM_DATA_VARIABLESET;
16765 +    where ROLE="TARGET";
16766 +  run;
16768 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16769 +   data &EM_USER_EMOUTFIT;
16770 +     length target $32;
16771 +     merge work.fit_train
16772 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16773 +       work.fit_valid
16774 +     %end;
16775 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16776 +       work.fit_test
16777 +     %end;
16778 +     ;
16779 +     %if "&multipleTar" eq "N" %then %do;
16780 +       target="%EM_TARGET";
16781 +     %end;
16782 +     %else %do;
16783 +       target = _TARGET_;
16784 +     %end;
16785 +     drop _NW_ _SUMW_
16786 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16787 +        _VSUMW_
16788 +     %end;
16789 +     ;
16790 +   run;
16792 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16793 +     proc datasets library=work nolist;
16794 +       delete fit_valid;
16795 +     run;
16796 +   %end;
16797 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16798 +     proc datasets library=work nolist;
16799 +       delete fit_test;
16800 +     run;
16801 +   %end;
16803 +%mend em_tree_createFitStats;
16806 +%macro em_tree_makeEnglishRules;
16808 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16809 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16811 +  /* verify that necessary tables exist and if not, skip processing */
16812 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16813 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16814 +    %goto doendm;
16815 +  %end;
16816 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16817 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16818 +    %goto doendm;
16819 +  %end;
16821 +  /* determine length of variable in outpath dataset */
16822 +  %let vlength= ;
16823 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16824 +  %if &dsid ne %then %do;
16825 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16826 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16827 +  %end;
16828 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16830 +  data tempoutpath;
16831 +    length varname $&vlength;
16832 +    retain varname;
16833 +    set &EM_USER_OUTPATH;
16835 +    if ^missing(variable) then varname=variable;
16836 +    else if ^missing(var_name) then varname=var_name;
16837 +    output;
16838 +  run;
16840 +  /* create an array of generated predicted variable names */
16841 +  %let tree_pred_vars = ;
16842 +  %let tree_pred_label = ;
16843 +  %let numpred= 0;
16844 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16846 +    data _null_;
16847 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16848 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16849 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16850 +     if eof then
16851 +       call symput('numpred', strip(put(_N_, BEST.)));
16852 +    run;
16853 +  %end;
16855 +  /* determine if NPRIORS exists in outnodes  */
16856 +  %local nprior_flag;
16857 +  data _null_;
16858 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16859 +    if eof then do;
16860 +      call symput('nprior_flag', strip(put(npriors, best.)));
16861 +    end;
16862 +  run;
16864 +  proc sort data=tempoutpath; by node; run;
16865 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16867 +  data tempoutpath;
16868 +    merge tempoutpath(in=_a) outnodes(keep= node
16869 +    %if "&nprior_flag" ne "." %then %do;
16870 +      NPRIORS
16871 +    %end;
16872 +    %else %do;
16873 +      N
16874 +    %end;
16875 +    %if &numpred gt 0 %then %do;
16876 +      %do i=1 %to &numpred;
16877 +        &&tree_pred_vars&i
16878 +      %end;
16879 +    %end;
16880 +    );
16881 +    by node;
16882 +    if _a;
16883 +  run;
16885 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16887 +  data _null_;
16888 +    file x;
16889 +    set tempoutpath;
16890 +    by node descending varname;
16891 +    retain origvar oldnode string;
16892 +    length origvar $32 oldnode 8 string $200;
16894 +    if _N_ = 1 then do;
16895 +      origvar = varname;
16896 +      oldnode = node;
16897 +    end;
16899 +    if first.node then do;
16900 +       put "&EM_CODEBAR";
16901 +       put " Node = " node;
16902 +       put "&EM_CODEBAR";
16903 +    end;
16905 +      if first.varname then do;
16906 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16907 +            if MISSING(CHARACTER_VALUE) then do;
16908 +             if NUMERIC_VALUE ne .  then do;
16909 +              if ^first.node then do;
16910 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16911 +              end;
16912 +              else do;
16913 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16914 +              end;
16915 +             end;
16916 +            end;
16917 +            else do;
16918 +              if ^first.node then do;
16919 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16920 +              end;
16921 +              else do;
16922 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16923 +              end;
16924 +             end;
16925 +         end;
16926 +         else if RELATION in ("=") then do;
16927 +            if ^first.node then do;
16928 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16929 +            end;
16930 +            else do;
16931 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16932 +            end;
16933 +         end;
16934 +         else if RELATION in ("ISMISSING") then do;
16935 +            if ^first.node then do;
16936 +              string = " AND "|| strip(varname) || " equals Missing";
16937 +            end;
16938 +            else do;
16939 +              string = "if "|| strip(varname) ||" equals Missing";
16940 +            end;
16941 +         end;
16942 +         else if RELATION in ("ISNOTMISSING") then do;
16943 +            if ^first.node then do;
16944 +              string = " AND "|| strip(varname) || " equals All Values";
16945 +            end;
16946 +            else do;
16947 +              string = "if "|| strip(varname) ||" equals All Values";
16948 +            end;
16949 +         end;
16950 +         if ^missing(varname) then origvar = varname;
16951 +         oldnode=node;
16953 +      end;
16954 +      else do;
16955 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16956 +          if MISSING(CHARACTER_VALUE) then do;
16957 +           if  NUMERIC_VALUE ne .  then do;
16958 +            if ^MISSING(string) then
16959 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16960 +            else
16961 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16962 +           end;
16963 +          end;
16964 +          else do;
16965 +            if ^MISSING(string) then
16966 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16967 +            else
16968 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16969 +          end;
16971 +         end;
16972 +         else if RELATION in ("=") then do;
16973 +           string = strip(string)||", "||strip(character_value);
16974 +         end;
16975 +         else if RELATION in ("ISMISSING") then do;
16977 +         end;
16978 +         if ^missing(varname) then origvar = varname;
16979 +         oldnode=node;
16980 +      end;
16981 +      if last.varname then do;
16982 +         if RELATION in ("ISMISSING") then do;
16983 +           if ^first.varname then do;
16984 +             string = strip(string) || " or MISSING";
16985 +           end;
16986 +         end;
16987 +         put string;
16988 +         if ^missing(varname) then origvar = varname;
16989 +         oldnode=node;
16990 +      end;
16992 +      if last.node then do;
16993 +         put "then ";
16994 +         put " Tree Node Identifier   = " node;
16996 +         %if "&nprior_flag" ne "." %then %do;
16997 +           put " Number of Observations = " NPRIORS;
16998 +         %end;
16999 +         %else %do;
17000 +           put " Number of Observations = " N;
17001 +         %end;
17003 +         %if &numpred gt 0 %then %do;
17004 +           %do i=1 %to &numpred;
17005 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17006 +           %end;
17007 +         %end;
17009 +         put " ";
17010 +         if ^missing(varname) then origvar = varname;
17011 +         oldnode=node;
17012 +      end;
17014 +  run;
17016 +  proc datasets lib=work nolist;
17017 +    delete tempoutpath outnodes;
17018 +  run;
17020 +  %doendm:
17021 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 4743   Memory used = 511K.
NOTE: Visualizza EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.11 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Visualizza EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.09 seconds
 
 
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.11 seconds
 
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.23 seconds
      cpu time            0.14 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 4743   Memory used = 511K.
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.15 seconds
 
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.31 seconds
      cpu time            0.21 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Visualizza EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.99 seconds
      cpu time            0.71 seconds
 
NOTE: 1490978 kilobytes of physical memory.
NOTE: Will use 4743 out of 4743 training cases.
NOTE: Using memory pool with 251824128 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 2826672 bytes of work memory.
NOTE: There were 2035 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The subtree sequence contains 40 subtrees. The largest has 79 nodes and 40 leaves.
NOTE: Using subtree with 75 nodes and 38 leaves.
NOTE: Using subtree with 75 nodes and 38 leaves.
NOTE: Created macro variable NLEAVES equal to 38.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 23 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_EMTREE has 3475 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTNODES has 75 observations and 24 variables.
NOTE: The data set EMWS1.TREE2_OUTPATH has 541 observations and 7 variables.
NOTE: The data set EMWS1.TREE2_OUTRULES has 1641 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 40 observations and 20 variables.
NOTE: The data set EMWS1.TREE2_OUTSTATS has 525 observations and 5 variables.
NOTE: The data set EMWS1.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTTOPOLOGY has 75 observations and 5 variables.
NOTE: External file C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas opened.
NOTE: Visualizza EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.18 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: Visualizza EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.12 seconds
 
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: There were 2035 observations read from the data set EMWS1.PART_VALIDATE.
 
 
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           1.88 seconds
      cpu time            1.39 seconds
 
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.94 seconds
      cpu time            1.42 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 541 observations read from the data set EMWS1.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 541 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 541 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 541 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 75 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 75 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 541 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 75 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 541 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 541 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 541 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,Dimensione (byte)=0,
      Ultima modifica=25 ottobre 2020 22:51:56,
      Create Time=25 ottobre 2020 22:51:56
 
NOTE: 441 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 200.
NOTE: There were 541 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.06 seconds
 
 
NOTE: Fileref X has been deassigned.
17023
17024  *------------------------------------------------------------*;
17025  * End TRAIN: Tree2;
17026  *------------------------------------------------------------*;
 
17027  *------------------------------------------------------------*;
17028  * Close any missing semi colons;
17029  *------------------------------------------------------------*;
17030  ;
17031  ;
17032  ;
17033  ;
17034  quit;
17035  *------------------------------------------------------------*;
17036  * Close any unbalanced quotes;
17037  *------------------------------------------------------------*;
17038  /*; *"; *'; */
17039  ;
17040  run;
17041  quit;
17042  /* Reset EM Options */
17043  options formchar="|----|+|---+=|-/\<>*";
17044  options nocenter ls=256 ps=10000;
17045  goptions reset=all device=GIF NODISPLAY;
 
17046  proc sort data=WORK.EM_USER_REPORT;
17047  by ID VIEW;
17048  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Log di scoring
Data:               25 ottobre 2020
Ora:                22:51:57
*------------------------------------------------------------*
17150  %let EMEXCEPTIONSTRING=;
17151  *------------------------------------------------------------*;
17152  * SCORE: Tree2;
17153  *------------------------------------------------------------*;
17154  %let EM_ACTION = SCORE;
17155  %let syscc = 0;
17156  %macro main;
17157
17158    %if %upcase(&EM_ACTION) = CREATE %then %do;
17159      filename temp catalog 'sashelp.emmodl.tree_create.source';
17160      %include temp;
17161      filename temp;
17162
17163      %em_tree_create;
17164    %end;
17165
17166     %else
17167     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17168
17169         filename temp catalog 'sashelp.emmodl.tree_train.source';
17170         %include temp;
17171         filename temp;
17172         %em_tree_train;
17173     %end;
17174
17175    %else
17176    %if %upcase(&EM_ACTION) = SCORE %then %do;
17177      filename temp catalog 'sashelp.emmodl.tree_score.source';
17178      %include temp;
17179      filename temp;
17180
17181      %em_tree_score;
17182
17183    %end;
17184
17185    %else
17186    %if %upcase(&EM_ACTION) = REPORT %then %do;
17187
17188         filename temp catalog 'sashelp.emmodl.tree_report.source';
17189         %include temp;
17190         filename temp;
17191
17192         %em_tree_report;
17193     %end;
17194
17195    %else
17196    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17197
17198         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17199         %include temp;
17200         filename temp;
17201         %EM_TREE_OPENTREEVIEWER;
17202
17203     %end;
17204
17205    %else
17206    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17207
17208         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17209         %include temp;
17210         filename temp;
17211         %EM_TREE_CLOSETREEVIEWER;
17212
17213     %end;
17214
17215
17216     %doendm:
17217  %mend main;
17218
17219  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17221 +%macro em_tree_score;
17223 +   /* determine if multiple targets will be processed */
17224 +   %let em_tree_multipleTargets=N;
17225 +   %let em_tree_numTarget=1;
17226 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17227 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17228 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17229 +         %let em_tree_multipleTargets=N;
17230 +      %end;
17231 +      %else %do;
17232 +         /* create macro array of targets  */
17233 +         data _null_;
17234 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17235 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17236 +           if eof then
17237 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17238 +        run;
17240 +        %if &em_tree_numTarget gt 1 %then %do;
17241 +           %let em_tree_multipleTargets=Y;
17242 +        %end;
17243 +      %end;
17244 +   %end;
17246 +   /* build flow and publish scoring code */
17247 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17248 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17250 +   filename treeflow "&EM_USER_TREEFLOW";
17251 +   filename treepub "&EM_USER_TREEPUBLISH";
17253 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17254 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17256 +   %em_copyfile(infref=treeflow, outfref=flowref);
17257 +   %em_copyfile(infref=treepub, outfref=pubref);
17259 +   filename treeflow;
17260 +   filename treepub;
17262 +   /* if priors are used, add code to generate unadjusted residuals in export */
17263 +   %let useAdjPriors = N;
17264 +   data _null_;
17265 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17266 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17267 +   run;
17268 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17269 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17270 +      %include temp;
17271 +      filename temp;
17273 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17274 +      filename adjref "&EM_USER_adjResidualCode";
17275 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17277 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17279 +      filename adjref;
17280 +   %end;
17282 +   /* LEAF */
17283 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17284 +      data _null_;
17285 +        file flowref mod;
17286 +        put 'drop _LEAF_;';
17287 +      run;
17289 +      data _null_;
17290 +        file pubref mod;
17291 +        put 'drop _LEAF_;';
17292 +      run;
17294 +   %end;
17296 +   filename flowref;
17297 +   filename pubref;
17299 +   /* em_metachange code */
17300 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17301 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17302 +   %end;
17304 +   /* variable selection based on importance stat    */
17305 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17306 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17307 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17308 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17309 +     %let obs = %sysfunc(fetch(&dsid));
17310 +     %do %while(&obs=0);
17311 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17312 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17313 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17314 +       %let obs = %sysfunc(fetch(&dsid));
17315 +     %end;
17316 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17317 +   %end;
17319 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17320 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17321 +    %let tree_pred_vars = ;
17322 +    %let tree_pred_lvl =;
17323 +    %let numpred= 0;
17325 +    data _null_;
17326 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17327 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17328 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17329 +     if eof then
17330 +       call symput('numpred', strip(put(_N_, BEST.)));
17331 +    run;
17332 +   %end;
17334 +   %if &numpred ne 0 %then %do;
17335 +    %do i=1 %to &numpred;
17336 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17337 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17338 +    %end;
17339 +   %end;
17341 +   /* determine if multiple targets will be processed */
17342 +   %let em_tree_multipleTargets=N;
17343 +   %let em_tree_numTarget=1;
17344 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17345 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17346 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17347 +         %let em_tree_multipleTargets=N;
17348 +      %end;
17349 +      %else %do;
17350 +        data _null_;
17351 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17352 +          if eof then
17353 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17354 +        run;
17356 +        %if &em_tree_numTarget gt 1 %then %do;
17357 +           %let em_tree_multipleTargets=Y;
17358 +        %end;
17359 +     %end;
17360 +   %end;
17362 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17363 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17365 +      /* variable importance */
17366 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17367 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17369 +         %let validexist=0;
17370 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17371 +           %let validexist=1;
17372 +         %end;
17374 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17375 +         /* and the columns may not be generated                                                                                 */
17376 +         %let em_tree_cvexists=;
17377 +         %let em_tree_surrexists=.;
17378 +         data _null_;
17379 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17380 +            if eof then do ;
17381 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17382 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17383 +            end;
17384 +         run;
17386 +         data &EM_USER_OUTIMPORT;
17387 +            set &EM_USER_OUTIMPORT;
17389 +            /* format columns based on Precison value specified */
17390 +            format importance 15.&EM_PROPERTY_PRECISION
17391 +                 %if &validexist %then %do;
17392 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17393 +                 %end;
17394 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17395 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17396 +                 %end;
17397 +            ;
17398 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17399 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17400 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17401 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17402 +                 %if "&em_tree_surrexists" ne "" %then %do;
17403 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17404 +                 %end;
17405 +                 %if &validexist %then %do;
17406 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17407 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17408 +                 %end;
17409 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17410 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17411 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17412 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17413 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17414 +                 %end;
17415 +            ;
17416 +         run;
17418 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17419 +      %end;
17420 +   %end;
17422 +   %doendm:
17423 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,Dimensione (byte)=0,
      Ultima modifica=25 ottobre 2020 22:51:57,
      Create Time=25 ottobre 2020 22:51:57
 
NOTE: 660 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,Dimensione (byte)=0,
      Ultima modifica=25 ottobre 2020 22:51:57,
      Create Time=25 ottobre 2020 22:51:57
 
NOTE: 638 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,Dimensione (byte)=27244,
      Ultima modifica=25 ottobre 2020 22:51:57,
      Create Time=25 ottobre 2020 22:51:57
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,Dimensione (byte)=26599,
      Ultima modifica=25 ottobre 2020 22:51:57,
      Create Time=25 ottobre 2020 22:51:57
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 23 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
17424
17425  *------------------------------------------------------------*;
17426  * End SCORE: Tree2;
17427  *------------------------------------------------------------*;
 
17428  proc sort data=WORK.EM_METACHANGE;
17429  by key uname;
17430  run;
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17431  filename x "C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas";
17432  data _null_;
17433  file x;
17434  put 'if upcase(NAME) = "ALIMENTAZIONE" then do;';
17435  put 'ROLE = "REJECTED";';
17436  put 'end;';
17437  put 'else ';
17438  put 'if upcase(NAME) = "CARROZZERIA" then do;';
17439  put 'ROLE = "REJECTED";';
17440  put 'end;';
17441  put 'else ';
17442  put 'if upcase(NAME) = "CILINDRI" then do;';
17443  put 'ROLE = "REJECTED";';
17444  put 'end;';
17445  put 'else ';
17446  put 'if upcase(NAME) = "CLASSE_EMISSIONI" then do;';
17447  put 'ROLE = "REJECTED";';
17448  put 'end;';
17449  put 'else ';
17450  put 'if upcase(NAME) = "COLORE_ESTERNO" then do;';
17451  put 'ROLE = "REJECTED";';
17452  put 'end;';
17453  put 'else ';
17454  put 'if upcase(NAME) = "CONDITIONAL_ON_PRICE" then do;';
17455  put 'ROLE = "REJECTED";';
17456  put 'end;';
17457  put 'else ';
17458  put 'if upcase(NAME) = "MARCE" then do;';
17459  put 'ROLE = "REJECTED";';
17460  put 'end;';
17461  put 'else ';
17462  put 'if upcase(NAME) = "PER_NEOPATENTATI" then do;';
17463  put 'ROLE = "REJECTED";';
17464  put 'end;';
17465  put 'else ';
17466  put 'if upcase(NAME) = "PORTE" then do;';
17467  put 'ROLE = "REJECTED";';
17468  put 'end;';
17469  put 'else ';
17470  put 'if upcase(NAME) = "POSTI_A_SEDERE" then do;';
17471  put 'ROLE = "REJECTED";';
17472  put 'end;';
17473  put 'else ';
17474  put 'if upcase(NAME) = "Q_TARGET100" then do;';
17475  put 'ROLE = "ASSESS";';
17476  put 'end;';
17477  put 'else ';
17478  put 'if upcase(NAME) = "Q_TARGET101" then do;';
17479  put 'ROLE = "ASSESS";';
17480  put 'end;';
17481  put 'else ';
17482  put 'if upcase(NAME) = "REP_ANNO" then do;';
17483  put 'ROLE = "REJECTED";';
17484  put 'end;';
17485  put 'else ';
17486  put 'if upcase(NAME) = "REP_CILINDRATA" then do;';
17487  put 'ROLE = "REJECTED";';
17488  put 'end;';
17489  put 'else ';
17490  put 'if upcase(NAME) = "REP_TIPO_DI_VERNICE" then do;';
17491  put 'ROLE = "REJECTED";';
17492  put 'end;';
17493  put 'else ';
17494  put 'if upcase(NAME) = "TAGLIANDI_CERTIFICATI" then do;';
17495  put 'ROLE = "REJECTED";';
17496  put 'end;';
17497  put 'else ';
17498  put 'if upcase(NAME) = "TIPO_DI_CAMBIO" then do;';
17499  put 'ROLE = "REJECTED";';
17500  put 'end;';
17501  put 'else ';
17502  put 'if upcase(NAME) = "USATO_GARANTITO" then do;';
17503  put 'ROLE = "REJECTED";';
17504  put 'end;';
17505  put 'else ';
17506  put 'if upcase(NAME) = "VEICOLO_PER_NON_FUMATORI" then do;';
17507  put 'ROLE = "REJECTED";';
17508  put 'end;';
17509  put 'else ';
17510  put 'if upcase(NAME) = "_NODE_" then do;';
17511  put 'ROLE = "SEGMENT";';
17512  put 'LEVEL = "NOMINAL";';
17513  put 'end;';
17514  run;
 
NOTE: The file X is:
      Nome file=C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,Dimensione (byte)=0,
      Ultima modifica=25 ottobre 2020 22:51:58,
      Create Time=23 ottobre 2020 16:13:40
 
NOTE: 80 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17515  filename x;
NOTE: Fileref X has been deassigned.
 
17516  filename emflow "C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17517  *------------------------------------------------------------*;
17518  * Tree2: Scoring DATA data;
17519  *------------------------------------------------------------*;
17520  data EMWS1.Tree2_TRAIN
17521  / view=EMWS1.Tree2_TRAIN
17522  ;
17523  set EMWS1.Repl_TRAIN
17524  ;
17525  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17526 +****************************************************************;
17527 +******             DECISION TREE SCORING CODE             ******;
17528 +****************************************************************;
17529 +
17530 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17531 +LENGTH F_target10  $   12;
17532 +LENGTH I_target10  $   12;
17533 +LENGTH _WARN_  $    4;
17534 +
17535 +******              LABELS FOR NEW VARIABLES              ******;
17536 +label _NODE_ = 'Nodo' ;
17537 +label _LEAF_ = 'Foglia' ;
17538 +label P_target101 = 'Previsto: target10=1' ;
17539 +label P_target100 = 'Previsto: target10=0' ;
17540 +label Q_target101 = 'P non corretto: target10=1' ;
17541 +label Q_target100 = 'P non corretto: target10=0' ;
17542 +label V_target101 = 'Convalidato: target10=1' ;
17543 +label V_target100 = 'Convalidato: target10=0' ;
17544 +label R_target101 = 'Residuo: target10=1' ;
17545 +label R_target100 = 'Residuo: target10=0' ;
17546 +label F_target10 = 'Da: target10' ;
17547 +label I_target10 = 'In: target10' ;
17548 +label U_target10 = 'Non normalizzata in: target10' ;
17549 +label _WARN_ = 'Avvertimenti' ;
17550 +
17551 +
17552 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17553 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17554 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17555 +LENGTH _ARBFMT_20 $     20; DROP _ARBFMT_20;
17556 +_ARBFMT_20 = ' '; /* Initialize to avoid warning. */
17557 +LENGTH _ARBFMT_10 $     10; DROP _ARBFMT_10;
17558 +_ARBFMT_10 = ' '; /* Initialize to avoid warning. */
17559 +
17560 +
17561 +_ARBFMT_12 = PUT( target10 , BEST.);
17562 + %DMNORMCP( _ARBFMT_12, F_target10 );
17563 +
17564 +******             ASSIGN OBSERVATION TO NODE             ******;
17565 +_ARBFMT_20 = PUT( Modello , $20.);
17566 + %DMNORMIP( _ARBFMT_20);
17567 +IF _ARBFMT_20 IN ('FORTWO' ,'Q3' ,'KONA' ,'A4' ,'COOPER' ,'NIRO' ,'CAPTUR' ,
17568 +  'TIVOLI' ,'RENEGADE' ,'COMPASS' ,'GRANDLAND X' ,'OUTLANDER' ,'TIPO' ,
17569 +  'CLIO' ,'GIULIETTA' ,'500C' ,'Q5' ,'NX 300' ,'3008' ,'PASSAT VARIANT' ,
17570 +  '508' ,'520' ,'A6' ,'LEON' ,'COROLLA' ,'CAYENNE' ,'GOLF' ,'A5' ,'A3' ,
17571 +  'POLO' ,'STELVIO' ,'KADJAR' ,'WRANGLER' ,'Q2' ,'OCTAVIA' ,'TALISMAN' ,
17572 +  'ASTRA' ,'GOLF VARIANT' ,'318' ,'GIULIA' ,'E-PACE' ,'GRAND C4 SPACETOURER' ,
17573 +  'SCENIC' ,'DOBLO' ,'CADDY' ,'218' ,'TOURAN' ,'FIORINO' ,'A4 ALLROAD' ,
17574 +  'ESPACE' ) THEN DO;
17575 +  IF  NOT MISSING(REP_price ) AND
17576 +                   42550 <= REP_price  THEN DO;
17577 +    _ARBFMT_20 = PUT( Modello , $20.);
17578 +     %DMNORMIP( _ARBFMT_20);
17579 +    IF _ARBFMT_20 IN ('Q5' ,'520' ,'A6' ,'CAYENNE' ,'WRANGLER' ) THEN DO;
17580 +      IF  NOT MISSING(REP_price ) AND
17581 +                       50740 <= REP_price  THEN DO;
17582 +        _NODE_  =                   23;
17583 +        _LEAF_  =                   20;
17584 +        P_target101  =                 0.45;
17585 +        P_target100  =                 0.55;
17586 +        Q_target101  =                 0.45;
17587 +        Q_target100  =                 0.55;
17588 +        V_target101  =     0.57142857142857;
17589 +        V_target100  =     0.42857142857142;
17590 +        I_target10  = '0' ;
17591 +        U_target10  =                    0;
17592 +        END;
17593 +      ELSE DO;
17594 +        _NODE_  =                   22;
17595 +        _LEAF_  =                   19;
17596 +        P_target101  =                    1;
17597 +        P_target100  =                    0;
17598 +        Q_target101  =                    1;
17599 +        Q_target100  =                    0;
17600 +        V_target101  =     0.88888888888888;
17601 +        V_target100  =     0.11111111111111;
17602 +        I_target10  = '1' ;
17603 +        U_target10  =                    1;
17604 +        END;
17605 +      END;
17606 +    ELSE DO;
17607 +      IF  NOT MISSING(REP_price ) AND
17608 +        REP_price  <                45200 THEN DO;
17609 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
17610 +          REP_Emissioni_di_CO2  <                  133 THEN DO;
17611 +          _NODE_  =                   38;
17612 +          _LEAF_  =                   14;
17613 +          P_target101  =     0.07692307692307;
17614 +          P_target100  =     0.92307692307692;
17615 +          Q_target101  =     0.07692307692307;
17616 +          Q_target100  =     0.92307692307692;
17617 +          V_target101  =     0.11111111111111;
17618 +          V_target100  =     0.88888888888888;
17619 +          I_target10  = '0' ;
17620 +          U_target10  =                    0;
17621 +          END;
17622 +        ELSE DO;
17623 +          _ARBFMT_20 = PUT( Modello , $20.);
17624 +           %DMNORMIP( _ARBFMT_20);
17625 +          IF _ARBFMT_20 IN ('STELVIO' ) THEN DO;
17626 +            _NODE_  =                   64;
17627 +            _LEAF_  =                   15;
17628 +            P_target101  =                    1;
17629 +            P_target100  =                    0;
17630 +            Q_target101  =                    1;
17631 +            Q_target100  =                    0;
17632 +            V_target101  =                    1;
17633 +            V_target100  =                    0;
17634 +            I_target10  = '1' ;
17635 +            U_target10  =                    1;
17636 +            END;
17637 +          ELSE DO;
17638 +            _NODE_  =                   65;
17639 +            _LEAF_  =                   16;
17640 +            P_target101  =                  0.5;
17641 +            P_target100  =                  0.5;
17642 +            Q_target101  =                  0.5;
17643 +            Q_target100  =                  0.5;
17644 +            V_target101  =                    0;
17645 +            V_target100  =                    1;
17646 +            I_target10  = '1' ;
17647 +            U_target10  =                    1;
17648 +            END;
17649 +          END;
17650 +        END;
17651 +      ELSE DO;
17652 +        _ARBFMT_12 = PUT( Posti_a_sedere , BEST12.);
17653 +         %DMNORMIP( _ARBFMT_12);
17654 +        IF _ARBFMT_12 IN ('4' ) THEN DO;
17655 +          _NODE_  =                   40;
17656 +          _LEAF_  =                   17;
17657 +          P_target101  =                  0.4;
17658 +          P_target100  =                  0.6;
17659 +          Q_target101  =                  0.4;
17660 +          Q_target100  =                  0.6;
17661 +          V_target101  =                    1;
17662 +          V_target100  =                    0;
17663 +          I_target10  = '0' ;
17664 +          U_target10  =                    0;
17665 +          END;
17666 +        ELSE DO;
17667 +          _NODE_  =                   41;
17668 +          _LEAF_  =                   18;
17669 +          P_target101  =     0.01408450704225;
17670 +          P_target100  =     0.98591549295774;
17671 +          Q_target101  =     0.01408450704225;
17672 +          Q_target100  =     0.98591549295774;
17673 +          V_target101  =     0.03448275862068;
17674 +          V_target100  =     0.96551724137931;
17675 +          I_target10  = '0' ;
17676 +          U_target10  =                    0;
17677 +          END;
17678 +        END;
17679 +      END;
17680 +    END;
17681 +  ELSE DO;
17682 +    _ARBFMT_20 = PUT( Modello , $20.);
17683 +     %DMNORMIP( _ARBFMT_20);
17684 +    IF _ARBFMT_20 IN ('KONA' ,'COOPER' ,'NIRO' ,'TIVOLI' ,'GRANDLAND X' ,
17685 +    'CLIO' ,'COROLLA' ,'A3' ,'POLO' ,'KADJAR' ,'Q2' ,'ASTRA' ,'SCENIC' ,
17686 +    'DOBLO' ,'218' ,'FIORINO' ) THEN DO;
17687 +      IF  NOT MISSING(REP_price ) AND
17688 +        REP_price  <                18450 THEN DO;
17689 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
17690 +                            96 <= REP_Emissioni_di_CO2  THEN DO;
17691 +          _NODE_  =                   35;
17692 +          _LEAF_  =                    9;
17693 +          P_target101  =     0.95238095238095;
17694 +          P_target100  =     0.04761904761904;
17695 +          Q_target101  =     0.95238095238095;
17696 +          Q_target100  =     0.04761904761904;
17697 +          V_target101  =                    1;
17698 +          V_target100  =                    0;
17699 +          I_target10  = '1' ;
17700 +          U_target10  =                    1;
17701 +          END;
17702 +        ELSE DO;
17703 +          IF  NOT MISSING(REP_price ) AND
17704 +                           15770 <= REP_price  THEN DO;
17705 +            _NODE_  =                   59;
17706 +            _LEAF_  =                    8;
17707 +            P_target101  =     0.33333333333333;
17708 +            P_target100  =     0.66666666666666;
17709 +            Q_target101  =     0.33333333333333;
17710 +            Q_target100  =     0.66666666666666;
17711 +            V_target101  =                    0;
17712 +            V_target100  =                    1;
17713 +            I_target10  = '0' ;
17714 +            U_target10  =                    0;
17715 +            END;
17716 +          ELSE DO;
17717 +            _NODE_  =                   58;
17718 +            _LEAF_  =                    7;
17719 +            P_target101  =                    1;
17720 +            P_target100  =                    0;
17721 +            Q_target101  =                    1;
17722 +            Q_target100  =                    0;
17723 +            V_target101  =                    1;
17724 +            V_target100  =                    0;
17725 +            I_target10  = '1' ;
17726 +            U_target10  =                    1;
17727 +            END;
17728 +          END;
17729 +        END;
17730 +      ELSE DO;
17731 +        _ARBFMT_20 = PUT( Modello , $20.);
17732 +         %DMNORMIP( _ARBFMT_20);
17733 +        IF _ARBFMT_20 IN ('TIVOLI' ,'CLIO' ,'POLO' ,'DOBLO' ) THEN DO;
17734 +          IF  NOT MISSING(REP_Consumo_Carburante_Totale ) AND
17735 +                            8.35 <= REP_Consumo_Carburante_Totale  THEN DO;
17736 +            _NODE_  =                   63;
17737 +            _LEAF_  =                   13;
17738 +            P_target101  =                  0.2;
17739 +            P_target100  =                  0.8;
17740 +            Q_target101  =                  0.2;
17741 +            Q_target100  =                  0.8;
17742 +            V_target101  =     0.33333333333333;
17743 +            V_target100  =     0.66666666666666;
17744 +            I_target10  = '0' ;
17745 +            U_target10  =                    0;
17746 +            END;
17747 +          ELSE DO;
17748 +            _NODE_  =                   62;
17749 +            _LEAF_  =                   12;
17750 +            P_target101  =                    0;
17751 +            P_target100  =                    1;
17752 +            Q_target101  =                    0;
17753 +            Q_target100  =                    1;
17754 +            V_target101  =                    0;
17755 +            V_target100  =                    1;
17756 +            I_target10  = '0' ;
17757 +            U_target10  =                    0;
17758 +            END;
17759 +          END;
17760 +        ELSE DO;
17761 +          IF  NOT MISSING(REP_price ) AND
17762 +                           33400 <= REP_price  THEN DO;
17763 +            _NODE_  =                   61;
17764 +            _LEAF_  =                   11;
17765 +            P_target101  =                    0;
17766 +            P_target100  =                    1;
17767 +            Q_target101  =                    0;
17768 +            Q_target100  =                    1;
17769 +            V_target101  =                    0;
17770 +            V_target100  =                    1;
17771 +            I_target10  = '0' ;
17772 +            U_target10  =                    0;
17773 +            END;
17774 +          ELSE DO;
17775 +            _NODE_  =                   60;
17776 +            _LEAF_  =                   10;
17777 +            P_target101  =     0.68032786885245;
17778 +            P_target100  =     0.31967213114754;
17779 +            Q_target101  =     0.68032786885245;
17780 +            Q_target100  =     0.31967213114754;
17781 +            V_target101  =     0.67647058823529;
17782 +            V_target100  =      0.3235294117647;
17783 +            I_target10  = '1' ;
17784 +            U_target10  =                    1;
17785 +            END;
17786 +          END;
17787 +        END;
17788 +      END;
17789 +    ELSE DO;
17790 +      _ARBFMT_20 = PUT( Modello , $20.);
17791 +       %DMNORMIP( _ARBFMT_20);
17792 +      IF _ARBFMT_20 IN ('TIPO' ,'GIULIETTA' ,'PASSAT VARIANT' ,'GOLF' ,
17793 +      'OCTAVIA' ,'GOLF VARIANT' ,'GRAND C4 SPACETOURER' ,'CADDY' ) THEN DO;
17794 +        IF  NOT MISSING(REP_price ) AND
17795 +                         25800 <= REP_price  THEN DO;
17796 +          _ARBFMT_20 = PUT( Modello , $20.);
17797 +           %DMNORMIP( _ARBFMT_20);
17798 +          IF _ARBFMT_20 IN ('PASSAT VARIANT' ) THEN DO;
17799 +            _NODE_  =                   54;
17800 +            _LEAF_  =                    3;
17801 +            P_target101  =     0.84210526315789;
17802 +            P_target100  =      0.1578947368421;
17803 +            Q_target101  =     0.84210526315789;
17804 +            Q_target100  =      0.1578947368421;
17805 +            V_target101  =                    1;
17806 +            V_target100  =                    0;
17807 +            I_target10  = '1' ;
17808 +            U_target10  =                    1;
17809 +            END;
17810 +          ELSE DO;
17811 +            _NODE_  =                   55;
17812 +            _LEAF_  =                    4;
17813 +            P_target101  =                    0;
17814 +            P_target100  =                    1;
17815 +            Q_target101  =                    0;
17816 +            Q_target100  =                    1;
17817 +            V_target101  =     0.08333333333333;
17818 +            V_target100  =     0.91666666666666;
17819 +            I_target10  = '0' ;
17820 +            U_target10  =                    0;
17821 +            END;
17822 +          END;
17823 +        ELSE DO;
17824 +          IF  NOT MISSING(REP_price ) AND
17825 +            REP_price  <                16190 THEN DO;
17826 +            _NODE_  =                   52;
17827 +            _LEAF_  =                    1;
17828 +            P_target101  =                    1;
17829 +            P_target100  =                    0;
17830 +            Q_target101  =                    1;
17831 +            Q_target100  =                    0;
17832 +            V_target101  =                    1;
17833 +            V_target100  =                    0;
17834 +            I_target10  = '1' ;
17835 +            U_target10  =                    1;
17836 +            END;
17837 +          ELSE DO;
17838 +            _NODE_  =                   53;
17839 +            _LEAF_  =                    2;
17840 +            P_target101  =     0.79423868312757;
17841 +            P_target100  =     0.20576131687242;
17842 +            Q_target101  =     0.79423868312757;
17843 +            Q_target100  =     0.20576131687242;
17844 +            V_target101  =     0.77551020408163;
17845 +            V_target100  =     0.22448979591836;
17846 +            I_target10  = '1' ;
17847 +            U_target10  =                    1;
17848 +            END;
17849 +          END;
17850 +        END;
17851 +      ELSE DO;
17852 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
17853 +          REP_Emissioni_di_CO2  <                 64.5 THEN DO;
17854 +          _NODE_  =                   32;
17855 +          _LEAF_  =                    5;
17856 +          P_target101  =                  0.6;
17857 +          P_target100  =                  0.4;
17858 +          Q_target101  =                  0.6;
17859 +          Q_target100  =                  0.4;
17860 +          V_target101  =     0.33333333333333;
17861 +          V_target100  =     0.66666666666666;
17862 +          I_target10  = '1' ;
17863 +          U_target10  =                    1;
17864 +          END;
17865 +        ELSE DO;
17866 +          _NODE_  =                   33;
17867 +          _LEAF_  =                    6;
17868 +          P_target101  =     0.97066326530612;
17869 +          P_target100  =     0.02933673469387;
17870 +          Q_target101  =     0.97066326530612;
17871 +          Q_target100  =     0.02933673469387;
17872 +          V_target101  =     0.97126436781609;
17873 +          V_target100  =      0.0287356321839;
17874 +          I_target10  = '1' ;
17875 +          U_target10  =                    1;
17876 +          END;
17877 +        END;
17878 +      END;
17879 +    END;
17880 +  END;
17881 +ELSE DO;
17882 +  _ARBFMT_20 = PUT( Modello , $20.);
17883 +   %DMNORMIP( _ARBFMT_20);
17884 +  IF _ARBFMT_20 IN ('E-TRON' ,'DS 3 CROSSBACK' ,'LEAF' ,'208' ,'PARTNER' ,
17885 +    'KANGOO' ,'NEW PANDA' ,'500' ,'PANDA' ,'YPSILON' ,'TWINGO' ,'500X' ,
17886 +    'STONIC' ,'SPORTAGE' ,'CROSSLAND X' ,'SANDERO' ,'FIESTA' ,'C3' ,'X1' ,
17887 +    'C-HR' ,'XV' ,'YARIS' ,'A 250' ,'T-ROC' ,'ARONA' ,'ATECA' ,'KAMIQ' ,
17888 +    'QASHQAI' ,'X-TRAIL' ,'T-CROSS' ,'MEGANE' ,'FOCUS' ,'308' ,'C4 CACTUS' ,
17889 +    'IBIZA' ,'COMBO' ,'420' ,'C 220' ,'L200' ,'COOPER D COUNTRYMAN' ,
17890 +    'CHEROKEE' ,'INSIGNIA' ,'COOPER D CLUBMAN' ,'320' ,'730' ) THEN DO;
17891 +    IF  NOT MISSING(REP_price ) AND
17892 +      REP_price  <                 9445 THEN DO;
17893 +      _NODE_  =                   14;
17894 +      _LEAF_  =                   31;
17895 +      P_target101  =     0.87096774193548;
17896 +      P_target100  =     0.12903225806451;
17897 +      Q_target101  =     0.87096774193548;
17898 +      Q_target100  =     0.12903225806451;
17899 +      V_target101  =     0.83333333333333;
17900 +      V_target100  =     0.16666666666666;
17901 +      I_target10  = '1' ;
17902 +      U_target10  =                    1;
17903 +      END;
17904 +    ELSE DO;
17905 +      IF  NOT MISSING(REP_Peso_a_vuoto ) AND
17906 +                      1263.5 <= REP_Peso_a_vuoto  THEN DO;
17907 +        IF  NOT MISSING(REP_price ) AND
17908 +          REP_price  <                17125 THEN DO;
17909 +          _NODE_  =                   50;
17910 +          _LEAF_  =                   36;
17911 +          P_target101  =     0.79166666666666;
17912 +          P_target100  =     0.20833333333333;
17913 +          Q_target101  =     0.79166666666666;
17914 +          Q_target100  =     0.20833333333333;
17915 +          V_target101  =     0.83333333333333;
17916 +          V_target100  =     0.16666666666666;
17917 +          I_target10  = '1' ;
17918 +          U_target10  =                    1;
17919 +          END;
17920 +        ELSE DO;
17921 +          _ARBFMT_20 = PUT( Modello , $20.);
17922 +           %DMNORMIP( _ARBFMT_20);
17923 +          IF _ARBFMT_20 IN ('DS 3 CROSSBACK' ,'C-HR' ,'QASHQAI' ,'420' ) THEN
17924 +           DO;
17925 +            _NODE_  =                   78;
17926 +            _LEAF_  =                   37;
17927 +            P_target101  =     0.22666666666666;
17928 +            P_target100  =     0.77333333333333;
17929 +            Q_target101  =     0.22666666666666;
17930 +            Q_target100  =     0.77333333333333;
17931 +            V_target101  =     0.12903225806451;
17932 +            V_target100  =     0.87096774193548;
17933 +            I_target10  = '0' ;
17934 +            U_target10  =                    0;
17935 +            END;
17936 +          ELSE DO;
17937 +            _NODE_  =                   79;
17938 +            _LEAF_  =                   38;
17939 +            P_target101  =     0.02145922746781;
17940 +            P_target100  =     0.97854077253218;
17941 +            Q_target101  =     0.02145922746781;
17942 +            Q_target100  =     0.97854077253218;
17943 +            V_target101  =     0.02061855670103;
17944 +            V_target100  =     0.97938144329896;
17945 +            I_target10  = '0' ;
17946 +            U_target10  =                    0;
17947 +            END;
17948 +          END;
17949 +        END;
17950 +      ELSE DO;
17951 +        IF  NOT MISSING(REP_price ) AND
17952 +          REP_price  <                11725 THEN DO;
17953 +          _ARBFMT_20 = PUT( Modello , $20.);
17954 +           %DMNORMIP( _ARBFMT_20);
17955 +          IF _ARBFMT_20 IN ('500' ) THEN DO;
17956 +            _NODE_  =                   72;
17957 +            _LEAF_  =                   32;
17958 +            P_target101  =                    1;
17959 +            P_target100  =                    0;
17960 +            Q_target101  =                    1;
17961 +            Q_target100  =                    0;
17962 +            V_target101  =                    1;
17963 +            V_target100  =                    0;
17964 +            I_target10  = '1' ;
17965 +            U_target10  =                    1;
17966 +            END;
17967 +          ELSE DO;
17968 +            _NODE_  =                   73;
17969 +            _LEAF_  =                   33;
17970 +            P_target101  =     0.03246753246753;
17971 +            P_target100  =     0.96753246753246;
17972 +            Q_target101  =     0.03246753246753;
17973 +            Q_target100  =     0.96753246753246;
17974 +            V_target101  =     0.04838709677419;
17975 +            V_target100  =      0.9516129032258;
17976 +            I_target10  = '0' ;
17977 +            U_target10  =                    0;
17978 +            END;
17979 +          END;
17980 +        ELSE DO;
17981 +          _ARBFMT_20 = PUT( Modello , $20.);
17982 +           %DMNORMIP( _ARBFMT_20);
17983 +          IF _ARBFMT_20 IN ('LEAF' ,'PARTNER' ,'500' ,'PANDA' ,'YPSILON' ,
17984 +          'TWINGO' ,'500X' ,'STONIC' ,'CROSSLAND X' ,'SANDERO' ,'FIESTA' ,
17985 +          'C-HR' ,'KAMIQ' ,'X-TRAIL' ,'T-CROSS' ,'C4 CACTUS' ,'IBIZA' ,
17986 +          'COMBO' ,'INSIGNIA' ,'COOPER D CLUBMAN' ,'320' ) THEN DO;
17987 +            _NODE_  =                   75;
17988 +            _LEAF_  =                   35;
17989 +            P_target101  =     0.00173010380622;
17990 +            P_target100  =     0.99826989619377;
17991 +            Q_target101  =     0.00173010380622;
17992 +            Q_target100  =     0.99826989619377;
17993 +            V_target101  =     0.01239669421487;
17994 +            V_target100  =     0.98760330578512;
17995 +            I_target10  = '0' ;
17996 +            U_target10  =                    0;
17997 +            END;
17998 +          ELSE DO;
17999 +            _NODE_  =                   74;
18000 +            _LEAF_  =                   34;
18001 +            P_target101  =     0.12962962962962;
18002 +            P_target100  =     0.87037037037037;
18003 +            Q_target101  =     0.12962962962962;
18004 +            Q_target100  =     0.87037037037037;
18005 +            V_target101  =     0.09009009009009;
18006 +            V_target100  =     0.90990990990991;
18007 +            I_target10  = '0' ;
18008 +            U_target10  =                    0;
18009 +            END;
18010 +          END;
18011 +        END;
18012 +      END;
18013 +    END;
18014 +  ELSE DO;
18015 +    IF  NOT MISSING(REP_price ) AND
18016 +      REP_price  <                15820 THEN DO;
18017 +      _ARBFMT_20 = PUT( Modello , $20.);
18018 +       %DMNORMIP( _ARBFMT_20);
18019 +      IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ,'500L' ) THEN DO;
18020 +        _ARBFMT_20 = PUT( Modello , $20.);
18021 +         %DMNORMIP( _ARBFMT_20);
18022 +        IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ) THEN DO;
18023 +          IF  NOT MISSING(REP_price ) AND
18024 +                           15045 <= REP_price  THEN DO;
18025 +            _NODE_  =                   67;
18026 +            _LEAF_  =                   22;
18027 +            P_target101  =                  0.5;
18028 +            P_target100  =                  0.5;
18029 +            Q_target101  =                  0.5;
18030 +            Q_target100  =                  0.5;
18031 +            V_target101  =                 0.25;
18032 +            V_target100  =                 0.75;
18033 +            I_target10  = '1' ;
18034 +            U_target10  =                    1;
18035 +            END;
18036 +          ELSE DO;
18037 +            _NODE_  =                   66;
18038 +            _LEAF_  =                   21;
18039 +            P_target101  =                    1;
18040 +            P_target100  =                    0;
18041 +            Q_target101  =                    1;
18042 +            Q_target100  =                    0;
18043 +            V_target101  =                    1;
18044 +            V_target100  =                    0;
18045 +            I_target10  = '1' ;
18046 +            U_target10  =                    1;
18047 +            END;
18048 +          END;
18049 +        ELSE DO;
18050 +          _NODE_  =                   43;
18051 +          _LEAF_  =                   23;
18052 +          P_target101  =                    1;
18053 +          P_target100  =                    0;
18054 +          Q_target101  =                    1;
18055 +          Q_target100  =                    0;
18056 +          V_target101  =                    1;
18057 +          V_target100  =                    0;
18058 +          I_target10  = '1' ;
18059 +          U_target10  =                    1;
18060 +          END;
18061 +        END;
18062 +      ELSE DO;
18063 +        IF  NOT MISSING(REP_price ) AND
18064 +          REP_price  <                12550 THEN DO;
18065 +          _NODE_  =                   44;
18066 +          _LEAF_  =                   24;
18067 +          P_target101  =                 0.95;
18068 +          P_target100  =                 0.05;
18069 +          Q_target101  =                 0.95;
18070 +          Q_target100  =                 0.05;
18071 +          V_target101  =                    1;
18072 +          V_target100  =                    0;
18073 +          I_target10  = '1' ;
18074 +          U_target10  =                    1;
18075 +          END;
18076 +        ELSE DO;
18077 +          _NODE_  =                   45;
18078 +          _LEAF_  =                   25;
18079 +          P_target101  =     0.03703703703703;
18080 +          P_target100  =     0.96296296296296;
18081 +          Q_target101  =     0.03703703703703;
18082 +          Q_target100  =     0.96296296296296;
18083 +          V_target101  =     0.21052631578947;
18084 +          V_target100  =     0.78947368421052;
18085 +          I_target10  = '0' ;
18086 +          U_target10  =                    0;
18087 +          END;
18088 +        END;
18089 +      END;
18090 +    ELSE DO;
18091 +      _ARBFMT_20 = PUT( Modello , $20.);
18092 +       %DMNORMIP( _ARBFMT_20);
18093 +      IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ,'500L' ) THEN DO;
18094 +        _NODE_  =                   27;
18095 +        _LEAF_  =                   30;
18096 +        P_target101  =                    0;
18097 +        P_target100  =                    1;
18098 +        Q_target101  =                    0;
18099 +        Q_target100  =                    1;
18100 +        V_target101  =                    0;
18101 +        V_target100  =                    1;
18102 +        I_target10  = '0' ;
18103 +        U_target10  =                    0;
18104 +        END;
18105 +      ELSE DO;
18106 +        IF  NOT MISSING(REP_price ) AND
18107 +          REP_price  <                20620 THEN DO;
18108 +          IF  NOT MISSING(REP_Consumo_Carburante_Totale ) AND
18109 +                            4.15 <= REP_Consumo_Carburante_Totale  THEN DO;
18110 +            _NODE_  =                   69;
18111 +            _LEAF_  =                   27;
18112 +            P_target101  =               0.8125;
18113 +            P_target100  =               0.1875;
18114 +            Q_target101  =               0.8125;
18115 +            Q_target100  =               0.1875;
18116 +            V_target101  =     0.77419354838709;
18117 +            V_target100  =      0.2258064516129;
18118 +            I_target10  = '1' ;
18119 +            U_target10  =                    1;
18120 +            END;
18121 +          ELSE DO;
18122 +            _NODE_  =                   68;
18123 +            _LEAF_  =                   26;
18124 +            P_target101  =     0.29411764705882;
18125 +            P_target100  =     0.70588235294117;
18126 +            Q_target101  =     0.29411764705882;
18127 +            Q_target100  =     0.70588235294117;
18128 +            V_target101  =     0.16666666666666;
18129 +            V_target100  =     0.83333333333333;
18130 +            I_target10  = '0' ;
18131 +            U_target10  =                    0;
18132 +            END;
18133 +          END;
18134 +        ELSE DO;
18135 +          _ARBFMT_10 = PUT( Tipo_di_unita , $10.);
18136 +           %DMNORMIP( _ARBFMT_10);
18137 +          IF _ARBFMT_10 IN ('POSTERIORE' ) THEN DO;
18138 +            _NODE_  =                   70;
18139 +            _LEAF_  =                   28;
18140 +            P_target101  =     0.70588235294117;
18141 +            P_target100  =     0.29411764705882;
18142 +            Q_target101  =     0.70588235294117;
18143 +            Q_target100  =     0.29411764705882;
18144 +            V_target101  =     0.58333333333333;
18145 +            V_target100  =     0.41666666666666;
18146 +            I_target10  = '1' ;
18147 +            U_target10  =                    1;
18148 +            END;
18149 +          ELSE DO;
18150 +            _NODE_  =                   71;
18151 +            _LEAF_  =                   29;
18152 +            P_target101  =     0.21813031161473;
18153 +            P_target100  =     0.78186968838526;
18154 +            Q_target101  =     0.21813031161473;
18155 +            Q_target100  =     0.78186968838526;
18156 +            V_target101  =     0.22077922077922;
18157 +            V_target100  =     0.77922077922077;
18158 +            I_target10  = '0' ;
18159 +            U_target10  =                    0;
18160 +            END;
18161 +          END;
18162 +        END;
18163 +      END;
18164 +    END;
18165 +  END;
18166 +
18167 +*****  RESIDUALS R_ *************;
18168 +IF  F_target10  NE '1'
18169 +AND F_target10  NE '0'  THEN DO;
18170 +        R_target101  = .;
18171 +        R_target100  = .;
18172 + END;
18173 + ELSE DO;
18174 +       R_target101  =  -P_target101 ;
18175 +       R_target100  =  -P_target100 ;
18176 +       SELECT( F_target10  );
18177 +          WHEN( '1'  ) R_target101  = R_target101  +1;
18178 +          WHEN( '0'  ) R_target100  = R_target100  +1;
18179 +       END;
18180 + END;
18181 +
18182 +****************************************************************;
18183 +******          END OF DECISION TREE SCORING CODE         ******;
18184 +****************************************************************;
18185 +
18186 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18187  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Visualizza EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
 
 
18188  quit;
18189  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
18190  filename emflow "C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
18191  *------------------------------------------------------------*;
18192  * Tree2: Scoring VALIDATE data;
18193  *------------------------------------------------------------*;
18194  data EMWS1.Tree2_VALIDATE
18195  / view=EMWS1.Tree2_VALIDATE
18196  ;
18197  set EMWS1.Repl_VALIDATE
18198  ;
18199  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Maria Vallarelli\Desktop\MASTER SLIDE\STATISTICA\LABORATORIO\AUTOSCOUT\autoscout\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
18200 +****************************************************************;
18201 +******             DECISION TREE SCORING CODE             ******;
18202 +****************************************************************;
18203 +
18204 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
18205 +LENGTH F_target10  $   12;
18206 +LENGTH I_target10  $   12;
18207 +LENGTH _WARN_  $    4;
18208 +
18209 +******              LABELS FOR NEW VARIABLES              ******;
18210 +label _NODE_ = 'Nodo' ;
18211 +label _LEAF_ = 'Foglia' ;
18212 +label P_target101 = 'Previsto: target10=1' ;
18213 +label P_target100 = 'Previsto: target10=0' ;
18214 +label Q_target101 = 'P non corretto: target10=1' ;
18215 +label Q_target100 = 'P non corretto: target10=0' ;
18216 +label V_target101 = 'Convalidato: target10=1' ;
18217 +label V_target100 = 'Convalidato: target10=0' ;
18218 +label R_target101 = 'Residuo: target10=1' ;
18219 +label R_target100 = 'Residuo: target10=0' ;
18220 +label F_target10 = 'Da: target10' ;
18221 +label I_target10 = 'In: target10' ;
18222 +label U_target10 = 'Non normalizzata in: target10' ;
18223 +label _WARN_ = 'Avvertimenti' ;
18224 +
18225 +
18226 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
18227 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
18228 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
18229 +LENGTH _ARBFMT_20 $     20; DROP _ARBFMT_20;
18230 +_ARBFMT_20 = ' '; /* Initialize to avoid warning. */
18231 +LENGTH _ARBFMT_10 $     10; DROP _ARBFMT_10;
18232 +_ARBFMT_10 = ' '; /* Initialize to avoid warning. */
18233 +
18234 +
18235 +_ARBFMT_12 = PUT( target10 , BEST.);
18236 + %DMNORMCP( _ARBFMT_12, F_target10 );
18237 +
18238 +******             ASSIGN OBSERVATION TO NODE             ******;
18239 +_ARBFMT_20 = PUT( Modello , $20.);
18240 + %DMNORMIP( _ARBFMT_20);
18241 +IF _ARBFMT_20 IN ('FORTWO' ,'Q3' ,'KONA' ,'A4' ,'COOPER' ,'NIRO' ,'CAPTUR' ,
18242 +  'TIVOLI' ,'RENEGADE' ,'COMPASS' ,'GRANDLAND X' ,'OUTLANDER' ,'TIPO' ,
18243 +  'CLIO' ,'GIULIETTA' ,'500C' ,'Q5' ,'NX 300' ,'3008' ,'PASSAT VARIANT' ,
18244 +  '508' ,'520' ,'A6' ,'LEON' ,'COROLLA' ,'CAYENNE' ,'GOLF' ,'A5' ,'A3' ,
18245 +  'POLO' ,'STELVIO' ,'KADJAR' ,'WRANGLER' ,'Q2' ,'OCTAVIA' ,'TALISMAN' ,
18246 +  'ASTRA' ,'GOLF VARIANT' ,'318' ,'GIULIA' ,'E-PACE' ,'GRAND C4 SPACETOURER' ,
18247 +  'SCENIC' ,'DOBLO' ,'CADDY' ,'218' ,'TOURAN' ,'FIORINO' ,'A4 ALLROAD' ,
18248 +  'ESPACE' ) THEN DO;
18249 +  IF  NOT MISSING(REP_price ) AND
18250 +                   42550 <= REP_price  THEN DO;
18251 +    _ARBFMT_20 = PUT( Modello , $20.);
18252 +     %DMNORMIP( _ARBFMT_20);
18253 +    IF _ARBFMT_20 IN ('Q5' ,'520' ,'A6' ,'CAYENNE' ,'WRANGLER' ) THEN DO;
18254 +      IF  NOT MISSING(REP_price ) AND
18255 +                       50740 <= REP_price  THEN DO;
18256 +        _NODE_  =                   23;
18257 +        _LEAF_  =                   20;
18258 +        P_target101  =                 0.45;
18259 +        P_target100  =                 0.55;
18260 +        Q_target101  =                 0.45;
18261 +        Q_target100  =                 0.55;
18262 +        V_target101  =     0.57142857142857;
18263 +        V_target100  =     0.42857142857142;
18264 +        I_target10  = '0' ;
18265 +        U_target10  =                    0;
18266 +        END;
18267 +      ELSE DO;
18268 +        _NODE_  =                   22;
18269 +        _LEAF_  =                   19;
18270 +        P_target101  =                    1;
18271 +        P_target100  =                    0;
18272 +        Q_target101  =                    1;
18273 +        Q_target100  =                    0;
18274 +        V_target101  =     0.88888888888888;
18275 +        V_target100  =     0.11111111111111;
18276 +        I_target10  = '1' ;
18277 +        U_target10  =                    1;
18278 +        END;
18279 +      END;
18280 +    ELSE DO;
18281 +      IF  NOT MISSING(REP_price ) AND
18282 +        REP_price  <                45200 THEN DO;
18283 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
18284 +          REP_Emissioni_di_CO2  <                  133 THEN DO;
18285 +          _NODE_  =                   38;
18286 +          _LEAF_  =                   14;
18287 +          P_target101  =     0.07692307692307;
18288 +          P_target100  =     0.92307692307692;
18289 +          Q_target101  =     0.07692307692307;
18290 +          Q_target100  =     0.92307692307692;
18291 +          V_target101  =     0.11111111111111;
18292 +          V_target100  =     0.88888888888888;
18293 +          I_target10  = '0' ;
18294 +          U_target10  =                    0;
18295 +          END;
18296 +        ELSE DO;
18297 +          _ARBFMT_20 = PUT( Modello , $20.);
18298 +           %DMNORMIP( _ARBFMT_20);
18299 +          IF _ARBFMT_20 IN ('STELVIO' ) THEN DO;
18300 +            _NODE_  =                   64;
18301 +            _LEAF_  =                   15;
18302 +            P_target101  =                    1;
18303 +            P_target100  =                    0;
18304 +            Q_target101  =                    1;
18305 +            Q_target100  =                    0;
18306 +            V_target101  =                    1;
18307 +            V_target100  =                    0;
18308 +            I_target10  = '1' ;
18309 +            U_target10  =                    1;
18310 +            END;
18311 +          ELSE DO;
18312 +            _NODE_  =                   65;
18313 +            _LEAF_  =                   16;
18314 +            P_target101  =                  0.5;
18315 +            P_target100  =                  0.5;
18316 +            Q_target101  =                  0.5;
18317 +            Q_target100  =                  0.5;
18318 +            V_target101  =                    0;
18319 +            V_target100  =                    1;
18320 +            I_target10  = '1' ;
18321 +            U_target10  =                    1;
18322 +            END;
18323 +          END;
18324 +        END;
18325 +      ELSE DO;
18326 +        _ARBFMT_12 = PUT( Posti_a_sedere , BEST12.);
18327 +         %DMNORMIP( _ARBFMT_12);
18328 +        IF _ARBFMT_12 IN ('4' ) THEN DO;
18329 +          _NODE_  =                   40;
18330 +          _LEAF_  =                   17;
18331 +          P_target101  =                  0.4;
18332 +          P_target100  =                  0.6;
18333 +          Q_target101  =                  0.4;
18334 +          Q_target100  =                  0.6;
18335 +          V_target101  =                    1;
18336 +          V_target100  =                    0;
18337 +          I_target10  = '0' ;
18338 +          U_target10  =                    0;
18339 +          END;
18340 +        ELSE DO;
18341 +          _NODE_  =                   41;
18342 +          _LEAF_  =                   18;
18343 +          P_target101  =     0.01408450704225;
18344 +          P_target100  =     0.98591549295774;
18345 +          Q_target101  =     0.01408450704225;
18346 +          Q_target100  =     0.98591549295774;
18347 +          V_target101  =     0.03448275862068;
18348 +          V_target100  =     0.96551724137931;
18349 +          I_target10  = '0' ;
18350 +          U_target10  =                    0;
18351 +          END;
18352 +        END;
18353 +      END;
18354 +    END;
18355 +  ELSE DO;
18356 +    _ARBFMT_20 = PUT( Modello , $20.);
18357 +     %DMNORMIP( _ARBFMT_20);
18358 +    IF _ARBFMT_20 IN ('KONA' ,'COOPER' ,'NIRO' ,'TIVOLI' ,'GRANDLAND X' ,
18359 +    'CLIO' ,'COROLLA' ,'A3' ,'POLO' ,'KADJAR' ,'Q2' ,'ASTRA' ,'SCENIC' ,
18360 +    'DOBLO' ,'218' ,'FIORINO' ) THEN DO;
18361 +      IF  NOT MISSING(REP_price ) AND
18362 +        REP_price  <                18450 THEN DO;
18363 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
18364 +                            96 <= REP_Emissioni_di_CO2  THEN DO;
18365 +          _NODE_  =                   35;
18366 +          _LEAF_  =                    9;
18367 +          P_target101  =     0.95238095238095;
18368 +          P_target100  =     0.04761904761904;
18369 +          Q_target101  =     0.95238095238095;
18370 +          Q_target100  =     0.04761904761904;
18371 +          V_target101  =                    1;
18372 +          V_target100  =                    0;
18373 +          I_target10  = '1' ;
18374 +          U_target10  =                    1;
18375 +          END;
18376 +        ELSE DO;
18377 +          IF  NOT MISSING(REP_price ) AND
18378 +                           15770 <= REP_price  THEN DO;
18379 +            _NODE_  =                   59;
18380 +            _LEAF_  =                    8;
18381 +            P_target101  =     0.33333333333333;
18382 +            P_target100  =     0.66666666666666;
18383 +            Q_target101  =     0.33333333333333;
18384 +            Q_target100  =     0.66666666666666;
18385 +            V_target101  =                    0;
18386 +            V_target100  =                    1;
18387 +            I_target10  = '0' ;
18388 +            U_target10  =                    0;
18389 +            END;
18390 +          ELSE DO;
18391 +            _NODE_  =                   58;
18392 +            _LEAF_  =                    7;
18393 +            P_target101  =                    1;
18394 +            P_target100  =                    0;
18395 +            Q_target101  =                    1;
18396 +            Q_target100  =                    0;
18397 +            V_target101  =                    1;
18398 +            V_target100  =                    0;
18399 +            I_target10  = '1' ;
18400 +            U_target10  =                    1;
18401 +            END;
18402 +          END;
18403 +        END;
18404 +      ELSE DO;
18405 +        _ARBFMT_20 = PUT( Modello , $20.);
18406 +         %DMNORMIP( _ARBFMT_20);
18407 +        IF _ARBFMT_20 IN ('TIVOLI' ,'CLIO' ,'POLO' ,'DOBLO' ) THEN DO;
18408 +          IF  NOT MISSING(REP_Consumo_Carburante_Totale ) AND
18409 +                            8.35 <= REP_Consumo_Carburante_Totale  THEN DO;
18410 +            _NODE_  =                   63;
18411 +            _LEAF_  =                   13;
18412 +            P_target101  =                  0.2;
18413 +            P_target100  =                  0.8;
18414 +            Q_target101  =                  0.2;
18415 +            Q_target100  =                  0.8;
18416 +            V_target101  =     0.33333333333333;
18417 +            V_target100  =     0.66666666666666;
18418 +            I_target10  = '0' ;
18419 +            U_target10  =                    0;
18420 +            END;
18421 +          ELSE DO;
18422 +            _NODE_  =                   62;
18423 +            _LEAF_  =                   12;
18424 +            P_target101  =                    0;
18425 +            P_target100  =                    1;
18426 +            Q_target101  =                    0;
18427 +            Q_target100  =                    1;
18428 +            V_target101  =                    0;
18429 +            V_target100  =                    1;
18430 +            I_target10  = '0' ;
18431 +            U_target10  =                    0;
18432 +            END;
18433 +          END;
18434 +        ELSE DO;
18435 +          IF  NOT MISSING(REP_price ) AND
18436 +                           33400 <= REP_price  THEN DO;
18437 +            _NODE_  =                   61;
18438 +            _LEAF_  =                   11;
18439 +            P_target101  =                    0;
18440 +            P_target100  =                    1;
18441 +            Q_target101  =                    0;
18442 +            Q_target100  =                    1;
18443 +            V_target101  =                    0;
18444 +            V_target100  =                    1;
18445 +            I_target10  = '0' ;
18446 +            U_target10  =                    0;
18447 +            END;
18448 +          ELSE DO;
18449 +            _NODE_  =                   60;
18450 +            _LEAF_  =                   10;
18451 +            P_target101  =     0.68032786885245;
18452 +            P_target100  =     0.31967213114754;
18453 +            Q_target101  =     0.68032786885245;
18454 +            Q_target100  =     0.31967213114754;
18455 +            V_target101  =     0.67647058823529;
18456 +            V_target100  =      0.3235294117647;
18457 +            I_target10  = '1' ;
18458 +            U_target10  =                    1;
18459 +            END;
18460 +          END;
18461 +        END;
18462 +      END;
18463 +    ELSE DO;
18464 +      _ARBFMT_20 = PUT( Modello , $20.);
18465 +       %DMNORMIP( _ARBFMT_20);
18466 +      IF _ARBFMT_20 IN ('TIPO' ,'GIULIETTA' ,'PASSAT VARIANT' ,'GOLF' ,
18467 +      'OCTAVIA' ,'GOLF VARIANT' ,'GRAND C4 SPACETOURER' ,'CADDY' ) THEN DO;
18468 +        IF  NOT MISSING(REP_price ) AND
18469 +                         25800 <= REP_price  THEN DO;
18470 +          _ARBFMT_20 = PUT( Modello , $20.);
18471 +           %DMNORMIP( _ARBFMT_20);
18472 +          IF _ARBFMT_20 IN ('PASSAT VARIANT' ) THEN DO;
18473 +            _NODE_  =                   54;
18474 +            _LEAF_  =                    3;
18475 +            P_target101  =     0.84210526315789;
18476 +            P_target100  =      0.1578947368421;
18477 +            Q_target101  =     0.84210526315789;
18478 +            Q_target100  =      0.1578947368421;
18479 +            V_target101  =                    1;
18480 +            V_target100  =                    0;
18481 +            I_target10  = '1' ;
18482 +            U_target10  =                    1;
18483 +            END;
18484 +          ELSE DO;
18485 +            _NODE_  =                   55;
18486 +            _LEAF_  =                    4;
18487 +            P_target101  =                    0;
18488 +            P_target100  =                    1;
18489 +            Q_target101  =                    0;
18490 +            Q_target100  =                    1;
18491 +            V_target101  =     0.08333333333333;
18492 +            V_target100  =     0.91666666666666;
18493 +            I_target10  = '0' ;
18494 +            U_target10  =                    0;
18495 +            END;
18496 +          END;
18497 +        ELSE DO;
18498 +          IF  NOT MISSING(REP_price ) AND
18499 +            REP_price  <                16190 THEN DO;
18500 +            _NODE_  =                   52;
18501 +            _LEAF_  =                    1;
18502 +            P_target101  =                    1;
18503 +            P_target100  =                    0;
18504 +            Q_target101  =                    1;
18505 +            Q_target100  =                    0;
18506 +            V_target101  =                    1;
18507 +            V_target100  =                    0;
18508 +            I_target10  = '1' ;
18509 +            U_target10  =                    1;
18510 +            END;
18511 +          ELSE DO;
18512 +            _NODE_  =                   53;
18513 +            _LEAF_  =                    2;
18514 +            P_target101  =     0.79423868312757;
18515 +            P_target100  =     0.20576131687242;
18516 +            Q_target101  =     0.79423868312757;
18517 +            Q_target100  =     0.20576131687242;
18518 +            V_target101  =     0.77551020408163;
18519 +            V_target100  =     0.22448979591836;
18520 +            I_target10  = '1' ;
18521 +            U_target10  =                    1;
18522 +            END;
18523 +          END;
18524 +        END;
18525 +      ELSE DO;
18526 +        IF  NOT MISSING(REP_Emissioni_di_CO2 ) AND
18527 +          REP_Emissioni_di_CO2  <                 64.5 THEN DO;
18528 +          _NODE_  =                   32;
18529 +          _LEAF_  =                    5;
18530 +          P_target101  =                  0.6;
18531 +          P_target100  =                  0.4;
18532 +          Q_target101  =                  0.6;
18533 +          Q_target100  =                  0.4;
18534 +          V_target101  =     0.33333333333333;
18535 +          V_target100  =     0.66666666666666;
18536 +          I_target10  = '1' ;
18537 +          U_target10  =                    1;
18538 +          END;
18539 +        ELSE DO;
18540 +          _NODE_  =                   33;
18541 +          _LEAF_  =                    6;
18542 +          P_target101  =     0.97066326530612;
18543 +          P_target100  =     0.02933673469387;
18544 +          Q_target101  =     0.97066326530612;
18545 +          Q_target100  =     0.02933673469387;
18546 +          V_target101  =     0.97126436781609;
18547 +          V_target100  =      0.0287356321839;
18548 +          I_target10  = '1' ;
18549 +          U_target10  =                    1;
18550 +          END;
18551 +        END;
18552 +      END;
18553 +    END;
18554 +  END;
18555 +ELSE DO;
18556 +  _ARBFMT_20 = PUT( Modello , $20.);
18557 +   %DMNORMIP( _ARBFMT_20);
18558 +  IF _ARBFMT_20 IN ('E-TRON' ,'DS 3 CROSSBACK' ,'LEAF' ,'208' ,'PARTNER' ,
18559 +    'KANGOO' ,'NEW PANDA' ,'500' ,'PANDA' ,'YPSILON' ,'TWINGO' ,'500X' ,
18560 +    'STONIC' ,'SPORTAGE' ,'CROSSLAND X' ,'SANDERO' ,'FIESTA' ,'C3' ,'X1' ,
18561 +    'C-HR' ,'XV' ,'YARIS' ,'A 250' ,'T-ROC' ,'ARONA' ,'ATECA' ,'KAMIQ' ,
18562 +    'QASHQAI' ,'X-TRAIL' ,'T-CROSS' ,'MEGANE' ,'FOCUS' ,'308' ,'C4 CACTUS' ,
18563 +    'IBIZA' ,'COMBO' ,'420' ,'C 220' ,'L200' ,'COOPER D COUNTRYMAN' ,
18564 +    'CHEROKEE' ,'INSIGNIA' ,'COOPER D CLUBMAN' ,'320' ,'730' ) THEN DO;
18565 +    IF  NOT MISSING(REP_price ) AND
18566 +      REP_price  <                 9445 THEN DO;
18567 +      _NODE_  =                   14;
18568 +      _LEAF_  =                   31;
18569 +      P_target101  =     0.87096774193548;
18570 +      P_target100  =     0.12903225806451;
18571 +      Q_target101  =     0.87096774193548;
18572 +      Q_target100  =     0.12903225806451;
18573 +      V_target101  =     0.83333333333333;
18574 +      V_target100  =     0.16666666666666;
18575 +      I_target10  = '1' ;
18576 +      U_target10  =                    1;
18577 +      END;
18578 +    ELSE DO;
18579 +      IF  NOT MISSING(REP_Peso_a_vuoto ) AND
18580 +                      1263.5 <= REP_Peso_a_vuoto  THEN DO;
18581 +        IF  NOT MISSING(REP_price ) AND
18582 +          REP_price  <                17125 THEN DO;
18583 +          _NODE_  =                   50;
18584 +          _LEAF_  =                   36;
18585 +          P_target101  =     0.79166666666666;
18586 +          P_target100  =     0.20833333333333;
18587 +          Q_target101  =     0.79166666666666;
18588 +          Q_target100  =     0.20833333333333;
18589 +          V_target101  =     0.83333333333333;
18590 +          V_target100  =     0.16666666666666;
18591 +          I_target10  = '1' ;
18592 +          U_target10  =                    1;
18593 +          END;
18594 +        ELSE DO;
18595 +          _ARBFMT_20 = PUT( Modello , $20.);
18596 +           %DMNORMIP( _ARBFMT_20);
18597 +          IF _ARBFMT_20 IN ('DS 3 CROSSBACK' ,'C-HR' ,'QASHQAI' ,'420' ) THEN
18598 +           DO;
18599 +            _NODE_  =                   78;
18600 +            _LEAF_  =                   37;
18601 +            P_target101  =     0.22666666666666;
18602 +            P_target100  =     0.77333333333333;
18603 +            Q_target101  =     0.22666666666666;
18604 +            Q_target100  =     0.77333333333333;
18605 +            V_target101  =     0.12903225806451;
18606 +            V_target100  =     0.87096774193548;
18607 +            I_target10  = '0' ;
18608 +            U_target10  =                    0;
18609 +            END;
18610 +          ELSE DO;
18611 +            _NODE_  =                   79;
18612 +            _LEAF_  =                   38;
18613 +            P_target101  =     0.02145922746781;
18614 +            P_target100  =     0.97854077253218;
18615 +            Q_target101  =     0.02145922746781;
18616 +            Q_target100  =     0.97854077253218;
18617 +            V_target101  =     0.02061855670103;
18618 +            V_target100  =     0.97938144329896;
18619 +            I_target10  = '0' ;
18620 +            U_target10  =                    0;
18621 +            END;
18622 +          END;
18623 +        END;
18624 +      ELSE DO;
18625 +        IF  NOT MISSING(REP_price ) AND
18626 +          REP_price  <                11725 THEN DO;
18627 +          _ARBFMT_20 = PUT( Modello , $20.);
18628 +           %DMNORMIP( _ARBFMT_20);
18629 +          IF _ARBFMT_20 IN ('500' ) THEN DO;
18630 +            _NODE_  =                   72;
18631 +            _LEAF_  =                   32;
18632 +            P_target101  =                    1;
18633 +            P_target100  =                    0;
18634 +            Q_target101  =                    1;
18635 +            Q_target100  =                    0;
18636 +            V_target101  =                    1;
18637 +            V_target100  =                    0;
18638 +            I_target10  = '1' ;
18639 +            U_target10  =                    1;
18640 +            END;
18641 +          ELSE DO;
18642 +            _NODE_  =                   73;
18643 +            _LEAF_  =                   33;
18644 +            P_target101  =     0.03246753246753;
18645 +            P_target100  =     0.96753246753246;
18646 +            Q_target101  =     0.03246753246753;
18647 +            Q_target100  =     0.96753246753246;
18648 +            V_target101  =     0.04838709677419;
18649 +            V_target100  =      0.9516129032258;
18650 +            I_target10  = '0' ;
18651 +            U_target10  =                    0;
18652 +            END;
18653 +          END;
18654 +        ELSE DO;
18655 +          _ARBFMT_20 = PUT( Modello , $20.);
18656 +           %DMNORMIP( _ARBFMT_20);
18657 +          IF _ARBFMT_20 IN ('LEAF' ,'PARTNER' ,'500' ,'PANDA' ,'YPSILON' ,
18658 +          'TWINGO' ,'500X' ,'STONIC' ,'CROSSLAND X' ,'SANDERO' ,'FIESTA' ,
18659 +          'C-HR' ,'KAMIQ' ,'X-TRAIL' ,'T-CROSS' ,'C4 CACTUS' ,'IBIZA' ,
18660 +          'COMBO' ,'INSIGNIA' ,'COOPER D CLUBMAN' ,'320' ) THEN DO;
18661 +            _NODE_  =                   75;
18662 +            _LEAF_  =                   35;
18663 +            P_target101  =     0.00173010380622;
18664 +            P_target100  =     0.99826989619377;
18665 +            Q_target101  =     0.00173010380622;
18666 +            Q_target100  =     0.99826989619377;
18667 +            V_target101  =     0.01239669421487;
18668 +            V_target100  =     0.98760330578512;
18669 +            I_target10  = '0' ;
18670 +            U_target10  =                    0;
18671 +            END;
18672 +          ELSE DO;
18673 +            _NODE_  =                   74;
18674 +            _LEAF_  =                   34;
18675 +            P_target101  =     0.12962962962962;
18676 +            P_target100  =     0.87037037037037;
18677 +            Q_target101  =     0.12962962962962;
18678 +            Q_target100  =     0.87037037037037;
18679 +            V_target101  =     0.09009009009009;
18680 +            V_target100  =     0.90990990990991;
18681 +            I_target10  = '0' ;
18682 +            U_target10  =                    0;
18683 +            END;
18684 +          END;
18685 +        END;
18686 +      END;
18687 +    END;
18688 +  ELSE DO;
18689 +    IF  NOT MISSING(REP_price ) AND
18690 +      REP_price  <                15820 THEN DO;
18691 +      _ARBFMT_20 = PUT( Modello , $20.);
18692 +       %DMNORMIP( _ARBFMT_20);
18693 +      IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ,'500L' ) THEN DO;
18694 +        _ARBFMT_20 = PUT( Modello , $20.);
18695 +         %DMNORMIP( _ARBFMT_20);
18696 +        IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ) THEN DO;
18697 +          IF  NOT MISSING(REP_price ) AND
18698 +                           15045 <= REP_price  THEN DO;
18699 +            _NODE_  =                   67;
18700 +            _LEAF_  =                   22;
18701 +            P_target101  =                  0.5;
18702 +            P_target100  =                  0.5;
18703 +            Q_target101  =                  0.5;
18704 +            Q_target100  =                  0.5;
18705 +            V_target101  =                 0.25;
18706 +            V_target100  =                 0.75;
18707 +            I_target10  = '1' ;
18708 +            U_target10  =                    1;
18709 +            END;
18710 +          ELSE DO;
18711 +            _NODE_  =                   66;
18712 +            _LEAF_  =                   21;
18713 +            P_target101  =                    1;
18714 +            P_target100  =                    0;
18715 +            Q_target101  =                    1;
18716 +            Q_target100  =                    0;
18717 +            V_target101  =                    1;
18718 +            V_target100  =                    0;
18719 +            I_target10  = '1' ;
18720 +            U_target10  =                    1;
18721 +            END;
18722 +          END;
18723 +        ELSE DO;
18724 +          _NODE_  =                   43;
18725 +          _LEAF_  =                   23;
18726 +          P_target101  =                    1;
18727 +          P_target100  =                    0;
18728 +          Q_target101  =                    1;
18729 +          Q_target100  =                    0;
18730 +          V_target101  =                    1;
18731 +          V_target100  =                    0;
18732 +          I_target10  = '1' ;
18733 +          U_target10  =                    1;
18734 +          END;
18735 +        END;
18736 +      ELSE DO;
18737 +        IF  NOT MISSING(REP_price ) AND
18738 +          REP_price  <                12550 THEN DO;
18739 +          _NODE_  =                   44;
18740 +          _LEAF_  =                   24;
18741 +          P_target101  =                 0.95;
18742 +          P_target100  =                 0.05;
18743 +          Q_target101  =                 0.95;
18744 +          Q_target100  =                 0.05;
18745 +          V_target101  =                    1;
18746 +          V_target100  =                    0;
18747 +          I_target10  = '1' ;
18748 +          U_target10  =                    1;
18749 +          END;
18750 +        ELSE DO;
18751 +          _NODE_  =                   45;
18752 +          _LEAF_  =                   25;
18753 +          P_target101  =     0.03703703703703;
18754 +          P_target100  =     0.96296296296296;
18755 +          Q_target101  =     0.03703703703703;
18756 +          Q_target100  =     0.96296296296296;
18757 +          V_target101  =     0.21052631578947;
18758 +          V_target100  =     0.78947368421052;
18759 +          I_target10  = '0' ;
18760 +          U_target10  =                    0;
18761 +          END;
18762 +        END;
18763 +      END;
18764 +    ELSE DO;
18765 +      _ARBFMT_20 = PUT( Modello , $20.);
18766 +       %DMNORMIP( _ARBFMT_20);
18767 +      IF _ARBFMT_20 IN ('CORSA' ,'DUSTER' ,'500L' ) THEN DO;
18768 +        _NODE_  =                   27;
18769 +        _LEAF_  =                   30;
18770 +        P_target101  =                    0;
18771 +        P_target100  =                    1;
18772 +        Q_target101  =                    0;
18773 +        Q_target100  =                    1;
18774 +        V_target101  =                    0;
18775 +        V_target100  =                    1;
18776 +        I_target10  = '0' ;
18777 +        U_target10  =                    0;
18778 +        END;
18779 +      ELSE DO;
18780 +        IF  NOT MISSING(REP_price ) AND
18781 +          REP_price  <                20620 THEN DO;
18782 +          IF  NOT MISSING(REP_Consumo_Carburante_Totale ) AND
18783 +                            4.15 <= REP_Consumo_Carburante_Totale  THEN DO;
18784 +            _NODE_  =                   69;
18785 +            _LEAF_  =                   27;
18786 +            P_target101  =               0.8125;
18787 +            P_target100  =               0.1875;
18788 +            Q_target101  =               0.8125;
18789 +            Q_target100  =               0.1875;
18790 +            V_target101  =     0.77419354838709;
18791 +            V_target100  =      0.2258064516129;
18792 +            I_target10  = '1' ;
18793 +            U_target10  =                    1;
18794 +            END;
18795 +          ELSE DO;
18796 +            _NODE_  =                   68;
18797 +            _LEAF_  =                   26;
18798 +            P_target101  =     0.29411764705882;
18799 +            P_target100  =     0.70588235294117;
18800 +            Q_target101  =     0.29411764705882;
18801 +            Q_target100  =     0.70588235294117;
18802 +            V_target101  =     0.16666666666666;
18803 +            V_target100  =     0.83333333333333;
18804 +            I_target10  = '0' ;
18805 +            U_target10  =                    0;
18806 +            END;
18807 +          END;
18808 +        ELSE DO;
18809 +          _ARBFMT_10 = PUT( Tipo_di_unita , $10.);
18810 +           %DMNORMIP( _ARBFMT_10);
18811 +          IF _ARBFMT_10 IN ('POSTERIORE' ) THEN DO;
18812 +            _NODE_  =                   70;
18813 +            _LEAF_  =                   28;
18814 +            P_target101  =     0.70588235294117;
18815 +            P_target100  =     0.29411764705882;
18816 +            Q_target101  =     0.70588235294117;
18817 +            Q_target100  =     0.29411764705882;
18818 +            V_target101  =     0.58333333333333;
18819 +            V_target100  =     0.41666666666666;
18820 +            I_target10  = '1' ;
18821 +            U_target10  =                    1;
18822 +            END;
18823 +          ELSE DO;
18824 +            _NODE_  =                   71;
18825 +            _LEAF_  =                   29;
18826 +            P_target101  =     0.21813031161473;
18827 +            P_target100  =     0.78186968838526;
18828 +            Q_target101  =     0.21813031161473;
18829 +            Q_target100  =     0.78186968838526;
18830 +            V_target101  =     0.22077922077922;
18831 +            V_target100  =     0.77922077922077;
18832 +            I_target10  = '0' ;
18833 +            U_target10  =                    0;
18834 +            END;
18835 +          END;
18836 +        END;
18837 +      END;
18838 +    END;
18839 +  END;
18840 +
18841 +*****  RESIDUALS R_ *************;
18842 +IF  F_target10  NE '1'
18843 +AND F_target10  NE '0'  THEN DO;
18844 +        R_target101  = .;
18845 +        R_target100  = .;
18846 + END;
18847 + ELSE DO;
18848 +       R_target101  =  -P_target101 ;
18849 +       R_target100  =  -P_target100 ;
18850 +       SELECT( F_target10  );
18851 +          WHEN( '1'  ) R_target101  = R_target101  +1;
18852 +          WHEN( '0'  ) R_target100  = R_target100  +1;
18853 +       END;
18854 + END;
18855 +
18856 +****************************************************************;
18857 +******          END OF DECISION TREE SCORING CODE         ******;
18858 +****************************************************************;
18859 +
18860 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18861  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Visualizza EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
18862  quit;
18863  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: Visualizza EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
18865  proc sort data=WORK.EM_USER_REPORT;
18866  by ID VIEW;
18867  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
18868  *------------------------------------------------------------*;
18869  * Tree2: Computing metadata for TRAIN data;
18870  *------------------------------------------------------------*;
 
NOTE: Visualizza EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
19298  data WORK.MODELTEMP_INFO;
19299  set EMWS1.Tree2_EMINFO;
19300  where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
19301  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_EMINFO.
      WHERE (DATA='Tree2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19302  data EMWS1.Tree2_EMINFO;
19303  length TARGET KEY $32 DATA $43;
19304  input TARGET KEY DATA $;
19305  cards;
 
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19309  run;
19310  data EMWS1.Tree2_EMINFO;
19311  set EMWS1.Tree2_EMINFO WORK.MODELTEMP_INFO;
19312  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19313  proc sort data = EMWS1.Tree2_EMINFO NOTHREADS;
19314  by TARGET KEY;
19315  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19316  proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
19317  by TARGET KEY;
19318  run;
 
NOTE: There were 4 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19319  proc sort data = EMWS1.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
19320  by TARGET KEY;
19321  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19322  data EMWS1.Tree2_EMINFO;
19323  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
19324  by TARGET KEY;
19325  run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
19326  proc datasets lib=work nolist;
19327  delete TEMP_INFO SORTEDEMINFO;
19328  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
19329  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Visualizza EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.09 seconds
 
NOTE: Visualizza EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.07 seconds
 
*------------------------------------------------------------*
* Log dei report
Data:               25 ottobre 2020
Ora:                22:52:00
*------------------------------------------------------------*
19353  data EMWS1.Tree2_EMOUTFIT;
19354  set EMWS1.Tree2_EMOUTFIT;
19355  length TargetLabel $200;
19356  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
19357  if upcase(TARGET) eq "TARGET10" then TargetLabel = 'target10';
19358  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19359  proc sort data=EMWS1.Tree2_EMREPORTFIT nothreads;
19360  by TARGET;
19361  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The data set EMWS1.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
19362  %let _EMwarndup = 0;
19363  %let _EMtargetdup =;
19364  %let _EMASEtargetdup =;
19365  data _null_;
19366  set EMWS1.Tree2_EMOUTFIT;
19367  if .<_ASE_<0.000001 then do;
19368  call symput('_EMwarndup', '1');
19369  call symput('_EMtargetdup', target);
19370  call symput('_EMASEtargetdup', put(_ASE_, best.));
19371  end;
19372  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19373  %let EMEXCEPTIONSTRING=;
19374  *------------------------------------------------------------*;
19375  * REPORT: Tree2;
19376  *------------------------------------------------------------*;
19377  %let EM_ACTION = REPORT;
19378  %let syscc = 0;
19379  %macro main;
19380
19381    %if %upcase(&EM_ACTION) = CREATE %then %do;
19382      filename temp catalog 'sashelp.emmodl.tree_create.source';
19383      %include temp;
19384      filename temp;
19385
19386      %em_tree_create;
19387    %end;
19388
19389     %else
19390     %if %upcase(&EM_ACTION) = TRAIN %then %do;
19391
19392         filename temp catalog 'sashelp.emmodl.tree_train.source';
19393         %include temp;
19394         filename temp;
19395         %em_tree_train;
19396     %end;
19397
19398    %else
19399    %if %upcase(&EM_ACTION) = SCORE %then %do;
19400      filename temp catalog 'sashelp.emmodl.tree_score.source';
19401      %include temp;
19402      filename temp;
19403
19404      %em_tree_score;
19405
19406    %end;
19407
19408    %else
19409    %if %upcase(&EM_ACTION) = REPORT %then %do;
19410
19411         filename temp catalog 'sashelp.emmodl.tree_report.source';
19412         %include temp;
19413         filename temp;
19414
19415         %em_tree_report;
19416     %end;
19417
19418    %else
19419    %if %upcase(&EM_ACTION) = OPENINT %then %do;
19420
19421         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19422         %include temp;
19423         filename temp;
19424         %EM_TREE_OPENTREEVIEWER;
19425
19426     %end;
19427
19428    %else
19429    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19430
19431         filename temp catalog 'sashelp.emmodl.tree_actions.source';
19432         %include temp;
19433         filename temp;
19434         %EM_TREE_CLOSETREEVIEWER;
19435
19436     %end;
19437
19438
19439     %doendm:
19440  %mend main;
19441
19442  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
19444 +%macro em_tree_makePlotDs( multipleTar= );
19446 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19447 +  %EM_GETNAME(key=OUTNODES, type=DATA);
19448 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19449 +  %EM_GETNAME(key=OUTRULES, type=DATA);
19451 +  /* determine if validation statistics will be displayed */
19452 +  %let validflag=N;
19453 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
19454 +    /* determine if validation data exists */
19455 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
19456 +      %let validflag=Y;
19457 +    %end;
19458 +  %end;
19460 +   /* retrieve name of decmeta even in presence of multiple targets */
19461 +   %let decmeta = ;
19462 +   %if &EM_DEC_DECMETA eq %then %do;
19463 +     data _Target;
19464 +       set &em_data_variableset;
19465 +       where ROLE='TARGET' and USE in('D', 'Y');
19466 +       keep NAME;
19467 +     run;
19468 +     proc sort data=_Target;
19469 +       by NAME;
19470 +     run;
19471 +     proc sort data=EM_TARGETDECINFO;
19472 +       by TARGET;
19473 +     run;
19474 +     data _Target;
19475 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
19476 +       by NAME;
19477 +       if _a then do;
19478 +         call symput('decmeta', trim(DECMETA));
19479 +       end;
19480 +     run;
19481 +     proc delete data=_Target;run;
19482 +   %end;
19483 +   %else %let decmeta = &EM_DEC_DECMETA;
19486 +  /* retrieve targetEvent from decmeta */
19487 +  %let targetEvent=;
19488 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19489 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19490 +      data _null_;
19491 +       set &DECMETA(where=(_TYPE_="TARGET"));
19492 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19493 +      run;
19494 +    %end;
19495 +  %end;
19497 +  /* retrieve predicted var for targetEvent from decmeta */
19498 +  %let predTarget=;
19499 +  %let predLvl=;
19500 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19501 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19502 +      data _null_;
19503 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
19504 +       call symput('predTarget', strip(VARIABLE));
19505 +       call symput('predLvl', strip(LEVEL));
19506 +      run;
19507 +    %end;
19508 +  %end;
19509 +  %else %do;
19510 +    %if %sysfunc(exist(&DECMETA)) %then %do;
19511 +      data _null_;
19512 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
19513 +       call symput('predTarget', strip(VARIABLE));
19514 +      run;
19515 +    %end;
19516 +  %end;
19518 +  /* create BelowText value */
19519 +  data belowtext;
19520 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
19521 +    keep node belowtext;
19522 +  run;
19524 +  /* replace belowtext with variable label if it exists */
19525 +  data belowtext2;
19526 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
19527 +    keep node belowtextlbl;
19528 +  run;
19530 +  proc sort data=belowtext; by node; run;
19531 +  proc sort data=belowtext2; by node; run;
19533 +  data belowtext;
19534 +    merge belowtext belowtext2(in=_a);
19535 +    by node;
19536 +    if _a then belowtext=belowtextlbl;
19537 +    keep node belowtext;
19538 +  run;
19540 +  /* create AboveText value */
19541 +  data abovetext;
19542 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
19543 +  run;
19544 +  proc sort data=abovetext; by node numeric_value; run;
19546 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
19547 +  data abovetext;
19548 +    set abovetext(rename=(node=parent));
19549 +    by parent numeric_value;
19550 +    retain abovetext tempstring flag branch origval origchar ;
19551 +    length abovetext $256;
19552 +    length tempstring origchar $64;
19554 +    if STAT in ("INTERVAL", "ORDINAL") then do;
19555 +      if first.parent then do;
19556 +        if missing(character_value) then do;
19557 +          numeric_value = round(numeric_value, &sp_precision);
19558 +          abovetext = "< "||strip(NUMERIC_VALUE);
19559 +          branch = 1;
19560 +          origval = numeric_value;
19561 +          output;
19562 +        end;
19563 +        else do;
19564 +          abovetext = "< "||strip(CHARACTER_VALUE);
19565 +          branch = 1;
19566 +          origchar = character_value;
19567 +          output;
19568 +        end;
19570 +        if first.parent AND last.parent then do;
19571 +          if missing(character_value) then do;
19572 +            numeric_value = round(numeric_value, &sp_precision);
19573 +            branch = branch + 1;
19574 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19575 +            output;
19576 +          end;
19577 +          else do;
19578 +            branch = branch + 1;
19579 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19580 +            output;
19581 +          end;
19582 +        end;
19583 +      end;
19584 +      else if last.parent then do;
19585 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19586 +          if missing(character_value) then do;
19587 +            numeric_value = round(numeric_value, &sp_precision);
19588 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19589 +          end;
19590 +          else do;
19591 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19592 +          end;
19593 +          branch = branch + 1;
19594 +          output;
19596 +          if missing(character_value) then do;
19597 +            numeric_value = round(numeric_value, &sp_precision);
19598 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19599 +          end;
19600 +          else do;
19601 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19602 +          end;
19603 +          branch = branch + 1;
19604 +          output;
19605 +        end;
19606 +        else do;
19607 +          if missing(character_value) then do;
19608 +            numeric_value = round(numeric_value, &sp_precision);
19609 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19610 +          end;
19611 +          else do;
19612 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19613 +          end;
19614 +          branch = branch + 1;
19615 +          output;
19616 +        end;
19617 +      end;
19618 +      else do;
19619 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
19620 +          if missing(character_value) then do;
19621 +            numeric_value = round(numeric_value,&sp_precision);
19622 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
19623 +            origval = numeric_value;
19624 +          end;
19625 +          else do;
19626 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
19627 +            origchar = character_value;
19628 +          end;
19629 +          branch = branch + 1;
19630 +          output;
19632 +        end;
19633 +        else do;
19634 +          if missing(character_value) then do;
19635 +            numeric_value = round(numeric_value, &sp_precision);
19636 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19637 +            origval = numeric_value;
19638 +          end;
19639 +          else do;
19640 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19641 +            origval = character_value;
19642 +          end;
19643 +          branch = branch + 1;
19644 +          output;
19645 +        end;
19646 +      end;
19647 +    end;
19648 +    else do;
19649 +       if first.numeric_value then do;
19650 +         flag = 0;
19651 +         abovetext = strip(CHARACTER_VALUE);
19652 +         branch = numeric_value;
19653 +         if first.numeric_value AND last.numeric_value then do;
19654 +           output;
19655 +         end;
19656 +       end;
19657 +       else if last.numeric_value then do;
19658 +         if flag=0 then do;
19659 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19660 +           length = length(strip(tempstring));
19661 +           if length < 32 then do;
19662 +             abovetext = strip(tempstring);
19663 +           end;
19664 +           else do;
19665 +             abovetext = strip(abovetext)||", ...";
19666 +             flag = 1;
19667 +           end;
19668 +         end;
19669 +         branch = numeric_value;
19670 +         output;
19671 +       end;
19672 +       else do;
19673 +         if flag=0 then do;
19674 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19675 +           length = length(strip(tempstring));
19676 +           if length < 32 then do;
19677 +             abovetext = strip(tempstring);
19678 +           end;
19679 +           else do;
19680 +             abovetext = strip(abovetext)||", ...";
19681 +             flag=1;
19682 +           end;
19683 +         end;
19684 +         branch = numeric_value;
19685 +       end;
19686 +    end;
19687 +    keep parent branch abovetext;
19688 +  run;
19690 +  /* Missing value to abovetext */
19691 +  data tempmissing;
19692 +    set &EM_USER_OUTRULES;
19693 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19694 +    rename node=parent numeric_value=branch character_value=misschar;
19695 +  run;
19698 +  proc sort data=abovetext; by parent branch; run;
19699 +  proc sort data=tempmissing; by parent branch; run;
19700 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19702 +  data tempoutnodes;
19703 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19704 +    by parent branch;
19705 +    length traintotal validtotal 8;
19706 +    retain traintotal validtotal;
19708 +    if _a then do;
19709 +      if ^MISSING(abovetext) then do;
19710 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19711 +      end;
19712 +      else do;
19713 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19714 +      end;
19715 +    end;
19716 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19718 +    if node=1 then do;
19719 +      traintotal = N;
19720 +      validtotal=VN;
19721 +    end;
19723 +    drop role rank stat misschar belowtext;
19724 +  run;
19725 +  proc sort data=tempoutnodes; by node; run;
19726 +  proc sort data=belowtext; by node; run;
19728 +  data tempoutnodes;
19729 +    merge tempoutnodes belowtext;
19730 +    by node;
19732 +  run;
19734 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19735 +  %let adjusted = N;
19736 +  %let npriors = 0;
19737 +  data _null_ ;
19738 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19739 +    if eof then do ;
19740 +      call symput("npriors" , strip(put(_N_,best.))) ;
19741 +    end;
19742 +  run;
19743 +  %if &npriors gt 0 %then %let adjusted=Y;
19746 +  /* create a table with targetUsed and targetLevel columns for each node */
19747 +  data temptarmeta;
19748 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19749 +    %if &multipleTar eq N %then %do;
19750 +      AND USE in ('D', 'Y')
19751 +    %end;
19752 +    ));
19753 +    length TARGET $32;
19754 +    Target=name;
19755 +    keep target level;
19756 +  run;
19758 +  %if &multipleTar eq Y %then %do;
19759 +    data temptargetused;
19760 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19761 +      keep node target;
19762 +    run;
19763 +    proc sort data=temptargetused; by target; run;
19764 +    proc sort data=temptarmeta; by target; run;
19765 +    data temptargetused;
19766 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19767 +      by target;
19768 +      if _a and _b;
19769 +    run;
19770 +  %end;
19771 +  %else %do;
19772 +    data temptargetused;
19773 +      set &EM_USER_OUTSTATS;
19774 +      length target $32 tarlevel $10;
19775 +      target="%EM_TARGET";
19776 +      tarlevel="%EM_TARGET_LEVEL";
19777 +      keep node target tarlevel;
19778 +    run;
19779 +    proc sort data=temptargetused nodupkey; by node; run;
19780 +  %end;
19782 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19783 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19784 +  proc sort data=temptargetused; by node; run;
19787 +  /* create tables for all interval targets as well as all class targets */
19788 +  data tempinterval tempclass;
19789 +    merge tempoutstats temptargetused( rename=(target=targetused));
19790 +    by node;
19791 +    %if "&multipleTar" eq "Y" %then %do;
19792 +      if ((missing(Target)) OR (target=targetused ));
19793 +    %end;
19795 +    if tarlevel="INTERVAL" then output tempinterval;
19796 +    else output tempclass;
19797 +  run;
19799 +  /* initialize intTarget and classTarget flags */
19800 +  %let em_intNobs =0;
19801 +  %let em_classNobs = 0;
19802 +  %let em_intTarget= N;
19803 +  %let em_classTarget= N;
19805 +  proc sql;
19806 +    reset noprint;
19807 +    select count(*) into :em_intNobs from tempinterval;
19808 +  quit;
19809 +  proc sql;
19810 +    reset noprint;
19811 +    select count(*) into :em_classNobs from tempclass;
19812 +  quit;
19814 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19815 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19817 +  /* retrieve all information for interval targets */
19818 +  %if &em_intTarget eq Y %then %do;
19820 +    /* determine if leaf variable exists */
19821 +    %let dsid=%sysfunc(open(tempinterval,i));
19822 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19823 +    %let rc=%sysfunc(close(&dsid));
19825 +    proc transpose data=tempinterval
19826 +      %if &leafexists %then %do;
19827 +        (drop=leaf)
19828 +      %end;
19829 +      %if &validexist %then %do;
19830 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19831 +      %end;
19832 +      %else %do;
19833 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19834 +      %end;
19835 +      by node;
19836 +      id statname;
19837 +    run;
19838 +    data tempinterval;
19839 +      set tempinterval;
19840 +      if missing(N) then delete;
19841 +    run;
19842 +  %end;
19844 +  /* retrieve all information for class targets */
19845 +  %if &em_classTarget eq Y %then %do;
19846 +    proc sort data=tempclass; by node category; run;
19847 +    %if &validflag eq N %then %do;
19848 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19849 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19850 +    %end;
19851 +    %else %do;
19852 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19853 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19854 +    %end;
19855 +      set tempclass;
19857 +      %if &validflag eq N %then %do;
19858 +        %if "&adjusted" eq "N" %then %do;
19859 +          if statname="N" then output tempn;
19860 +        %end;
19861 +        %else %do;
19862 +          if statname="NPRIORS" then output tempn;
19863 +        %end;
19864 +        else if statname="PREDICTION" then output temppredict;
19865 +        else if statname="PROBABILITY" then output tempprob;
19866 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19867 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19868 +      %end;
19869 +      %else %do;
19870 +        %if "&adjusted" eq "N" %then %do;
19871 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19872 +        %end;
19873 +        %else %do;
19874 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19875 +        %end;
19876 +        else if statname="PREDICTION" then output temppredict;
19877 +        else if statname="PROBABILITY" then output tempprob;
19878 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19879 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19880 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19881 +      %end;
19882 +    run;
19885 +    /* determine if profit/loss exists in tempprofit */
19886 +    %let em_profitflag=0;
19887 +    %let em_lossflag=0;
19888 +    proc sql;
19889 +      reset noprint;
19890 +      select count(*) into :em_profitflag from tempprofit;
19891 +    quit;
19892 +    proc sql;
19893 +      reset noprint;
19894 +      select count(*) into :em_lossflag from temploss;
19895 +    quit;
19897 +    %if &validFlag eq Y %then %do;
19898 +      proc transpose data=tempn
19899 +        %if "&adjusted" eq "N" %then %do;
19900 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19901 +        %end;
19902 +        %else %do;
19903 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19904 +        %end;
19905 +        by node;
19906 +        id statname;
19907 +      run;
19908 +      %if &em_profitflag ne 0 %then %do;
19909 +        proc transpose data=tempprofit out=tempprofit;
19910 +          by node category;
19911 +          id statname ;
19912 +        run;
19913 +      %end;
19914 +      %if &em_lossflag ne 0 %then %do;
19915 +        proc transpose data=temploss out=temploss;
19916 +          by node category;
19917 +          id statname ;
19918 +        run;
19919 +      %end;
19920 +      data tempprob;
19921 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19922 +        by node
19923 +        %if &multipleTar eq Y %then %do;
19924 +          target
19925 +        %end;
19926 +        category;
19927 +      run;
19928 +    %end;
19930 +    /* store percentcorrect value */
19931 +    data temppredict;
19932 +      merge tempprob temppredict(in=_a);
19933 +      by node category;
19934 +      if _a then do;
19935 +        percentCorrect = statvalue;
19936 +        %if &validFlag eq Y %then %do;
19937 +          vpercentCorrect= vstatvalue;
19938 +        %end;
19939 +      end;
19940 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19941 +      %if &validFlag eq Y %then %do;
19942 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19943 +      %end;
19944 +      ;
19945 +      if missing(percentCorrect) then delete;
19946 +      drop target;
19947 +    run;
19949 +    /* build profittext */
19950 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19951 +      data tempprofittext(keep= node profittext profitloss);
19952 +        length profittext $800 profitloss 8.;
19953 +        retain profittext profitloss;
19955 +        merge tempprob
19956 +        %if &em_profitflag ne 0 %then %do;
19957 +          tempprofit
19958 +        %end;
19959 +        %else %if &em_lossflag ne 0 %then %do;
19960 +          temploss
19961 +        %end;
19962 +        ;
19963 +        by node category;
19965 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19966 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19967 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19968 +          %let profittype = ALL;
19969 +        %end;
19971 +        /* create the profitloss variable for nodecolor if selected */
19972 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19974 +        %if "&profittype" eq "ALL" %then %do;
19975 +          if strip(CATEGORY)="&targetEvent" then do;
19976 +            profitloss=statvalue;
19977 +          end;
19978 +          if first.node then do;
19979 +            %if &validFlag eq N %then %do;
19980 +             %if &em_profitflag ne 0 %then %do;
19981 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19982 +             %end;
19983 +             %if &em_lossflag ne 0 %then %do;
19984 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19985 +             %end;
19986 +            %end;
19987 +            %else %do;
19988 +             %if &em_profitflag ne 0 %then %do;
19989 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19989!+;
19990 +             %end;
19991 +             %if &em_lossflag ne 0 %then %do;
19992 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19993 +             %end;
19994 +            %end;
19995 +          end;
19996 +          else if last.node then do;
19997 +            %if &validFlag eq N %then %do;
19998 +             %if &em_profitflag ne 0 %then %do;
19999 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20000 +             %end;
20001 +             %if &em_lossflag ne 0 %then %do;
20002 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20003 +             %end;
20004 +             /*if CATEGORY="&targetEvent" then do;
20005 +               profitloss=statvalue;
20006 +             end;*/
20007 +            %end;
20008 +            %else %do;
20009 +             %if &em_profitflag ne 0 %then %do;
20010 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20010!+14.&EM_PROPERTY_SPLITPRECISION);
20011 +                if CATEGORY="&targetEvent" then do;
20012 +                 profitloss=ALTERNATIVE_PROFIT;
20013 +                end;
20014 +             %end;
20015 +             %if &em_lossflag ne 0 %then %do;
20016 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20016!+14.&EM_PROPERTY_SPLITPRECISION);
20017 +                if CATEGORY="&targetEvent" then do;
20018 +                  profitloss=ALTERNATIVE_LOSS;
20019 +                end;
20020 +             %end;
20021 +            %end;
20022 +            output;
20023 +          end;
20024 +          else do;
20025 +            %if &validFlag eq N %then %do;
20026 +             %if &em_profitflag ne 0 %then %do;
20027 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20028 +             %end;
20029 +             %if &em_lossflag ne 0 %then %do;
20030 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20031 +             %end;
20032 +            %end;
20033 +            %else %do;
20034 +             %if &em_profitflag ne 0 %then %do;
20035 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
20035!+14.&EM_PROPERTY_SPLITPRECISION);
20036 +             %end;
20037 +             %if &em_lossflag ne 0 %then %do;
20038 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
20038!+14.&EM_PROPERTY_SPLITPRECISION);
20039 +             %end;
20040 +            %end;
20041 +          end;
20042 +        %end;
20043 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20044 +          if strip(CATEGORY) = "&targetevent" then do;
20045 +            %if &validFlag eq N %then %do;
20046 +             %if &em_profitflag ne 0 %then %do;
20047 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20048 +             %end;
20049 +             %if &em_lossflag ne 0 %then %do;
20050 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
20051 +             %end;
20052 +             profitloss=statvalue;
20053 +            %end;
20054 +            %else %do;
20055 +             %if &em_profitflag ne 0 %then %do;
20056 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
20056!+;
20057 +                profitloss=ALTERNATIVE_PROFIT;
20058 +             %end;
20059 +             %if &em_lossflag ne 0 %then %do;
20060 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
20061 +                profitloss=ALTERNATIVE_LOSS;
20062 +             %end;
20063 +            %end;
20064 +            output;
20065 +          end;
20066 +        %end;
20067 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
20068 +          if strip(CATEGORY) = "&targetevent" then do;
20069 +            %if &validFlag eq N %then %do;
20070 +             profitloss=statvalue;
20071 +            %end;
20072 +            %else %do;
20073 +             %if &em_profitflag ne 0 %then %do;
20074 +                profitloss=ALTERNATIVE_PROFIT;
20075 +             %end;
20076 +             %if &em_lossflag ne 0 %then %do;
20077 +                profitloss=ALTERNATIVE_LOSS;
20078 +             %end;
20079 +            %end;
20080 +            output;
20081 +          end;
20082 +        %end;
20083 +      run;
20084 +    %end;
20086 +    data tempprob(keep= node probtext);
20087 +      length probtext $800;
20088 +      retain probtext;
20089 +      set tempprob ;
20090 +      by node;
20092 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
20093 +      %let probtype = &EM_PROPERTY_TARGET;
20094 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
20095 +        %let probtype = ALL;
20096 +      %end;
20098 +      %if "&probtype" eq "ALL" %then %do;
20099 +        if first.node then do;
20100 +          %if &validFlag eq N %then %do;
20101 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20102 +          %end;
20103 +          %else %do;
20104 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20105 +          %end;
20106 +        end;
20107 +        else if last.node then do;
20108 +          %if &validFlag eq N %then %do;
20109 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20110 +          %end;
20111 +          %else %do;
20112 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20113 +          %end;
20114 +          output;
20115 +        end;
20116 +        else do;
20117 +          %if &validFlag eq N %then %do;
20118 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20119 +          %end;
20120 +          %else %do;
20121 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20122 +          %end;
20123 +        end;
20124 +      %end;
20125 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
20126 +        if strip(CATEGORY) = "&targetevent" then do;
20127 +          %if &validFlag eq N %then %do;
20128 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
20129 +          %end;
20130 +          %else %do;
20131 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
20132 +          %end;
20133 +          output;
20134 +        end;
20135 +      %end;
20136 +      %else %if "&probtype" eq "NONE" %then %do;
20137 +        if last.node then do;
20138 +          output;
20139 +        end;
20140 +      %end;
20141 +    run;
20142 +  %end;
20144 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
20146 +  %let oldexists=0;
20147 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
20148 +     data old_tree_plot;
20149 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
20150 +        rename nodecolor=oldnodecolor;
20151 +     run;
20153 +     proc sort data=old_tree_plot;
20154 +        by node;
20155 +     run;
20157 +     %let oldexists=1;
20158 +  %end;
20160 +  data &EM_USER_TREE_PLOT;
20161 +    length textall $800;
20162 +    merge tempoutnodes temptargetused
20164 +    %if &em_intTarget eq Y %then %do;
20165 +      tempinterval
20166 +    %end;
20168 +    %if &em_classTarget eq Y %then %do;
20170 +      %if &validFlag eq N %then %do;
20171 +        tempn(rename=(statvalue=N))
20172 +      %end;
20173 +      %else %do;
20174 +        tempn
20175 +      %end;
20177 +      temppredict tempprob
20179 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
20180 +        tempprofittext
20181 +      %end;
20182 +    %end;
20183 +    ;
20184 +    by node;
20186 +    /* build nodetext based on user selection */
20187 +    textall="";
20189 +    %if &em_intTarget eq Y %then %do;
20190 +    if tarlevel="INTERVAL" then do;
20191 +      /* Nodeid */
20192 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20193 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20194 +      %end;
20196 +      /* Target identifier if multiple targets are used */
20197 +      %if "&multipleTar" eq "Y" %then %do;
20198 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20199 +      %end;
20201 +      %if &validFlag eq Y %then %do;
20202 +         /* Column labels displayed in validflag eq Y only */
20203 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20204 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20204!+noquote ))";
20205 +         %end;
20207 +         /* Average values */
20208 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20209 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20210 +         %end;
20212 +         /* RASE */
20213 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20214 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
20215 +         %end;
20217 +         /* Count */
20218 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20219 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
20220 +         %end;
20221 +      %end;
20222 +      %else %do;
20223 +         /* Average values */
20224 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
20225 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
20226 +         %end;
20228 +         /* RASE */
20229 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
20230 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
20231 +         %end;
20233 +         /* Count */
20234 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20235 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
20236 +         %end;
20237 +      %end;
20239 +      /* nodecolor */
20240 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
20241 +        nodecolor=PREDICTION;
20242 +      %end;
20243 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
20244 +        nodecolor=RASE;
20245 +      %end;
20246 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
20247 +        nodecolor=1;
20248 +      %end;
20250 +    end;
20251 +    %end;
20252 +    %if &em_classTarget eq Y %then %do;
20253 +    if tarlevel^="INTERVAL" then  do;
20255 +      /* Nodeid */
20256 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
20257 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
20258 +      %end;
20259 +      /* Target identifier if multiple targets are used */
20260 +      %if "&multipleTar" eq "Y" %then %do;
20261 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
20262 +      %end;
20264 +      /* Predicted values */
20265 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
20266 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
20267 +      %end;
20269 +      /* Column labels displayed in validflag eq Y only */
20270 +      %if "&ValidFlag" eq "Y" %then %do;
20271 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
20272 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
20272!+noquote ))";
20273 +        %end;
20274 +      %end;
20276 +      /* Target Values */
20277 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
20278 +        textall=strip(textall)||"0A"x||strip(probtext);
20279 +      %end;
20281 +      /* include profit or loss for all target levels */
20282 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
20283 +        textall=strip(textall)||"0A"x||strip(profittext);
20284 +      %end;
20286 +      %if &validFlag eq N %then %do;
20287 +        /* Percent Correct */
20288 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20289 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
20290 +        %end;
20292 +         /* Count */
20293 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20294 +          %if "&adjusted" eq "N" %then %do;
20295 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
20296 +          %end;
20297 +          %else %do;
20298 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
20299 +          %end;
20300 +         %end;
20301 +      %end;
20302 +      %else %do;
20303 +        /* Percent Correct */
20304 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
20305 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
20306 +        %end;
20308 +         /* Count */
20309 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
20310 +          %if "&adjusted" eq "N" %then %do;
20311 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
20312 +          %end;
20313 +          %else %do;
20314 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
20315 +          %end;
20316 +         %end;
20317 +      %end;
20319 +      /* nodecolor */
20320 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
20321 +       %if &multipleTar ne Y %then %do;
20322 +        nodecolor=&predTarget;
20323 +       %end;
20324 +       %else %do;
20325 +         nodecolor=percentcorrect;
20326 +       %end;
20327 +      %end;
20328 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
20329 +        nodecolor=percentcorrect;
20330 +      %end;
20331 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
20332 +        nodecolor=1;
20333 +      %end;
20334 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
20335 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
20336 +          nodecolor=percentcorrect;
20337 +        %end;
20338 +        %else %do;
20339 +          nodecolor=profitloss;
20340 +        %end;
20341 +      %end;
20343 +    end;
20344 +    %end;
20345 +    %if &em_intTarget eq Y %then %do;
20346 +     drop  PREDICTION  TARGET TARLEVEL
20347 +     %if &ValidFlag eq Y %then %do;
20348 +         VPREDICTION
20349 +     %end;
20350 +     ;
20351 +    %end;
20352 +    %if &em_classTarget eq Y %then %do;
20353 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
20354 +     %if &ValidFlag eq Y %then %do;
20355 +         VSTATVALUE
20356 +     %end;
20357 +     ;
20358 +    %end;
20360 +  run;
20362 +  /* add leaf index information to plotds - based on primary target only*/
20363 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20364 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20365 +      set &EM_USER_OUTSTATS;
20366 +      if ((statname="PROBABILITY"
20367 +      %if &validexist %then %do;
20368 +       or statname="VALID: PROBABILITY"
20369 +      %end;
20370 +      ) AND (CATEGORY="&TARGETEVENT")
20371 +      %if "&multipleTar" eq "Y" %then %do;
20372 +        AND (Target="%EM_TARGET")
20373 +      %end;
20374 +      );
20375 +    run;
20377 +    %if &validexist %then %do;
20378 +      proc sort data=tempprob; by node; run;
20379 +      %let vpredTarget = V%substr(&predTarget, 2);
20380 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
20381 +         by node;
20382 +         id statname;
20383 +      run;
20384 +    %end;
20385 +  %end;
20386 +  %else %do;
20387 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
20388 +      set &EM_USER_OUTSTATS;
20389 +      if ((statname="PREDICTION"
20390 +      %if &validexist %then %do;
20391 +       or statname="VALID: PREDICTION"
20392 +      %end;
20393 +      )
20394 +      %if "&multipleTar" eq "Y" %then %do;
20395 +        AND (Target="%EM_TARGET")
20396 +      %end;
20397 +      );
20398 +    run;
20399 +    %if &validexist %then %do;
20400 +      proc sort data=tempprob; by node; run;
20401 +      %let vpredTarget = V%substr(&predTarget, 2);
20402 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
20403 +         by node;
20404 +         id statname;
20405 +      run;
20406 +    %end;
20407 +  %end;
20409 +  proc sort data=tempprob; by node; run;
20410 +  data tempoutnodes;
20411 +    merge tempoutnodes tempprob;
20412 +    by node;
20413 +  run;
20415 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
20416 +  data tempnodes;
20417 +    retain traintotal validtotal;
20418 +    set tempnodes(where=(leaf ne . ));
20419 +    tprob=round(&predTarget, .01);
20420 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20421 +      percevent_train=round(tprob*100, .01);
20422 +    %end;
20423 +    %else %do;
20424 +      percevent_train=tprob;
20425 +    %end;
20427 +    perc_train=round((n/traintotal)*100, 0.01);
20428 +    /* leafwidth already has a *10 multiplier */
20429 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
20431 +    %if &validexist %then %do;
20432 +      %let vpredTarget = V%substr(&predTarget,2);
20433 +      vprob=round(&vpredTarget, .01);
20434 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20435 +        percevent_valid=round(vprob*100, .01);
20436 +      %end;
20437 +      %else %do;
20438 +        percevent_valid=vprob;
20439 +      %end;
20440 +      perc_valid=round((vn/validtotal)*100, .01);
20441 +    %end;
20443 +    index=_N_;
20444 +    keep node index tprob perc_train percevent_train
20445 +    %if &validexist %then %do;
20446 +        vprob percevent_valid perc_valid
20447 +    %end;
20448 +    ;
20449 +  run;
20450 +  proc sort data=tempnodes; by node; run;
20451 +  data &EM_USER_TREE_PLOT;
20452 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
20453 +    by node;
20454 +    if missing(node) then delete;
20455 +    %if &oldexists %then %do;
20456 +      if missing(nodecolor) then nodecolor=oldnodecolor;
20457 +      drop oldnodecolor;
20458 +    %end;
20459 +    abovetext = compbl(abovetext);
20461 +    /* add variable labels */
20462 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
20463 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
20464 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
20465 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
20466 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
20467 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
20469 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20470 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
20471 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
20472 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20473 +          %end;
20474 +          %else %do;
20475 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
20476 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
20477 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
20478 +          %end;
20479 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
20481 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
20482 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
20483 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20484 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
20485 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20486 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
20487 +          %end;
20488 +          %else %do;
20489 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
20490 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
20491 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
20492 +          %end;
20493 +    ;
20494 +  run;
20496 +  /* delete temporary tables */
20497 +  proc datasets lib=work nolist;
20498 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
20499 +  run;
20501 +%mend em_tree_makePlotDs;
20505 +%macro em_tree_report;
20507 +   /* report properties */
20508 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
20509 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
20510 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
20511 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
20512 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
20513 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
20514 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
20515 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
20516 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
20517 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
20518 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
20519 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
20520 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
20522 +   %let validexist=0;
20523 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
20524 +     %let validexist=1;
20525 +   %end;
20527 +   /* determine if multiple targets will be processed */
20528 +   %let em_tree_multipleTargets=N;
20529 +   %let em_tree_numTarget=1;
20530 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20531 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20532 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20533 +         %let em_tree_multipleTargets=N;
20534 +      %end;
20535 +      %else %do;
20536 +        data _null_;
20537 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20538 +          if eof then
20539 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20540 +        run;
20542 +        %if &em_tree_numTarget gt 1 %then %do;
20543 +           %let em_tree_multipleTargets=Y;
20544 +        %end;
20545 +     %end;
20546 +   %end;
20548 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
20550 +   /* variable importance */
20551 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
20552 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
20554 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
20555 +     /* and the columns may not be generated                                                                                 */
20556 +     %let em_tree_cvexists=;
20557 +     %let em_tree_surrexists=.;
20558 +     data _null_;
20559 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
20560 +       if eof then do ;
20561 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
20562 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
20563 +       end;
20564 +     run;
20566 +     data &EM_USER_OUTIMPORT;
20567 +         set &EM_USER_OUTIMPORT;
20568 +         /* format columns based on Precison value specified */
20569 +         format importance 15.&EM_PROPERTY_PRECISION
20570 +              %if &validexist %then %do;
20571 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
20572 +              %end;
20573 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
20574 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
20575 +              %end;
20576 +         ;
20577 +     run;
20579 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
20580 +     proc print data=&EM_USER_OUTIMPORT
20581 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
20582 +          (where=((nrules>0) OR (nsurrogates>0)))
20583 +        %end;
20584 +        %else %do;
20585 +           (where=(nrules>0))
20586 +        %end;
20587 +        label noobs
20588 +        ;
20589 +     run;
20590 +     title10;
20592 +   %end;
20594 +   /* Sequence */
20595 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
20596 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
20597 +   data _null_ ;
20598 +      set &EM_USER_outseq (obs=2) end=eof ;
20599 +      if eof then do ;
20600 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
20601 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
20602 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
20603 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
20604 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
20605 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
20606 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
20607 +      end;
20608 +    run;
20610 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
20611 +      data &EM_USER_OUTSEQ;
20612 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
20613 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
20614 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20615 +           _XMISC_=_VMISC_
20616 +        %end;
20617 +        %if "&em_tree_aprof" ne "."  %then %do;
20618 +           _XAPROF_=_VAPROF_
20619 +           _XPROF_ = _VPROF_
20620 +        %end;
20621 +        %if "&em_tree_aloss" ne "."  %then %do;
20622 +           _XALOSS_=_VALOSS_
20623 +        %end;
20624 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
20625 +           _XPASE_ = _VPASE_
20626 +           _XPMISC_ = _VPMISC_
20627 +        %end;
20629 +        ));
20630 +     %end;
20631 +     %else %do;
20632 +        set &EM_USER_OUTSEQ;
20633 +     %end;
20635 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20636 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20637 +            _MISC_   15.&EM_PROPERTY_PRECISION
20638 +         %end;
20639 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20640 +            _PASE_  15.&EM_PROPERTY_PRECISION
20641 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20642 +         %end;
20643 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20644 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20645 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20646 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20647 +            %end;
20648 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20649 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20650 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20651 +            %end;
20652 +         %end;
20653 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20654 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20655 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20656 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20657 +            %end;
20658 +         %end;
20659 +         %if "&em_tree_seq" ne "." %then %do;
20660 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20661 +         %end;
20662 +         %if "&em_tree_vseq" ne "." %then %do;
20663 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20664 +         %end;
20665 +         %if "&em_tree_aprof" ne "." %then %do;
20666 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20667 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20668 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20669 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20670 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20671 +           %end;
20672 +         %end;
20673 +         %else %if "&em_tree_aloss" ne "." %then %do;
20674 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20675 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20676 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20677 +           %end;
20678 +         %end;
20679 +      ;
20680 +    run;
20681 +   %end;
20683 +   /* Observation Based Importance */
20684 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20686 +      /* need to check for 0 obs */
20687 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20688 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20689 +      %let rc=%sysfunc(close(&dsid));
20691 +      %if &onobs %then %do;
20692 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20693 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20695 +         data &EM_USER_OUTOBSIMP;
20696 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20697 +           if _a;
20698 +           by _INPUT1_;
20699 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20700 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20701 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20702 +                   %end;
20703 +                   ;
20704 +         run;
20705 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20706 +      %end;
20707 +   %end;
20709 +  %end;
20711 +  /* create dataset to support tree diagram and icicle plot */
20712 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20713 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20715 +  /* display tree diagram */
20716 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20717 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20719 +  /* display icicle diagram */
20720 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20721 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20723 +  /* Leaf Statistics Plot */
20724 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20726 +  /* print leaf information to output window */
20727 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20729 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20730 +       by descending N;
20731 +     run;
20733 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20734 +     %local vn;
20735 +     data _null_;
20736 +       set t (obs=2) end=eof;
20737 +       if eof then do;
20738 +         call symput("vn", strip(put(vn, best.)));
20739 +       end;
20740 +     run;
20742 +     data t;
20743 +       set t;
20744 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20745 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20746 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20747 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20748 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20749 +       %end;
20750 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20751 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20752 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20753 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20754 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20755 +          %end;
20756 +       %end;
20757 +       ;
20758 +     run;
20760 +     /* determine if rase is found in t */
20761 +    %let dsid=%sysfunc(open(t,i));
20762 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20763 +    %let rc=%sysfunc(close(&dsid));
20765 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20766 +     proc print data=t noobs label;
20767 +       where tprob ne .;
20768 +       var node depth N tprob
20769 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20770 +         %if "&vn" ne "." %then %do;
20771 +           VN
20772 +         %end;
20773 +         vprob
20774 +       %end;
20775 +       %if &raseexists %then %do;
20776 +            RASE
20777 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20778 +              VRASE
20779 +            %end;
20780 +       %end;
20781 +       ;
20782 +     run;
20783 +     title10;
20784 +  %end;
20786 +  /* create plots that are done during training of node */
20787 +  /* display iterative plot, including reference line */
20788 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20789 +   /* %if &nleaves eq  %then %do; */
20790 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20791 +      data _null_;
20792 +        set &EM_USER_OUTTOPOLOGY end=eof;
20793 +        if eof then do;
20794 +          call symput('nleaves', LEAF);
20795 +        end;
20796 +      run;
20797 +   /* %end; */
20799 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20800 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20801 +  %end;
20803 +  /* display leaf statistics */
20804 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20806 +  /* stats by node if multiple targets = Y */
20807 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20808 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20809 +    data &EM_USER_OUTSTATS;
20810 +      set &EM_USER_OUTSTATS;
20812 +     * if STATNAME="TARGET" then delete;
20813 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20814 +      drop leaf;
20815 +    run;
20816 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20818 +  %end;
20819 +  %else %do;
20820 +    /* add outstats and outdescribe to spk but not results */
20821 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20822 +  %end;
20824 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 40 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET10_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 37 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 35 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 37 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 35 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 35 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 37 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 376 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 376 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 376 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 376 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 376 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 73 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1641 observations read from the data set EMWS1.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 37 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 73 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 37 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 75 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 75 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 75 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 37 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 75 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 75 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 37 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 37 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 75 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 525 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 525 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 525 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 450 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 75 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 525 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 525 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 525 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 75 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 525 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 525 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 525 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 525 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 150 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 75 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 150 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 150 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 150 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 75 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 150 observations read from the data set WORK.TEMPPROB.
NOTE: There were 150 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 150 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 150 observations read from the data set WORK.TEMPPROB.
NOTE: There were 75 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 75 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 150 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 75 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 75 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 75 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 75 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 75 observations read from the data set WORK.TEMPN.
NOTE: There were 75 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 75 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 75 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 525 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 150 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 150 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 150 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 150 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 75 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 75 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 75 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 75 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 75 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 38 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 38 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: There were 38 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 75 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 75 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 75 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 75 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      297:141
NOTE: There were 75 observations read from the data set EMWS1.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
20825
20826  *------------------------------------------------------------*;
20827  * End REPORT: Tree2;
20828  *------------------------------------------------------------*;
 
20829  /* Reset EM Options */
20830  options formchar="|----|+|---+=|-/\<>*";
20831  options nocenter ls=256 ps=10000;
20832  goptions reset=all device=GIF NODISPLAY;
 
20833  proc sort data=WORK.EM_USER_REPORT;
20834  by ID VIEW;
20835  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20836  proc sort data=EMWS1.Repl_CMeta_TRAIN out=WORK.SUBSETINMETA;
20837  by NAME;
20838  run;
 
NOTE: There were 32 observations read from the data set EMWS1.REPL_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 32 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20839  proc sort data=EMWS1.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20840  by NAME;
20841  run;
 
NOTE: There were 32 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 32 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
20842  data WORK.ASSESS_META;
20843  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20844  by NAME;
20845  run;
 
NOTE: There were 32 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 32 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
20846  data EM_temp_assessMeta;
20847  set EMWS1.Tree2_CMeta_TRAIN;
20848  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20849  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20850  data EM_temp_assessdata;
20851  set EMWS1.Tree2_TRAIN(keep=
20852  F_target10
20853  I_target10
20854  P_target100
20855  P_target101
20856  Q_target100
20857  Q_target101
20858  R_target100
20859  R_target101
20860  U_target10
20861  V_target100
20862  V_target101
20863  _WARN_
20864  target10
20865  );
20866  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 4743 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Visualizza EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
 
NOTE: There were 4743 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 4743 observations read from the data set EMWS1.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 4743 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.15 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
25148   data EM_temp_assessMeta;
25149   set EMWS1.Tree2_CMeta_TRAIN;
25150   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
25151   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
25152   data EM_temp_assessdata;
25153   set EMWS1.Tree2_VALIDATE(keep=
25154   F_target10
25155   I_target10
25156   P_target100
25157   P_target101
25158   Q_target100
25159   Q_target101
25160   R_target100
25161   R_target101
25162   U_target10
25163   V_target100
25164   V_target101
25165   _WARN_
25166   target10
25167   );
25168   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2035 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: Visualizza EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.12 seconds
 
NOTE: There were 2035 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: There were 2035 observations read from the data set EMWS1.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2035 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.18 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
29459   %let _cn = %sysfunc(getoption(CENTER));
29460   options nocenter;
29461   proc print data=EMWS1.Tree2_EMREPORTFIT noobs label;
29462   var STAT LABEL TRAIN
29463   VALIDATE
29464   ;
29465   by TARGET TARGETLABEL;
29466   title9 ' ';
29467   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
29468   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29469   title10;
29470   options &_cn;
 
29471   proc sort data=EMWS1.Tree2_EMCLASSIFICATION nothreads;
29472   by DATAROLE TARGET TARGETLABEL;
29473   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
29474   %let _cn = %sysfunc(getoption(CENTER));
29475   options nocenter;
29476   proc print data=EMWS1.Tree2_EMCLASSIFICATION noobs label;
29477   var from into pct_row pct_col count percent
29478   ;
29479   by DATAROLE TARGET TARGETLABEL;
29480   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
29481   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
29482   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
29483   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
29484   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
29485   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
29486   where _TYPE_='PREDICTION';
29487   title9 ' ';
29488   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
29489   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
 
29490   title9;
29491   title10;
29492   options &_cn;
 
29493   %let _cn = %sysfunc(getoption(CENTER));
29494   options nocenter;
29495   data EMWS1.Tree2_EMEVENTREPORT;
29496   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
29497   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
29497 ! FALSEEVENT
29498   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
29499      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
29500   FALSEEVENT=0;
29501   FALSENEVENT=0;
29502   TRUEEVENT=0;
29503   TRUENEVENT=0;
29504   set EMWS1.Tree2_EMEVENTREPORT;
29505   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
29506   proc print data=EMWS1.Tree2_EMEVENTREPORT noobs label;
29507   title9 ' ';
29508   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
29509   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
29510   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29511   title10;
29512   options &_cn;
 
29513   proc datasets library=EMWS1 nolist;
29514   modify Tree2_EMRANK;
29515   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29516   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29517   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMRANK.DATA.
29518   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
 
 
29519   %let _cn = %sysfunc(getoption(CENTER));
29520   options nocenter;
29521   proc print data=EMWS1.Tree2_EMRANK label noobs;
29522   var
29523   decile gain lift liftc resp respc N _meanP_;
29524   by
29525   notsorted DATAROLE
29526   notsorted TARGET
29527   notsorted TARGETLABEL
29528   ;
29529   title9 ' ';
29530   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29531   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29532   title10;
29533   options &_cn;
 
29534   proc datasets library=EMWS1 nolist;
29535   modify Tree2_EMSCOREDIST;
29536   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29537   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29538   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMSCOREDIST.DATA.
29539   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 

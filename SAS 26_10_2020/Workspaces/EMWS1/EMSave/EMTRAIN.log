*------------------------------------------------------------*
* Log di training
Data:               23 ottobre 2020
Ora:                19:03:18
*------------------------------------------------------------*
15207  proc freq data=EMWS1.EMSave_VariableSet noprint;
15208  table ROLE*LEVEL/out=WORK.EMSaveMETA;
15209  run;

NOTE: There were 40 observations read from the data set EMWS1.EMSAVE_VARIABLESET.
NOTE: The data set WORK.EMSAVEMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

15210  proc print data=WORK.EMSaveMETA label noobs;
15211  var ROLE LEVEL COUNT;
15212  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15213  title9 ' ';
15214  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15215  run;

NOTE: There were 4 observations read from the data set WORK.EMSAVEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

15216  title10;

15217  %let EMEXCEPTIONSTRING=;
15560  *------------------------------------------------------------*;
15561  * EMSave: Generation of macros and macro variables;
15562  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15563  *------------------------------------------------------------*;

15564  %let EMEXCEPTIONSTRING=;
15565  *------------------------------------------------------------*;
15566  * TRAIN: EMSave;
15567  *------------------------------------------------------------*;
15568  %let EM_ACTION = TRAIN;
15569  %let syscc = 0;
15570  *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
15571  
15572  %macro EM_SAVEXT_MAIN;
15573  
15574     %if %upcase("&EM_ACTION") = "CREATE" %then %do;
15575         filename _create catalog 'sashelp.emutil.savext_create.source';
15576         %include _create;
15577         filename _create;
15578         %EM_SAVEXT_CREATE;
15579     %end;
15580     %else
15581     %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
15582         filename _train catalog 'sashelp.emutil.savext_train.source';
15583         %include _train;
15584         filename _train;
15585         %EM_SAVEXT_TRAIN;
15586     %end;
15587  
15588  %mend EM_SAVEXT_MAIN;
15589  
15590  %EM_SAVEXT_MAIN;
NOTE: %INCLUDE (level 1) file _TRAIN is file SASHELP.EMUTIL.SAVEXT_TRAIN.SOURCE.
15591 +*** TRAINING MACRO FOR EM_SAVEXT EXTENSION NODE;
15593 +%macro EM_SAVEXT_TRAIN;
15595 +    *** IMPORT UTILITY MACROS;
15597 +    filename _savutil catalog 'sashelp.emutil.savext_macros.source';
15598 +    %include _savutil;
15599 +    filename _savutil;
15601 +    *** CHECK FOR IMPORT DATA SOURCES WITHOUT READING PROJECT SETS ************;
15602 +    *** POPULATE MACRO ARRAY TO HOLD ONLY EXISTING AND REQUESTED PARTITIONS ***;
15603 +    *** GET NUMBER OF EXISTING AND REQUESTED PARTITIONS ***********************;
15605 +    data _null_;
15606 +        length _save_set $50 _save_role $20 _save_set_index $12 _save_role_index $14 _i 3;
15607 +        _i=0;
15609 +        *** TRAIN;
15610 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_DATA) and (("&EM_PROPERTY_TRAIN"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15611 +            _i=_i+1;                                                        /* INCREMENT ARRAY INDEX */
15612 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_DATA, TRAIN, _i);                /* INSERT INTO MACRO ARRAY */
15613 +        %end;
15615 +        *** VALIDATE;
15616 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_VALIDATE) and (("&EM_PROPERTY_VALIDATE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15617 +            _i=_i+1;
15618 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_VALIDATE, VALIDATE, _i);
15619 +        %end;
15621 +        *** TEST;
15622 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TEST) and (("&EM_PROPERTY_TEST"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15623 +            _i=_i+1;
15624 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TEST, TEST, _i);
15625 +        %end;
15627 +        *** SCORE;
15628 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_SCORE) and (("&EM_PROPERTY_SCORE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15629 +            _i=_i+1;
15630 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_SCORE, SCORE, _i);
15631 +        %end;
15633 +        *** TRANSACTION;
15634 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TRANSACTION) and (("&EM_PROPERTY_TRANSACTION"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15635 +            _i=_i+1;
15636 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TRANSACTION, TRANSACTION, _i);
15637 +        %end;
15639 +        *** ESTABLISH NUMBER OF SETS TO SAVE;
15640 +        call symput('_NUM_SAVE_SETS', strip(put(_i,1.)));
15642 +    run;
15644 +    *** EXIT IF NO PARTITIONS TO SAVE;
15646 +    %if ^(&_NUM_SAVE_SETS) %then %do;
15647 +        %put &EM_CODEBAR;
15648 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nodata_warn, NOQUOTE));
15649 +        %put &WARNING;
15650 +        %put &EM_CODEBAR;
15651 +        %goto quit;
15652 +    %end;
15654 +    *** FOR FILE PREFIXES CONTAINING PROBLEMATIC CHARACTERS;
15655 +    *** REVERT TO DEFAULT NAME;
15657 +    %if ^(%nrbquote(%sysfunc(compress("&EM_PROPERTY_NAME")))="") %then %do;
15658 +        %let _BAD_CHARS= <>:%str(%")%str(%')/\|?* %nrstr(&)%nrstr(%%);
15659 +        %let _BAD_CHAR_FLAG= 0;
15660 +        %do _i= 1 %to %length(%nrbquote(&_BAD_CHARS));
15661 +            %if %index(%nrbquote(&EM_PROPERTY_NAME), %nrbquote(%substr(%nrbquote(&_BAD_CHARS), &_i, 1)))
15662 +                %then %let _BAD_CHAR_FLAG= 1;
15663 +        %end;
15664 +        %if %sysfunc(kcount(%nrbquote(&EM_PROPERTY_NAME))) %then %let _BAD_CHAR_FLAG= 1;
15666 +        %if &_BAD_CHAR_FLAG %then %do;
15667 +           %put &EM_CODEBAR;
15668 +           %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_bad_char_err, NOQUOTE));
15669 +           %put &WARNING;
15670 +           %put &EM_CODEBAR;
15671 +           *** REVERT TO DEFAULT NAME;
15672 +           %let EM_PROPERTY_NAME = em_save;
15673 +        %end;
15674 +    %end;
15675 +    *** ACCOUNT FOR LIB ISSUES;
15677 +    %if (%upcase(%sysfunc(compress("&EM_PROPERTY_LIB"))) = "WORK") %then %do;
15678 +        %put &EM_CODEBAR;
15679 +        %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_work_lib_warn, NOQUOTE));
15680 +        %put &WARNING;                                                      /* WORK IS A TEMPORARY LIBRARY */
15681 +        %put &EM_CODEBAR;                                                   /* IT DISAPPEARS AFTER THE FLOW COMPLETES ALONG WITH DATA SAVED THERE */
15682 +    %end;
15685 +    %if (%sysfunc(compress("&EM_PROPERTY_LIB")) = "") %then %do;            /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
15686 +        libname _em_save "%nrbquote(&EM_NODEDIR)";                          /* AND IN OTHERS AS "" */
15687 +        %let EM_PROPERTY_LIB = _em_save;
15688 +    %end;
15690 +    *** CHECK FOR EXISTING LIB;
15692 +    %let _rc = %sysfunc(libref(&EM_PROPERTY_LIB));
15693 +    %if &_rc %then %do;
15694 +        %let EMEXCEPTIONSTRING=exception.server.DATASOURCE.LIBRARY.NOTASSIGNED,&EM_PROPERTY_LIB;
15695 +        %put &EM_CODEBAR;
15696 +        %let ERROR1 = %sysfunc(sasmsg(sashelp.dmine, DATASOURCE.LIBRARY.NOTASSIGNED_ERR, NOQUOTE, &EM_PROPERTY_LIB));
15697 +        %put &ERROR1;
15698 +        %put &EM_CODEBAR;
15699 +        %goto quit;
15700 +    %end;
15702 +    *** ACCOUNT FOR DEFAULT NAME;                                           /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
15703 +                                                                            /* AND IN OTHERS AS "" */
15704 +    %if (%sysfunc(compress("&EM_PROPERTY_NAME"))="") %then %let EM_PROPERTY_NAME = em_save;
15706 +    *** CALL UTILITY MACROS TO SAVE SETS *************************************;
15708 +    %if ("&EM_PROPERTY_TYPE"="SAS7BDAT") %then %do;                         /* OUTPUT SAS DATA SET */
15709 +        %do _i=1 %to &_num_save_sets;
15710 +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);           /* GET EXACT INPUT VARS FOR EACH INPUT SET */
15711 +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;                     /* IF NO VARIABLES WERE SELECTED CONTINUE TO NEXT PARTITION */
15712 +                %put &EM_CODEBAR;                                           /* REALLY ONLY MATTERS FOR TRANSACTION DATA - OTHERWISE ALL PARTITIONS WILL HAVE SAME NUMBER OF VARS */
15713 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
15714 +                %put &WARNING;
15715 +                %put &EM_CODEBAR;
15716 +                %goto continue_sas_loop;
15717 +            %end;
15718 +            %EM_SAVEXT_SAS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);                /* CYCLE THROUGH SETS TO SAVE */
15719 +            %continue_sas_loop:
15720 +        %end;
15721 +    %end;
15722 +    %else %do;                                                              /* OUTPUT JMP, EXCEL 2007, CSV OR TAB TABLE */
15723 +        %do _i=1 %to &_num_save_sets;
15724 +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
15725 +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;
15726 +                %put &EM_CODEBAR;
15727 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
15728 +                %put &WARNING;
15729 +                %put &EM_CODEBAR;
15730 +                %goto continue_pxpt_loop;
15731 +            %end;
15732 +            %EM_SAVEXT_PXPT(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
15733 +            %continue_pxpt_loop:
15734 +        %end;
15735 +    %end;
15737 +    *** OUTPUT ****************************************************************;
15739 +    %if %sysfunc(exist(_save_output_temp)) %then %do;
15741 +        %EM_GETNAME(key=SAVEOUT, type=DATA);
15743 +        *** SAVE OUTPUT DATA TO PROJECT;
15745 +        data &EM_USER_SAVEOUT;
15746 +            set _save_output_temp;
15747 +            label
15748 +                nobs="%sysfunc(sasmsg(sashelp.dmine, save_numobs_vlabel, NOQUOTE))"
15749 +                outnobs="%sysfunc(sasmsg(sashelp.dmine, save_numoutobs_vlabel, NOQUOTE))"
15750 +                vars="%sysfunc(sasmsg(sashelp.dmine, rpt_varcount_vlabel, NOQUOTE))"
15751 +                name="%sysfunc(sasmsg(sashelp.dmine, save_location_vlabel, NOQUOTE))"
15752 +                %if ("&EM_PROPERTY_TYPE"= "SAS7BDAT") %then %do;
15753 +                    lib= "%sysfunc(sasmsg(sashelp.dmine, rpt_datalib_vlabel, NOQUOTE))"
15754 +                %end;
15755 +                ;
15756 +        run;
15758 +        *** PRINT TO OUTPUT;
15760 +        title "%sysfunc(sasmsg(sashelp.dmine, save_results_title, NOQUOTE))";
15761 +        proc print data=&EM_USER_SAVEOUT label noobs; run;
15762 +        %EM_REPORT(key=SAVEOUT, viewtype=DATA, autodisplay=Y);
15763 +        title;
15765 +    %end;
15767 +    *** SAVE FORMATS **********************************************************;
15769 +    *** CHECK REPLACE CONSTRAINT FOR FORMATS;
15771 +    %if ((%sysfunc(cexist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._FORMATS)) and
15772 +        "&EM_PROPERTY_TYPE"="SAS7BDAT") and
15773 +        ("&EM_PROPERTY_REPLACE"="N"))
15774 +            %then %do;
15775 +                %put &EM_CODEBAR;
15776 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
15777 +                %put &WARNING;
15778 +                %put &EM_CODEBAR;
15779 +                %goto quit;
15780 +            %end;
15782 +    %if ((%sysfunc(fileexist(&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt)) and
15783 +        "&EM_PROPERTY_TYPE" ne "SAS7BDAT") and
15784 +        ("&EM_PROPERTY_REPLACE"="N"))
15785 +           %then %do;
15786 +                %put &EM_CODEBAR;
15787 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
15788 +                %put &WARNING;
15789 +                %put &EM_CODEBAR;
15790 +                %goto quit;
15791 +            %end;
15793 +    *** WRITE FORMAT CATALOGS OR TRANSPORT FILE TO ACCOMPANY SAVED DATA;
15794 +    *** CONTINGENT ON FORMATS EXISTING;
15795 +    *** PARSE NODE VARIABLE SET FOR FORMATS;
15797 +    %let _FORMAT_FLAG = 0;
15798 +    data _formats;
15799 +        length format $32; /* AVOID MERGE VARIABLE LENGTH WARNING */
15800 +        set &EM_DATA_VARIABLESET(keep=format where=(format ne '')) end=eof;
15801 +        format = tranwrd(format, '.', '');
15802 +        if indexc(format, '$') then fmttype = 'C';
15803 +        else fmttype = 'N';
15804 +        if eof then call symput('_FORMAT_FLAG',strip(put(1,1.)));
15805 +    run;
15806 +    %if (&_FORMAT_FLAG) %then %EM_SAVEXT_CATALOG(_formats);
15807 +    proc delete data=_formats; run;
15809 +    *** HOUSEKEEPING **********************************************************;
15811 +    %quit:
15813 +    %if ^(%sysfunc(libref(_em_save))) %then %do;
15814 +        libname &EM_PROPERTY_LIB clear;
15815 +    %end;
15817 +    %if (%sysfunc(exist(_save_output_temp))) %then %do;
15818 +        proc delete data=_save_output_temp; run;
15819 +    %end;
15821 +%mend EM_SAVEXT_TRAIN;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref _TRAIN has been deassigned.
NOTE: %INCLUDE (level 1) file _SAVUTIL is file SASHELP.EMUTIL.SAVEXT_MACROS.SOURCE.
15822 +*** UTILITY MACROS FOR EMSAVE NODE ********************************************;
15824 +*** FUNCTIONALITY TO SAVE SAS DATA SETS ***************************************;
15825 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15827 +%macro EM_SAVEXT_SAS(_SAVE_ROLE, _SAVE_SET);
15829 +    *** CHECK SAS SET NAME LENGTH;
15831 +    %if %symexist(EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
15832 +        %if ("&EM_SAVEXT_SAS_NAME_LENGTH"="") %then %let EM_SAVEXT_SAS_NAME_LENGTH=30;
15833 +    %end;
15834 +    %else %let EM_SAVEXT_SAS_NAME_LENGTH=30;                                /* 30 FOR OUTSIDE VENDOR LIBS */
15836 +    %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
15837 +        %put &EM_CODEBAR;
15838 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_namelengthsas_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
15839 +        %put &WARNING;
15840 +        %put &EM_CODEBAR;
15841 +        *** REVERTING TO DEFAULT NAME;
15842 +        %let EM_PROPERTY_NAME = em_save;
15843 +    %end;
15845 +    *** CHECK REPLACE CONSTRAINT FOR DATA SET;
15847 +    %if (%sysfunc(exist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE)) and
15848 +        ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15849 +        %put &EM_CODEBAR;
15850 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
15851 +        %put &WARNING;
15852 +        %put &EM_CODEBAR;
15853 +        %goto quit;
15854 +    %end;
15856 +    *** WRITE SAVED DATA SET;
15858 +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;
15860 +    data &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
15861 +        set &_SAVE_SET (obs=&EM_PROPERTY_OUTOBS);
15862 +        keep %EM_SAVEXT_VARS;
15863 +    run;
15865 +    *** WRITE RESULTS *********************************************************;
15866 +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
15868 +    %let _dsid=%sysfunc(open(&_SAVE_SET));
15869 +    %if &_dsid %then %do;
15870 +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
15871 +        %let _rc=%sysfunc(close(&_dsid));
15872 +        %if %eval(&_SAVE_NOBS < 0) %then %do;
15873 +            proc sql noprint;
15874 +                select count(*) into: _SAVE_NOBS
15875 +                from &_SAVE_SET;
15876 +            ;
15877 +            quit;
15878 +        %end;
15879 +    %end;
15880 +    %else %do;
15881 +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
15882 +        %put &EM_CODEBAR;
15883 +        %let ERROR2 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
15884 +        %put &ERROR2;
15885 +        %put &EM_CODEBAR;
15886 +        %goto quit;
15887 +    %end;
15889 +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
15890 +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
15891 +    %end;
15893 +    data _save_output_temp_record;
15894 +        length lib $20 name $255 nobs $20 outnobs $20 vars $20;
15895 +        vars=left("&EM_NUM_SAVEXT_VARS");
15896 +        outnobs=left("&EM_PROPERTY_OUTOBS");
15897 +        nobs=left("&_SAVE_NOBS");
15898 +        lib= left("&EM_PROPERTY_LIB");
15899 +        name=left("%sysfunc(pathname(&EM_PROPERTY_LIB))&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE)");
15900 +    run;
15902 +    proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
15903 +    proc delete data=_save_output_temp_record; run;
15905 +    *** HOUSEKEEPING **********************************************************;
15907 +    %quit:
15909 +    %if %symexist(_SAVE_NOBS) %then %do;
15910 +        data _null_;
15911 +            call symdel('_SAVE_NOBS', 'NOWARN');
15912 +        run;
15913 +    %end;
15915 +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
15916 +        data _null_;
15917 +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
15918 +        run;
15919 +    %end;
15921 +%mend EM_SAVEXT_SAS;
15923 +*** FUNCTIONALITY TO SAVE NON-SAS FORMATS *************************************;
15924 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15926 +%macro EM_SAVEXT_PXPT(_SAVE_ROLE, _SAVE_SET);
15928 +    *** ACCOUNT FOR DEFAULT DIR;
15930 +    %if ("&EM_PROPERTY_DIRECTORYSELECTOR" = "") %then %let EM_PROPERTY_DIRECTORYSELECTOR = %nrbquote(&EM_NODEDIR);
15932 +    *** CHECK JMP NAME LENGTH;
15934 +    %if %symexist(EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
15935 +        %if ("&EM_SAVEXT_JMP_NAME_LENGTH"= "") %then %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
15936 +    %end;
15937 +    %else %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
15939 +    %if ("&EM_PROPERTY_TYPE"="JMP") %then %do;
15940 +        %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
15941 +            %put &EM_CODEBAR;
15942 +            %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_namelengthjmp_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
15943 +            %put &WARNING;
15944 +            %put &EM_CODEBAR;
15945 +            *** REVERTING TO DEFAULT NAME;
15946 +            %let EM_PROPERTY_NAME = em_save;
15947 +        %end;
15948 +    %end;
15950 +    *** ESTABLISH FULL SAVE FILE NAME FOR USE BELOW;
15952 +    %let _OUT_FILE_NAME=&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE);
15954 +    *** CHECK REPLACE CONSTRAINT;
15956 +    %if (%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15957 +        %put &EM_CODEBAR;
15958 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &_OUT_FILE_NAME));
15959 +        %put &WARNING;
15960 +        %put &EM_CODEBAR;
15961 +        %goto quit;
15962 +    %end;
15963 +    %else %if (^%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15964 +        %let _REPLACE= ;
15965 +    %end;
15966 +    %else %do;
15967 +        %let _REPLACE=replace;
15968 +    %end;
15970 +    *** EXCEL 2010 LIMITATIONS;
15971 +    *** CAN BE OVERRIDDEN BY STARTUP CODE;
15973 +    %if %symexist(_EXCEL_MAX_ROWS) %then %do;
15974 +        %if ("&_EXCEL_MAX_ROWS"= "") %then %let _EXCEL_MAX_ROWS= 1048575;
15975 +    %end;
15976 +    %else %let _EXCEL_MAX_ROWS= 1048575;
15978 +    %if %symexist(_EXCEL_MAX_COLS) %then %do;
15979 +        %if ("&_EXCEL_MAX_COLS"="") %then %let _EXCEL_MAX_COLS= 16384;
15980 +    %end;
15981 +    %else %let _EXCEL_MAX_COLS=16384;
15983 +    *** GET INFO FOR EXCEL FILE SIZE LIMITATIONS AND OUTPUT;
15985 +    %let _dsid=%sysfunc(open(&_SAVE_SET));
15986 +    %if &_dsid %then %do;
15987 +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
15988 +        %let _rc=%sysfunc(close(&_dsid));
15989 +        %if %eval(&_SAVE_NOBS < 0) %then %do;
15990 +            proc sql noprint;
15991 +                select count(*) into: _SAVE_NOBS
15992 +                from &_SAVE_SET;
15993 +                ;
15994 +            quit;
15995 +        %end;
15996 +    %end;
15997 +    %else %do;
15998 +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&_SAVE_SET;
15999 +        %put &EM_CODEBAR;
16000 +        %let ERROR3 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &_SAVE_SET));
16001 +        %put &ERROR3;
16002 +        %put &EM_CODEBAR;
16003 +        %goto quit;
16004 +    %end;
16006 +    *** CHECK EXCEL FILE SIZE;
16008 +    %if ("&EM_PROPERTY_TYPE"="XLSX") and (%eval(&_SAVE_NOBS > &_EXCEL_MAX_ROWS) or %eval(&EM_NUM_SAVEXT_VARS > &_EXCEL_MAX_COLS)) %then %do;
16009 +        %put &EM_CODEBAR;
16010 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_excel_limit_warn, NOQUOTE, &_SAVE_SET));
16011 +        %put &WARNING;
16012 +        %put &EM_CODEBAR;
16013 +    %end;
16015 +    *** EXECUTE EXPORT ********************************************************;
16016 +    *** VIEW USED TO AVOID EMPTY COLUMNS IN EXPORTED TAB AND CSV FILES ********;
16018 +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;      /* OTHERWISE ONLY EM_PROPERTY_OUTOBS WILL BE WRITTEN */
16020 +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
16021 +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
16022 +    %end;
16024 +    %if ("&EM_PROPERTY_TYPE"="TXT" or "&EM_PROPERTY_TYPE"="CSV") %then %do;
16026 +        *** SPECIAL CONDITION FOR TAB PROPERTY;
16028 +        %if ("&EM_PROPERTY_TYPE"="TXT") %then %let EM_PROPERTY_TYPE=tab;
16030 +        data _temp_save_view /view=_temp_save_view;
16031 +            set &_SAVE_SET;
16032 +            keep %EM_SAVEXT_VARS;
16033 +        run;
16035 +        %let SYSCC=0;
16036 +        proc export data=_temp_save_view(obs=&EM_PROPERTY_OUTOBS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
16037 +        run;
16038 +        quit;
16040 +    %end;
16041 +    %else %do;
16043 +        %let SYSCC=0;
16044 +        proc export data=&_SAVE_SET(obs=&EM_PROPERTY_OUTOBS keep=%EM_SAVEXT_VARS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
16045 +        run;
16046 +        quit;
16048 +    %end;
16050 +    %if (^&SYSCC=0) %then %do;
16051 +        %let EMEXCEPTIONSTRING=exception.server.IO.CREATE,&_OUT_FILE_NAME;
16052 +        %put &EM_CODEBAR;
16053 +        %let ERROR4 = %sysfunc(sasmsg(sashelp.dmine, IO.CREATE_ERR, NOQUOTE, &_OUT_FILE_NAME));
16054 +        %put &ERROR4;
16055 +        %put &EM_CODEBAR;
16056 +        %goto quit;
16057 +    %end;
16059 +    *** WRITE RESULTS *********************************************************;
16060 +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
16062 +    %if %sysfunc(fileexist(&_OUT_FILE_NAME)) %then %do;
16063 +        data _save_output_temp_record;
16064 +            length name $255 nobs $20 outnobs $20 vars $20;
16065 +            vars=left("&EM_NUM_SAVEXT_VARS");
16066 +            outnobs=left("&EM_PROPERTY_OUTOBS");
16067 +            nobs=left("&_SAVE_NOBS");
16068 +            name=left("&_OUT_FILE_NAME");
16069 +        run;
16070 +        proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
16071 +        proc delete data=_save_output_temp_record; run;
16072 +    %end;
16073 +    %else %do;
16074 +        %let EMEXCEPTIONSTRING=exception.server.IO.CANTREADFILE,&_OUT_FILE_NAME;
16075 +        %put &EM_CODEBAR;
16076 +        %let ERROR5 = %sysfunc(sasmsg(sashelp.dmine, IO.CANTREADFILE_ERR, NOQUOTE, &_OUT_FILE_NAME));
16077 +        %put &ERROR5;
16078 +        %put &EM_CODEBAR;
16079 +        %goto quit;
16080 +    %end;
16082 +    *** HOUSEKEEPING **********************************************************;
16084 +    %quit:
16086 +    %if ("&EM_PROPERTY_TYPE"="tab") %then %let EM_PROPERTY_TYPE=TXT;
16088 +    %if %sysfunc(exist(_temp_save_view, VIEW)) %then %do;
16089 +        proc datasets lib=work memtype=view nolist;
16090 +            delete _temp_save_view;
16091 +        run;
16092 +        quit;
16093 +    %end;
16095 +    %if %symexist(_SAVE_NOBS) %then %do;
16096 +        data _null_;
16097 +            call symdel('_SAVE_NOBS', 'NOWARN');
16098 +        run;
16099 +    %end;
16101 +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
16102 +        data _null_;
16103 +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
16104 +        run;
16105 +    %end;
16107 +%mend EM_SAVEXT_PXPT;
16109 +*** SAVES SAS CATALOGS FOR OUTPUT DATA SETS ***********************************;
16110 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
16112 +%macro EM_SAVEXT_CATALOG(_FORMATS);
16114 +    *** SORT AND REMOVE DUPLICATES;
16116 +    proc sort data=&_FORMATS nodupkey;
16117 +        by format;
16118 +    run;
16119 +    quit;
16121 +    *** RETRIEVE FORMAT LOCATION INFO AND ASSIGNED CATALOGS IN ACTIVE SESSION;
16123 +    proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne ''))
16124 +        out=_formats2(rename=(fmtname=format));
16125 +        by fmtname;
16126 +    run;
16127 +    quit;
16129 +    *** MERGE SAS FORMATS WITH LOCATION;
16131 +    data &_FORMATS;
16132 +        merge &_FORMATS(in=_a) _formats2(in=_b);
16133 +        by format;
16134 +        if _a and _b then output;
16135 +    run;
16137 +    *** IF &_FORMATS IS EMPTY AFTER MERGE THEN NO FORMATS BELONG TO THE SAVED SET;
16139 +    proc contents data=&_FORMATS out=_formats_content_temp noprint; run;
16140 +    data _null_;
16141 +        set _formats_content_temp (obs=1);
16142 +        if nobs > 0 then call symput('_USER_FORMATS_FLAG','1');
16143 +        else call symput('_USER_FORMATS_FLAG','0');
16144 +    run;
16145 +    %if (^&_USER_FORMATS_FLAG) %then %do;
16146 +        %put &EM_CODEBAR;
16147 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
16148 +        %put &WARNING;
16149 +        %put &EM_CODEBAR;
16150 +        %goto quit;
16151 +    %end;
16153 +    *** SAVE FORMATS AS CATALOG OR TRANSPORT FORMAT;
16155 +    proc sort data=&_FORMATS;
16156 +        by libname memname;
16157 +    run;
16158 +    quit;
16160 +    *** WRITING CATALOG IN WORK AVOIDS OVERWRITING SAS CATALOG;
16161 +    *** FOR CASE REPLACE=N, TYPE ne SAS7BDAT;
16163 +    data _null_;
16164 +        set &_FORMATS end=eof;
16165 +        by libname memname;
16166 +        if first.libname or first.memname then do;
16167 +            call execute('proc catalog cat='|| strip(libname)||'.'||strip(memname)||';');
16168 +            call execute('copy out=work.&EM_PROPERTY_NAME._FORMATS et=format ;');
16169 +            call execute('select ');
16170 +        end;
16171 +        if strip(fmttype) eq 'C' then do;
16172 +            call execute(' '||strip(tranwrd(format, '$', ''))||'.formatc');
16173 +        end;
16174 +        else call execute(' '||strip(format)||'.format');
16175 +        if last.libname or last.memname then do;
16176 +            call execute(';');
16177 +            call execute('run;');
16178 +        end;
16179 +        if eof then call execute('quit;');
16180 +    run;
16182 +    %if ("&EM_PROPERTY_TYPE" = "SAS7BDAT") %then %do;
16183 +        proc copy in=work out=&EM_PROPERTY_LIB; select &EM_PROPERTY_NAME._FORMATS; run; quit;
16184 +    %end;
16185 +    %else %do;
16186 +        proc cport cat=work.&EM_PROPERTY_NAME._formats file="&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt"; run;
16187 +    %end;
16189 +    *** HOUSEKEEPING **********************************************************;
16191 +    proc datasets lib=work memtype=catalog nolist;
16192 +        delete &EM_PROPERTY_NAME._FORMATS;
16193 +    run;
16194 +    quit;
16196 +    %quit:
16198 +    proc delete data=_formats_content_temp; run;
16199 +    proc delete data=_formats2; run;
16201 +%mend EM_SAVEXT_CATALOG;
16203 +*** FIND VARIABLES TO KEEP ****************************************************;
16204 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
16206 +%macro EM_SAVEXT_GET_VARS(_SAVE_ROLE, _SAVE_SET);
16208 +    %if("%sysfunc(strip(%upcase(&_SAVE_ROLE)))" ne "TRANSACTION") %then %do;
16210 +        *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
16212 +        proc contents data=&_SAVE_SET out=_input_vars(keep=name) noprint; run;
16213 +        proc sort data=_input_vars; by name; run;
16215 +        *** EXCLUDE REJECTED OR UNUSED VARIABLES;
16217 +        proc sort data=&EM_DATA_VARIABLESET
16218 +            (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
16219 +            by name;
16220 +        run;
16222 +        data _em_savext_vars;
16223 +            merge _input_vars(in=_a) _train_vars(in=_b);
16224 +            by name;
16225 +            keep name;
16226 +            if _a and _b then output;
16227 +        run;
16229 +        *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
16231 +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
16233 +        *** HOUSEKEEPING;
16235 +        proc delete data=_input_vars; run;
16236 +        proc delete data=_train_vars; run;
16237 +        proc delete data=_em_savext_vars; run;
16239 +    %end;
16240 +    %else %do; /* TRANSCATION TABLE VARIABLES ARE NOT LISTED IN THE TRAINING VARIABLE SET */
16242 +        proc contents data=&_SAVE_SET out=_em_savext_vars(keep=name) noprint; run;
16243 +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
16244 +        proc delete data=_em_savext_vars; run;
16246 +    %end;
16248 +%mend EM_SAVEXT_GET_VARS;
16250 +*** CHECKS IF A SET OR VIEW EXISTS ********************************************;
16251 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
16253 +%macro EM_SAVEXT_SET_EXISTS(_DATASET);
16255 +    %if (%sysfunc(exist(&_DATASET)) or
16256 +        %sysfunc(exist(&_DATASET, VIEW))) and
16257 +        "&_DATASET" ne "" %then %do;
16258 +            %let _rc=1;
16259 +    %end;
16260 +    %else %do;
16261 +            %let _rc=0;
16262 +    %end;
16264 +    &_rc.
16266 +%mend EM_SAVEXT_SET_EXISTS;
16268 +*** REGISTERS SETS INTO MACRO VARIABLE ARRAY USED IN SAVING PROCESS ***********;
16269 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
16271 +%macro EM_SAVEXT_REGISTER(_DATASET, _ROLE, _i);
16273 +    _save_set="&_DATASET";
16274 +    _save_role="&_ROLE";
16275 +    _save_set_index=cats('_save_set', strip(put(&_i,1.)));
16276 +    _save_role_index=cats('_save_role', strip(put(&_i,1.)));
16277 +    call symput(_save_set_index, _save_set);
16278 +    call symput(_save_role_index, _save_role);
16280 +%mend EM_SAVEXT_REGISTER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref _SAVUTIL has been deassigned.

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK._INPUT_VARS has 40 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
      


NOTE: There were 40 observations read from the data set WORK._INPUT_VARS.
NOTE: The data set WORK._INPUT_VARS has 40 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 40 observations read from the data set EMWS1.EMSAVE_VARIABLESET.
      WHERE (use='Y') or ((use='D') and (role not = 'REJECTED'));
NOTE: The data set WORK._TRAIN_VARS has 40 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 40 observations read from the data set WORK._INPUT_VARS.
NOTE: There were 40 observations read from the data set WORK._TRAIN_VARS.
NOTE: The data set WORK._EM_SAVEXT_VARS has 40 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Dimensione della pagina del catalogo=4096,
      Numero pagine del catalogo=4,
      Data di creazione=venerdì 23 ottobre 2020 19:03:19,
      Ultima modifica=venerdì 23 ottobre 2020 19:03:19,
      Nome file=C:\Users\MARIAV~1\AppData\Local\Temp\SAS Temporary Files\_TD17896_DESKTOP-NN2L3RB_\emutil.sas7bcat,
      Release di creazione=9.0401M5,
      Host di creazione=X64_10PRO,
      Nome proprietario=DESKTOP-NN2L3RB\Maria Vallarelli,
      Dimensione=             5KB,
      Dimensione (byte)=5120

NOTE: 13 records were written to the file MACFILE.
      The minimum record length was 21.
      The maximum record length was 78.
NOTE: There were 40 observations read from the data set WORK._EM_SAVEXT_VARS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
16286 +%macro EM_SAVEXT_VARS;
16287 +"Alimentazione"n "Anno"n "Carrozzeria"n "Cilindrata"n "Cilindri"n
16288 +"Classe_emissioni"n "Colore_esterno"n "Consumo_Carburante_Totale"n
16289 +"Emissioni_di_CO2"n "Marca"n "Marce"n "Modello"n "Per_neopatentati"n
16290 +"Peso_a_vuoto"n "Porte"n "Posti_a_sedere"n "Rivestimenti"n
16291 +"Tagliandi_certificati"n "Tipo_di_cambio"n "Tipo_di_unita"n "Tipo_di_veicolo"n
16292 +"Tipo_di_vernice"n "Usato_Garantito"n "VAR36"n "Veicolo_per_non_fumatori"n
16293 +"address"n "conditional_on_price"n "country"n "discount"n "link_annuncio"n
16294 +"median"n "price"n "seller"n "target10"n "target20"n "target_35"n "target_5"n
16295 +"variazione_su_mediana"n "vehicle"n "vehicle_user_desc"n
16296 +%mend EM_SAVEXT_VARS;
16297 +%global EM_NUM_SAVEXT_VARS;
16298 +%let EM_NUM_SAVEXT_VARS = 40 ;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref MACFILE has been deassigned.

NOTE: Deleting WORK._INPUT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._TRAIN_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._EM_SAVEXT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Visualizza EMWS1.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 6778 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 6778 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: The data set LIB.AUTOSCOUT_TRAIN has 6778 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

NOTE: Visualizza EMWS1.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: There were 6778 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      


NOTE: The data set WORK._SAVE_OUTPUT_TEMP_RECORD has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Appending WORK._SAVE_OUTPUT_TEMP_RECORD a WORK._SAVE_OUTPUT_TEMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP_RECORD.
NOTE: The data set WORK._SAVE_OUTPUT_TEMP has 1 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._SAVE_OUTPUT_TEMP_RECORD (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP.
NOTE: The data set EMWS1.EMSAVE_SAVEOUT has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.EMSAVE_SAVEOUT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 25 observations read from the data set EMWS1.EMSAVE_VARIABLESET.
      WHERE format not = ' ';
NOTE: The data set WORK._FORMATS has 25 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 25 observations read from the data set WORK._FORMATS.
NOTE: 13 observations with duplicate key values were deleted.
NOTE: The data set WORK._FORMATS has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 9 observations read from the data set SASHELP.VFORMAT.
      WHERE (libname not = ' ') and (memname not = ' ');
NOTE: The data set WORK._FORMATS2 has 9 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.34 seconds
      cpu time            0.20 seconds
      


NOTE: There were 12 observations read from the data set WORK._FORMATS.
NOTE: There were 9 observations read from the data set WORK._FORMATS2.
NOTE: The data set WORK._FORMATS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK._FORMATS_CONTENT_TEMP has 4 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set WORK._FORMATS_CONTENT_TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

*------------------------------------------------------------*
WARNING: i cataloghi dei formati non saranno sovrascritti.
*------------------------------------------------------------*

NOTE: Deleting WORK._FORMATS_CONTENT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._FORMATS2 (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._FORMATS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK._SAVE_OUTPUT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16299  
16300  *------------------------------------------------------------*;
16301  * End TRAIN: EMSave;
16302  *------------------------------------------------------------*;

16303  *------------------------------------------------------------*;
16304  * Close any missing semi colons;
16305  *------------------------------------------------------------*;
16306  ;
16307  ;
16308  ;
16309  ;
16310  quit;
16311  *------------------------------------------------------------*;
16312  * Close any unbalanced quotes;
16313  *------------------------------------------------------------*;
16314  /*; *"; *'; */
16315  ;
16316  run;
16317  quit;
16318  /* Reset EM Options */
16319  options formchar="|----|+|---+=|-/\<>*";
16320  options nocenter ls=256 ps=10000;
16321  goptions reset=all device=GIF NODISPLAY;

16322  proc sort data=WORK.EM_USER_REPORT;
16323  by ID VIEW;
16324  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

